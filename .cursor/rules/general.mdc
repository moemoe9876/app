---
description: Follow these general rules for all parts of the project.
globs: *
alwaysApply: false
---
# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see `<ai_context>` tags in the code. These are context tags that you should use to help you understand the codebase.

Make sure to read every page in my app, specifically the marketing, the authentication, the dashboard folders, read all of them, understand how you're going to be able to connect it to a Firebase as a back-end service and do it in a logical manner. And then, yeah.

**Project Structure (Key Directories):**

*   `actions/`: Server Actions for backend logic and data mutations.
*   `app/`: Next.js App Router structure for routes, pages, and layouts.
*   `components/`: Reusable UI components built with Shadcn/ui and Tailwind CSS.
*   `lib/`: Core libraries and utilities (Firebase initialization, analytics, helper functions).
*   `rules/`: Project rules and guidelines for development consistency.
*   `types/`: TypeScript type definitions for enhanced code maintainability.

**Overall Goal:**

Ingestio.io aims to be the go-to platform for users seeking to automate document data extraction, improve workflow efficiency, and gain valuable insights from their documents, all within a user-friendly and secure environment. It leverages a modern tech stack and AI capabilities to deliver a powerful and accessible solution for document processing needs.

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- Backend: Firebase Firestore, Server Actions
- Auth: Firebase Authentication
- Payments: Stripe
- Analytics: PostHog
- Deployment: Vercel

## Project Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database (Not used directly with Firebase Firestore, but can be used for schema definitions if needed)
  - `schema` - Database schemas (For type definitions, not Drizzle schema)
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified
- Don't update shadcn components unless otherwise specified
- **Firebase Initialization:** Initialize Firebase only once in your application, ideally in a `firebaseConfig.ts` file within the `lib` directory and import it where needed.
- **Environment Configuration:**  Use environment variables for all Firebase configuration settings and API keys.
- **Clean Code:** Write clean, modular, and well-commented code. Follow SOLID principles where applicable.
- **Testing:** Implement unit and integration tests for critical functionalities, especially server actions and API routes.

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.local`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Prefer interfaces over type aliases
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts` (adjust this if you define Firestore data types in schema)

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types"
```