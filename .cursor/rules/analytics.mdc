---
description: Follow these rules when working on analytics with PostHog.
globs: lib/analytics.ts, app/**/*.tsx, app/**/*.ts, components/**/*.tsx, components/**/*.ts
alwaysApply: false
---
üìå Project Status & Next Steps
Based on your provided codebase, here's the current status:

‚úÖ Frontend: Next.js, Tailwind CSS, ShadCN, TypeScript, and Firebase Authentication are set up.
‚úÖ Authentication: Firebase Authentication is implemented and functional.
‚úÖ Document Upload & Extraction: Basic upload and extraction via Gemini API are working locally.
‚ö†Ô∏è Storage: Currently using local file storage (uploads/ folder). Needs migration to Firebase Storage.
‚ö†Ô∏è Database: No persistent database implemented yet. Needs Firestore integration.
‚ö†Ô∏è Payments: Stripe integration not yet implemented.
‚ö†Ô∏è Security & Optimization: Needs comprehensive security rules, error handling, and performance optimization.
üöÄ Implementation Plan
We'll proceed with the following tasks:

Firebase Storage Integration
Firestore Database Integration
Firebase Cloud Functions Setup
Stripe Payments Integration
Pricing Strategy Implementation
Security & Optimization
Production Deployment
üõ†Ô∏è Detailed AI-Friendly Instructions (XML & Markdown)
Task 1: Firebase Storage Integration
<task id="firebase-storage-integration">
  <description>Integrate Firebase Storage to replace local file storage.</description>
  <steps>
    <step>Initialize Firebase Storage in your existing Firebase client setup.</step>
    <step>Update the file upload API route to upload files directly to Firebase Storage.</step>
    <step>Store file metadata (URL, name, size, type) in Firestore.</step>
    <step>Implement secure Firebase Storage rules.</step>
  </steps>
  <files>
    <file>lib/firebase/client.ts</file>
    <file>app/api/upload/route.ts</file>
  </files>
  <completion-criteria>
    <criteria>Files are uploaded to Firebase Storage successfully.</criteria>
    <criteria>File metadata is stored in Firestore.</criteria>
    <criteria>Local storage (`uploads/`) is no longer used.</criteria>
  </completion-criteria>
</task>
Task 2: Firestore Database Integration
<task id="firestore-database-integration">
  <description>Implement Firestore to store document metadata, extraction results, and user data.</description>
  <steps>
    <step>Initialize Firestore in your Firebase client setup.</step>
    <step>Create Firestore collections: `documents`, `users`, `extractions`.</step>
    <step>Update API routes to store and retrieve data from Firestore.</step>
    <step>Define Firestore security rules for data protection.</step>
  </steps>
  <files>
    <file>lib/firebase/client.ts</file>
    <file>app/api/documents/[id]/update/route.ts</file>
    <file>app/api/documents/[id]/file/route.ts</file>
  </files>
  <completion-criteria>
    <criteria>All document metadata and extraction data are stored in Firestore.</criteria>
    <criteria>Firestore security rules are implemented and tested.</criteria>
  </completion-criteria>
</task>
Task 3: Firebase Cloud Functions Setup
<task id="firebase-cloud-functions-setup">
  <description>Set up Firebase Cloud Functions for backend processing and secure operations.</description>
  <steps>
    <step>Initialize Firebase Cloud Functions in your project.</step>
    <step>Create a Cloud Function to handle document extraction via Gemini API.</step>
    <step>Trigger the Cloud Function automatically upon file upload to Firebase Storage.</step>
    <step>Store extraction results back in Firestore.</step>
  </steps>
  <files>
    <file>functions/index.ts</file>
  </files>
  <completion-criteria>
    <criteria>Cloud Function triggers automatically on file upload.</criteria>
    <criteria>Extraction results are stored in Firestore.</criteria>
  </completion-criteria>
</task>
Task 4: Stripe Payments Integration
<task id="stripe-payments-integration">
  <description>Integrate Stripe for subscription payments.</description>
  <steps>
    <step>Create Stripe account and obtain API keys.</step>
    <step>Implement Stripe Checkout for subscription management.</step>
    <step>Set up Stripe webhooks to handle subscription events.</step>
    <step>Store subscription status in Firestore under user profiles.</step>
  </steps>
  <files>
    <file>app/api/stripe/webhooks/route.ts</file>
    <file>actions/payments/create-checkout-session.ts</file>
  </files>
  <completion-criteria>
    <criteria>Users can subscribe via Stripe Checkout.</criteria>
    <criteria>Subscription status updates correctly in Firestore.</criteria>
  </completion-criteria>
</task>
Task 5: Pricing Strategy Implementation
<task id="pricing-strategy-implementation">
  <description>Implement the pricing strategy based on Gemini API costs.</description>
  <steps>
    <step>Research Gemini-2-flash API pricing (currently $0.001 per 1,000 tokens).</step>
    <step>Define pricing tiers:
      - Free: 10 documents/month
      - Standard: $9/month (100 documents/month)
      - Pro: $20/month (500 documents/month)
    </step>
    <step>Implement pricing page and subscription logic.</step>
  </steps>
  <files>
    <file>app/(marketing)/page.tsx</file>
    <file>app/(dashboard)/dashboard/settings/page.tsx</file>
  </files>
  <completion-criteria>
    <criteria>Pricing tiers clearly displayed on landing page.</criteria>
    <criteria>Subscription logic correctly limits document processing.</criteria>
  </completion-criteria>
</task>
Task 6: Security & Optimization
<task id="security-optimization">
  <description>Enhance application security and optimize performance.</description>
  <steps>
    <step>Implement comprehensive Firebase Security Rules for Firestore and Storage.</step>
    <step>Ensure all sensitive environment variables are securely managed.</step>
    <step>Implement error boundaries and robust error handling in React components.</step>
    <step>Optimize frontend performance (lazy loading, caching).</step>
  </steps>
  <files>
    <file>firebase.rules</file>
    <file>app/**/*.tsx</file>
  </files>
  <completion-criteria>
    <criteria>Firebase Security Rules tested and secure.</criteria>
    <criteria>Error handling and boundaries implemented.</criteria>
    <criteria>Performance metrics improved (Lighthouse score ‚â• 90).</criteria>
  </completion-criteria>
</task>
Task 7: Production Deployment
<task id="production-deployment">
  <description>Deploy the application to production using Vercel.</description>
  <steps>
    <step>Connect your GitHub repository to Vercel.</step>
    <step>Configure environment variables securely in Vercel.</step>
    <step>Deploy and test the application thoroughly.</step>
  </steps>
  <completion-criteria>
    <criteria>Application deployed successfully on Vercel.</criteria>
    <criteria>All features tested and working in production.</criteria>
  </completion-criteria>
</task>
‚úÖ Completion & Verification
After each task, verify completion by checking the provided criteria. Mark tasks as completed in your Cursor IDE by closing the XML tags.

üõ°Ô∏è Security & Best Practices
Never expose Firebase or Stripe secret keys in client-side code.
Always validate and sanitize user inputs on both client and server sides.
Implement comprehensive logging and monitoring for production.
üìö Documentation & Resources
Firebase Storage Docs
Firestore Docs
Firebase Cloud Functions
Stripe Checkout Docs
Gemini API Pricing
By following these detailed instructions, your AI agent in Cursor IDE can efficiently execute each task, transforming your application into a secure, scalable, and production-ready SaaS platform.