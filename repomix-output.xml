This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: *.md, node_modules/**, mdc/**, *.mdc, md/**, *.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    analytics.mdc
    auth.mdc
    firebase-rules.mdc
    frontend.mdc
    general.mdc
    payments.mdc
    pdf-processing-rules.mdc
    storage.mdc
    ui-design-rules.mdc
    workflow-preferences.mdc
app/
  (auth)/
    login/
      page.tsx
    signup/
      page.tsx
    layout.tsx
  (dashboard)/
    dashboard/
      history/
        page.tsx
      metrics/
        page.tsx
      profile/
        page.tsx
      review/
        [id]/
          page.tsx
        page.tsx
      settings/
        page.tsx
      upload/
        page.tsx
      page.tsx
    layout.tsx
  (marketing)/
    layout.tsx
    page.tsx
  api/
    documents/
      [id]/
        file/
          route.ts
        update/
          route.ts
        route.ts
    extract/
      route.ts
    schema/
      route.ts
    upload/
      route.ts
  globals.css
  layout.tsx
  page.tsx
components/
  dashboard/
    app-sidebar.tsx
    export-modal.tsx
    main-nav.tsx
    mobile-nav.tsx
    mode-toggle.tsx
    sidebar.tsx
    site-header.tsx
    user-nav.tsx
  ui/
    alert-dialog.tsx
    alert.tsx
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    carousel.tsx
    collapsible.tsx
    dialog.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input.tsx
    label.tsx
    mode-toggle.tsx
    popover.tsx
    progress.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    tooltip.tsx
    use-toast.ts
  DataVisualizer.tsx
  DocumentViewer.tsx
  FileUpload.tsx
  InteractiveDataField.tsx
  PdfHighlightLayer.tsx
  PdfViewer.tsx
  PdfViewerUrl.tsx
  PromptInput.tsx
  providers.tsx
  ResizablePanels.tsx
  ResultDisplay.tsx
  theme-provider.tsx
lib/
  utils.ts
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
uploads/
  0a64da20-2faa-4590-bb76-479f6f31aa38/
    extraction_options.json
    extraction_prompt.txt
  0ce1682e-1665-4e0c-8e24-9d97db665aea/
    extracted_data.json
    extraction_options.json
  0e90fd77-12f9-4c7e-bcd6-8e86c8afa08a/
    extraction_prompt.txt
  21c9effe-5542-4f81-9335-2d402842ea32/
    extracted_data.json
    extraction_prompt.txt
  2de96053-34a9-47d9-a7cf-830b180d6add/
    extracted_data.json
    extraction_options.json
  3a99e354-013b-46a1-8833-ca9bf029cbfc/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  3b7b19bd-64cc-48ed-a3b0-8c97238c1e65/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  40bbdc4e-9b2d-4fb8-911f-372763cc79b3/
    extracted_data.json
    extraction_prompt.txt
  448745a8-052c-4ad4-854e-265806b77072/
    extraction_prompt.txt
  56308e6d-2cea-49eb-982c-7c8d774f70a5/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  62665548-fb31-4813-a580-559ceca8cb27/
    extraction_options.json
    extraction_prompt.txt
  67db6027-720e-42d0-9a63-28d2cc967e13/
    extracted_data.json
    extraction_prompt.txt
  6a918084-f0e1-4815-a8e0-cc83173c519a/
    extraction_options.json
    extraction_prompt.txt
  76a0ed88-e500-4400-a818-7b6bd1eda244/
    extraction_options.json
    extraction_prompt.txt
  7994430d-4209-4daa-a0a3-6d011499d469/
    extracted_data.json
    extraction_prompt.txt
  7d200ed1-ab55-420e-9a5c-06ba1b4bbab4/
    extraction_options.json
    extraction_prompt.txt
  87b1f296-7e3c-47f8-9205-19811fbdb63b/
    extracted_data.json
    extraction_options.json
  8eff47ea-39fa-4574-8ccb-037c2e31b9fb/
    extracted_data.json
    extraction_options.json
  984a0fa7-0667-46ac-ab0e-28c8eaf44dae/
    extraction_options.json
    extraction_prompt.txt
  a3893be6-be57-4e5b-9a29-22a9c3dcae39/
    extracted_data.json
    extraction_prompt.txt
  a3f4dc14-42ff-462e-9579-5db0daaf4fe1/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  a484ced0-906a-44a5-ba33-eafd61c9f27f/
    extracted_data.json
    extraction_prompt.txt
  a9e5a2cc-139e-4b51-8af1-1eb9dea456e4/
    extracted_data.json
    extraction_prompt.txt
  af8fbc9c-c60d-483b-bd52-8c990e41e619/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  b0593773-04fd-475e-abf3-6f52f09f8503/
    extracted_data.json
    extraction_options.json
  b7e6648d-a73c-4d0d-8537-8896577addb7/
    extracted_data.json
    extraction_prompt.txt
  b893e9a0-c2eb-4290-b650-ab41e4869e7e/
    extraction_options.json
    extraction_prompt.txt
  bffa53a3-0d63-4cf7-bc27-7a26089603e6/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  c44dc871-86ef-4a4c-832e-9a66c4e1ae43/
    extracted_data.json
    extraction_prompt.txt
  cbb422de-bfb0-4088-bab5-58bc532762ec/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  cbbdac4d-67d6-441a-8377-f460c675d08a/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  cd58c189-5a22-463b-99cd-72348a105c96/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  cf538dfc-ef82-4c5e-9dce-4f38b2c8cb6b/
    extracted_data.json
    extraction_prompt.txt
  d7287f0f-1641-419b-8947-495c50b50d56/
    extraction_options.json
    extraction_prompt.txt
  d7f66a68-5fb9-4f0b-989c-fa49da58e002/
    extracted_data.json
    extraction_options.json
    extraction_prompt.txt
  f0c01381-717b-490c-85f5-939200c05e19/
    extraction_options.json
  f3f7838c-9b88-4e61-a0d8-b1f828bab3bb/
    extracted_data.json
    extraction_prompt.txt
  f6be05e0-e893-45f1-97a7-f13313715e25/
    extracted_data.json
    extraction_options.json
.gitignore
components.json
Dockerfile
eslint.config.mjs
LICENSE
next.config.js
package.json
postcss.config.mjs
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/analytics.mdc">
---
description: Follow these rules when working on analytics with PostHog.
globs: lib/analytics.ts, app/**/*.tsx, app/**/*.ts, components/**/*.tsx, components/**/*.ts
---
### Analytics Rules

Follow these rules when working on analytics.

It uses PostHog for analytics.

#### General Rules

- **Initialize PostHog:** Initialize PostHog in a dedicated `analytics.ts` file within the `lib` directory and import it where needed.
- **Environment Variables:** Use environment variables to store your PostHog API key and instance address.
- **Track Events:** Use `posthog.capture()` to track user events and interactions relevant to your application's analytics goals.
- **Identify Users:** Identify users using `posthog.identify(userId, userProperties)` after successful authentication to associate events with specific users.
- **Feature Flags:** Utilize PostHog feature flags for A/B testing and controlled feature rollouts.
- **Performance Considerations:** Ensure analytics tracking does not negatively impact frontend performance. Defer tracking calls where possible.
- **Privacy:** Be mindful of user privacy and data protection regulations when collecting and using analytics data.

#### Implementation Guidelines

- **Centralized Analytics Helper:** Create a utility function or hook in `lib/analytics.ts` to encapsulate PostHog initialization and event tracking logic.
- **Consistent Event Naming:** Follow a consistent naming convention for analytics events (e.g., `button_click`, `form_submit`, `document_uploaded`).
- **Contextual Event Properties:** Include relevant context as event properties to provide richer insights (e.g., component name, user role, document type).
- **Avoid Sensitive Data:** Do not track or send personally identifiable information (PII) or sensitive data to PostHog unless absolutely necessary and compliant with privacy regulations.

**Example `lib/analytics.ts`:**

```ts
import posthog from 'posthog-js'

const POSTHOG_API_KEY = process.env.NEXT_PUBLIC_POSTHOG_KEY;
const POSTHOG_HOST = process.env.NEXT_PUBLIC_POSTHOG_HOST;

let posthogClient: posthog.PostHog | null = null;

export const initPosthog = () => {
  if (POSTHOG_API_KEY && POSTHOG_HOST && !posthogClient) {
    posthog.init(POSTHOG_API_KEY, {
      api_host: POSTHOG_HOST,
      // ... other configuration options
      loaded: (posthogInstance) => {
        if (process.env.NODE_ENV === 'development') {
          posthogInstance.debug()
        }
        posthogClient = posthogInstance;
      },
    })
    return posthogClient;
  }
  return posthogClient;
}

export const captureEvent = (eventName: string, properties?: Record<string, any>) => {
  if (!posthogClient) {
    posthogClient = initPosthog();
  }
  posthogClient?.capture(eventName, properties);
};

export const identifyUser = (userId: string, userProperties?: Record<string, any>) => {
  if (!posthogClient) {
    posthogClient = initPosthog();
  }
  posthogClient?.identify(userId, userProperties);
};

export const usePostHog = () => {
  if (!posthogClient) {
    posthogClient = initPosthog();
  }
  return {
    posthog: posthogClient,
    captureEvent,
    identifyUser,
  };
};
```

**Example Usage in a Component:**

```tsx
"use client";
import { usePostHog } from "@/lib/analytics";
import { useEffect } from 'react';

const ExampleComponent = () => {
  const { captureEvent, identifyUser } = usePostHog();

  useEffect(() => {
    // Identify user after successful authentication (example)
    identifyUser('user123', { email: 'user@example.com', role: 'editor' });
  }, [identifyUser]);

  const handleClick = () => {
    captureEvent('button_click', { component: 'ExampleComponent', buttonText: 'Click Me' });
    alert('Button Clicked!');
  };

  return (
    <button onClick={handleClick}>Click Me</button>
  );
};
```
```
</file>

<file path=".cursor/rules/auth.mdc">
---
description: Follow these rules when working on auth using Firebase Auth.
globs: app/(auth)/**/*.ts, app/(auth)/**/*.tsx, components/auth/**/*.ts, components/auth/**/*.tsx, actions/auth/**/*.ts
---
### Auth Rules

Follow these rules when working on authentication.

It uses Firebase Authentication for user authentication.

#### General Rules

- **Firebase Auth SDK:** Use the Firebase Authentication SDK for all authentication-related operations.
- **Server-Side Authentication:**  Prefer server-side authentication logic using Firebase Admin SDK in server actions or API routes for enhanced security.
- **Client-Side Authentication:** For client components, use the Firebase client SDK and manage authentication state using React Context or state management libraries.
- **Secure User Context:** Ensure user authentication context is securely managed and accessible across relevant components.
- **Error Handling:** Implement robust error handling for authentication flows, including sign-in, sign-up, and password management.
- **Security Rules:** Define and enforce Firebase Security Rules to protect user data and control access to Firebase services.

#### Firebase Specific Rules

- **Initialize Firebase Auth:** Initialize Firebase Authentication in your `_app.tsx` or layout file if not already set up.
- **Auth Instance:** Obtain the Firebase Auth instance using `getAuth(firebaseApp)`.
- **User Management:** Utilize Firebase Auth methods for user sign-up (`createUserWithEmailAndPassword`, `signInWithPopup`, etc.), sign-in (`signInWithEmailAndPassword`, `signInWithRedirect`, etc.), sign-out (`signOut`), and password management (`sendPasswordResetEmail`, `confirmPasswordReset`, etc.).
- **AuthState Listener:** Implement an authentication state listener (`onAuthStateChanged`) to react to changes in user authentication status and update UI accordingly.
- **Admin SDK for Server Actions:** Use Firebase Admin SDK in server actions for tasks like verifying user tokens, managing custom claims, or any backend-related authentication logic.
- **Environment Variables:** Securely manage Firebase configuration using environment variables and avoid hardcoding sensitive information.

**Example of Client-Side Auth State Management (Conceptual):**

```tsx
"use client";
import { createContext, useContext, useState, useEffect } from 'react';
import { getAuth, onAuthStateChanged, User } from 'firebase/auth';
import { firebaseApp } from '@/firebaseConfig'; // Assuming you have Firebase initialized

interface AuthContextType {
  user: User | null;
  loading: boolean;
  // ... other auth related functions like signIn, signOut etc.
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const auth = getAuth(firebaseApp);
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });
    return () => unsubscribe(); // Cleanup listener
  }, []);

  const value: AuthContextType = { user, loading, /* ... */ };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
```

**Example of Server Action with Admin SDK (Conceptual):**

```ts
"use server";
import { auth } from '@/firebaseAdmin'; // Assuming you have Firebase Admin SDK initialized

export async function verifyIdTokenAction(idToken: string) {
  try {
    const decodedToken = await auth.verifyIdToken(idToken);
    // Token is valid
    return { success: true, uid: decodedToken.uid };
  } catch (error) {
    // Token is invalid
    return { success: false, error: 'Invalid ID token' };
  }
}
```

**RLS Policies (For Firebase Firestore/Realtime Database - if used for user data):**

- If you are using Firebase Firestore or Realtime Database to store user-specific data, remember to define Firebase Security Rules to ensure data privacy and security.
- Example Firestore Security Rule for user-specific data:
  ```
  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      match /users/{userId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null;
      }
    }
  }
  ```
</file>

<file path=".cursor/rules/firebase-rules.mdc">
---
description: 
globs: 
alwaysApply: false
---
# Firebase Implementation Rules
Date Last Modified: March 20, 2025

## Authentication
- Use Firebase Authentication for all user management
- Implement proper email/password and google authentication flows
- Store minimal user data in auth profiles
- Keep extended user data in Firestore
- Implement proper session management and token refresh
- Use custom claims for role-based access control

## Firestore Database
- Use a flat data structure whenever possible
- Implement proper data denormalization for frequently accessed data
- Keep document sizes small (under 1MB)
- Use subcollections for hierarchical data
- Implement proper indexing for frequently queried fields
- Use composite indexes for complex queries
- Write specific security rules for each collection
- Implement proper data validation before writing to the database

## Firebase Storage
- Implement proper file size limitations
- Use content-type validation for uploaded files
- Implement proper file naming conventions
- Store file metadata in Firestore
- Use Firebase Storage security rules to restrict access
- Implement proper file deletion when associated data is deleted
- Use resumable uploads for large files
- Implement proper progress tracking for file uploads

## Security
- Never expose Firebase config in client-side code
- Use Firebase Admin SDK for server-side operations
- Implement proper data access controls based on user roles
- Never trust client-side data validation alone
- Always validate data on the server side
- Use Firebase Functions for sensitive operations
</file>

<file path=".cursor/rules/frontend.mdc">
---
description: Follow these rules when working on the frontend.
globs: globs: app/**/*.tsx, app/**/*.jsx, components/**/*.tsx, components/**/*.jsx
alwaysApply: false
---


### Frontend Rules

Follow these rules when working on the frontend.

It uses Next.js, Tailwind, Shadcn, and Framer Motion.

#### General Rules

- Use `lucide-react` for icons
- `useSidebar` must be used within a `SidebarProvider`
- **Firebase Client SDK:** When interacting with Firebase services from client components, use the Firebase client SDK.
- **Error Boundaries:** Implement error boundaries to gracefully handle errors in React components and prevent application crashes.
- **Accessibility:**  Prioritize accessibility by using semantic HTML, ARIA attributes, and testing with accessibility tools.
- **Performance Optimization:** Optimize frontend performance by lazy loading components, optimizing images, and using memoization techniques where appropriate.

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Always tag a component with either `use server` or `use client` at the top, including layouts and pages

##### Organization

- All components be named using kebab case like `example-component.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

##### Data Fetching

- Fetch data in server components and pass the data down as props to client components.
- Use server actions from `/actions` to mutate data.

##### Server Components

- Use `"use server"` at the top of the file.
- Implement Suspense for asynchronous data fetching to show loading states while data is being fetched.
- If no asynchronous logic is required for a given server component, you do not need to wrap the component in `<Suspense>`. You can simply return the final UI directly since there is no async boundary needed.
- If asynchronous fetching is required, you can use a `<Suspense>` boundary and a fallback to indicate a loading state while data is loading.
- Server components cannot be imported into client components. If you want to use a server component in a client component, you must pass the as props using the "children" prop
- params in server pages should be awaited such as `const { courseId } = await params` where the type is `params: Promise<{ courseId: string }>`

Example of a server layout:

```tsx
"use server"

export default async function ExampleServerLayout({
  children
}: {
  children: React.ReactNode
}) {
  return children
}
```

Example of a server page (with async logic):

```tsx
"use server"

import { Suspense } from "react"
import { SomeAction } from "@/actions/some-actions"
import SomeComponent from "./_components/some-component"
import SomeSkeleton from "./_components/some-skeleton"

export default async function ExampleServerPage() {
  return (
    <Suspense fallback={<SomeSkeleton className="some-class" />}>
      <SomeComponentFetcher />
    </Suspense>
  )
}

async function SomeComponentFetcher() {
  const { data } = await SomeAction()
  return <SomeComponent className="some-class" initialData={data || []} />
}
```

Example of a server page (no async logic required):

```tsx
"use server"

import SomeClientComponent from "./_components/some-client-component"

// In this case, no asynchronous work is being done, so no Suspense or fallback is required.
export default async function ExampleServerPage() {
  return <SomeClientComponent initialData={[]} />
}
```

Example of a server component:

```tsx
"use server"

interface ExampleServerComponentProps {
  // Your props here
}

export async function ExampleServerComponent({
  props
}: ExampleServerComponentProps) {
  // Your code here
}
```

##### Client Components

- Use `"use client"` at the top of the file
- Client components can safely rely on props passed down from server components, or handle UI interactions without needing `<Suspense>` if thereâ€™s no async logic.
- Never use server actions in client components. If you need to create a new server action, create it in `/actions`

Example of a client page:

```tsx
"use client"

export default function ExampleClientPage() {
  // Your code here
}
```

Example of a client component:

```tsx
"use client"

interface ExampleClientComponentProps {
  initialData: any[]
}

export default function ExampleClientComponent({
  initialData
}: ExampleClientComponentProps) {
  // Client-side logic here
  return <div>{initialData.length} items</div>
}
</file>

<file path=".cursor/rules/general.mdc">
---
description: Follow these general rules for all parts of the project.
globs: *
---
# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see `<ai_context>` tags in the code. These are context tags that you should use to help you understand the codebase.

# Project Overview: Ingestio.io - AI-Powered Document Data Extraction Platform

**Ingestio.io** is a web application designed to streamline document workflows by automating the extraction of structured data from various document types. Built on a modern and robust tech stack, it aims to provide a user-friendly, efficient, and secure solution for individuals and businesses looking to eliminate manual data entry and unlock valuable insights from their documents.

**Core Purpose:**

The primary goal of Ingestio.io is to empower users to effortlessly convert unstructured data trapped in documents (like PDFs, invoices, reports, etc.) into structured, actionable data. This is achieved through the power of AI, specifically Google's Gemini models, combined with a user-centric web interface.

**Target Users:**

Ingestio.io is designed for a broad range of users, including:

*   **Businesses of all sizes:**  To automate invoice processing, expense management, contract analysis, and other document-heavy workflows, saving time and reducing errors.
*   **Data Analysts and Researchers:** To quickly extract data from reports, research papers, and datasets embedded in documents for analysis and insights.
*   **Individuals:** To organize personal documents like receipts, financial statements, and important records for better management and accessibility.

**Key Features:**

*   **Document Upload & Preview:** Users can easily upload PDF documents through a drag-and-drop interface or file browser. A built-in PDF viewer allows for document preview and verification.
*   **AI-Powered Data Extraction:** Leveraging Google Gemini AI, the application intelligently extracts structured data from uploaded documents based on user-defined instructions or pre-configured templates.
*   **Dynamic Schema Generation:** The system can dynamically generate JSON schemas based on user prompts, allowing for flexible and adaptable data extraction for various document types.
*   **Interactive Data Review & Verification Page:** A two-panel interface enables users to review extracted data alongside the original document. Features include:
    *   Data highlighting in the document viewer, linked to data fields.
    *   Confidence scores for extracted data, visually represented.
    *   Inline editing capabilities for correcting extraction errors.
    *   Data filtering based on confidence levels.
*   **Data Export:** Users can export the finalized, extracted data in multiple formats (JSON, CSV, Excel) for seamless integration with other systems or tools.
*   **Document History & Management:** A dedicated history page provides a log of all processed documents, allowing users to revisit, re-download, or manage their document history.
*   **User Dashboard & Performance Metrics:** A personalized dashboard provides a central hub for users to:
    *   Track document processing status and history.
    *   Access key performance metrics (document counts, processing times, potential savings).
    *   Quickly access core functionalities like document upload and review.
*   **User Authentication & Security:** Firebase Authentication ensures secure user account management and access control.
*   **Customizable Settings:** Users can manage their profile, application settings, and export preferences.
*   **Responsive & Accessible UI:** Built with Next.js, Tailwind CSS, and Shadcn/ui, the application offers a modern, responsive, and accessible user interface across devices.

**Technology Highlights:**

*   **Cutting-Edge Frontend:** Utilizes the latest Next.js App Router, React 19, and TypeScript for a performant and maintainable frontend. Shadcn/ui and Tailwind CSS provide a visually appealing and consistent design system.
*   **Powerful Backend:** Leverages Next.js Server Actions and API routes for server-side logic, combined with the scalability and flexibility of Firebase Firestore for data storage and Firebase Storage for file management.
*   **AI-Driven Extraction:** Integrates Google Gemini AI for state-of-the-art document understanding and data extraction capabilities.
*   **Scalable & Secure Infrastructure:** Deployed on Vercel with Firebase backend, ensuring scalability, reliability, and robust security.

**Project Structure (Key Directories):**

*   `actions/`: Server Actions for backend logic and data mutations.
*   `app/`: Next.js App Router structure for routes, pages, and layouts.
*   `components/`: Reusable UI components built with Shadcn/ui and Tailwind CSS.
*   `lib/`: Core libraries and utilities (Firebase initialization, analytics, helper functions).
*   `rules/`: Project rules and guidelines for development consistency.
*   `types/`: TypeScript type definitions for enhanced code maintainability.

**Overall Goal:**

Ingestio.io aims to be the go-to platform for users seeking to automate document data extraction, improve workflow efficiency, and gain valuable insights from their documents, all within a user-friendly and secure environment. It leverages a modern tech stack and AI capabilities to deliver a powerful and accessible solution for document processing needs.

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- Backend: Firebase Firestore, Server Actions
- Auth: Firebase Authentication
- Payments: Stripe
- Analytics: PostHog
- Deployment: Vercel

## Project Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database (Not used directly with Firebase Firestore, but can be used for schema definitions if needed)
  - `schema` - Database schemas (For type definitions, not Drizzle schema)
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified
- Don't update shadcn components unless otherwise specified
- **Firebase Initialization:** Initialize Firebase only once in your application, ideally in a `firebaseConfig.ts` file within the `lib` directory and import it where needed.
- **Environment Configuration:**  Use environment variables for all Firebase configuration settings and API keys.
- **Clean Code:** Write clean, modular, and well-commented code. Follow SOLID principles where applicable.
- **Testing:** Implement unit and integration tests for critical functionalities, especially server actions and API routes.

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.local`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Prefer interfaces over type aliases
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts` (adjust this if you define Firestore data types in schema)

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> =
  | { isSuccess: true; message: string; data: T }
  | { isSuccess: false; message: string; data?: never }
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types"
```
</file>

<file path=".cursor/rules/payments.mdc">
---
description: Follow these rules when working on payments with Stripe.
globs: app/api/stripe/**/*.ts, actions/payments/**/*.ts, components/payments/**/*.tsx, components/payments/**/*.ts
---
### Payments Rules

Follow these rules when working on payments.

It uses Stripe for payments.

#### General Rules

- **Stripe SDK:** Utilize the official Stripe Node.js SDK for backend payment processing and the Stripe.js library for frontend payment interactions.
- **Server-Side Payment Logic:** Implement payment processing logic primarily on the server-side (in server actions or API routes) for security and compliance.
- **Secure API Keys:** Securely manage your Stripe API keys. Use environment variables and never expose secret keys in client-side code.
- **Webhook Handling:** Implement Stripe webhook handlers to reliably track payment events, subscription changes, and handle asynchronous payment confirmations.
- **Error Handling:** Implement robust error handling for all Stripe API interactions and payment flows.
- **Compliance (PCI DSS):** Be aware of PCI DSS compliance requirements when handling payment information. Minimize direct handling of sensitive card data on your server.
- **Idempotency:** Implement idempotency for Stripe API requests, especially for critical operations like charges and refunds, to prevent accidental duplicate actions.

#### Stripe Specific Rules

- **Initialize Stripe:** Initialize the Stripe Node.js SDK on the server-side using your secret API key.
- **Frontend Payment Intents/Checkout:** Use Stripe.js to create Payment Intents or Checkout Sessions on the frontend to securely handle payment details and SCA (Strong Customer Authentication).
- **Backend API Routes/Actions:** Create server actions or API routes to:
    - Create Payment Intents or Checkout Sessions.
    - Handle webhook events (e.g., `payment_intent.succeeded`, `checkout.session.completed`, `customer.subscription.updated`).
    - Manage subscriptions using Stripe's Subscription API.
    - Process refunds and handle disputes.
- **Webhook Security:** Verify the authenticity of Stripe webhook events using the Stripe CLI or by validating signatures using your webhook signing secret.
- **Data Modeling:** Design your database schema to effectively track payment status, subscriptions, customer information, and related data.
- **Testing:** Thoroughly test your payment integration using Stripe's test mode and test cards before going live.

**Example Server Action for Creating a Stripe Checkout Session:**

```ts
"use server";
import Stripe from 'stripe';
import { headers } from 'next/headers';
import { stripe } from '@/lib/stripe'; // Assuming you have Stripe initialized

export async function createCheckoutSessionAction(priceId: string) {
  const checkoutSession = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    mode: 'subscription',
    success_url: `${headers().get('origin')}/dashboard/?checkout_success=true`, // Adjust success URL
    cancel_url: `${headers().get('origin')}/dashboard/?checkout_cancel=true`,  // Adjust cancel URL,
  });

  return { sessionId: checkoutSession.id };
}
```

**Example API Route for Handling Stripe Webhooks (`app/api/stripe/webhooks/route.ts`):**

```ts
import Stripe from 'stripe';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';
import { stripe } from '@/lib/stripe'; // Assuming you have Stripe initialized

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(req: Request) {
  const body = await req.text();
  const signature = headers().get('stripe-signature') as string;

  let event;

  try {
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err: any) {
    return new NextResponse(`Webhook Error: ${err.message}`, { status: 400 });
  }

  const eventType = event.type;

  if (eventType === 'payment_intent.succeeded') {
    const paymentIntent = event.data.object as Stripe.PaymentIntent;
    console.log(`PaymentIntent for ${paymentIntent.amount} succeeded!`);
    // Handle successful payment intent (e.g., update database, fulfill order)
  } else if (eventType === 'checkout.session.completed') {
    const checkoutSession = event.data.object as Stripe.Checkout.Session;
    console.log(`Checkout Session completed for customer: ${checkoutSession.customer}`);
    // Handle successful checkout session completion (e.g., grant access, update subscription status)
  }
  // ... handle other relevant event types

  return new NextResponse(null, { status: 200 });
}
```

**Security Considerations:**

- **HTTPS:** Ensure your site is served over HTTPS to protect payment information in transit.
- **CORS:** Configure CORS (Cross-Origin Resource Sharing) policies appropriately for your API routes that handle Stripe requests.
- **Rate Limiting:** Implement rate limiting on your API endpoints to prevent abuse and protect against denial-of-service attacks.
```
</file>

<file path=".cursor/rules/pdf-processing-rules.mdc">
---
description: pdf processing rules
globs: 
alwaysApply: false
---
# PDF Processing Rules
Date Last Modified: March 20, 2025

## Document Handling
- Use react-pdf for PDF rendering and manipulation
- Implement proper PDF validation before processing
- Handle large PDFs efficiently with pagination
- Implement proper error handling for PDF parsing failures
- Use appropriate compression for stored PDFs
- Implement proper caching for frequently accessed PDFs

## Data Extraction
- Use Google Gemini AI for document data extraction
- Implement proper prompt engineering for accurate extraction
- Store extraction metadata with each document
- Implement confidence scoring for all extracted fields
- Store position data for extracted fields when available
- Implement proper validation for extracted data
- Use appropriate data types for extracted fields
- Implement proper error handling for extraction failures

## UI Implementation
- Implement highlighting of extracted fields in document viewers
- Allow users to correct extraction errors
- Show confidence scores visually when appropriate
- Implement proper filtering based on confidence thresholds
- Allow users to export extracted data in multiple formats
- Implement proper data visualization for extracted information
</file>

<file path=".cursor/rules/storage.mdc">
---
description: Follow these rules when working on file storage with Firebase Storage.
globs: actions/storage/**/*.ts, app/**/*.tsx, app/**/*.ts, components/**/*.tsx, components/**/*.ts
---
# Storage Rules

Follow these rules when working with Firebase Storage.

It uses Firebase Storage for file uploads, downloads, and management.

## General Rules

- **Firebase Storage SDK:** Use the Firebase Storage SDK for all storage operations.
- **Security Rules:** Implement and enforce Firebase Storage Security Rules to control access to storage buckets and files.
- **Error Handling:** Implement proper error handling for storage operations, including uploads, downloads, and deletions.
- **Performance Optimization:** Optimize file uploads and downloads by using appropriate transfer sizes and considering CDN usage for public files.
- **Scalability:** Design your storage structure and access patterns to scale efficiently as your application grows.

## Organization

### Buckets

- **Firebase Project Buckets:** Firebase Storage uses buckets within your Firebase project. You will primarily interact with the default bucket or any additional buckets you create in the Firebase console.
- **Bucket Policies (Security Rules):** Define Firebase Storage Security Rules to control access to buckets and files. Rules can be based on authentication, user roles, file metadata, and more.
- **Bucket Location:** Choose the appropriate Firebase Storage bucket location (region) based on your users' geographic distribution and latency requirements.

### File Structure

- Organize files in folders based on their purpose and ownership
- Use predictable, collision-resistant naming patterns
- Structure: `{bucket}/{userId}/{purpose}/{filename}` (Adapt this to your needs, Firebase Storage doesn't enforce bucket names in paths)
- Example: `profile-images/123e4567-e89b/avatar/profile.jpg`
- Include timestamps in filenames when version history is important
- Example: `documents/123e4567-e89b/contracts/2024-02-13-contract.pdf`

## Actions

- When importing storage actions, use `@/actions/storage`
- Name files like `example-storage-actions.ts`
- Include Storage at the end of function names `Ex: uploadFile -> uploadFileStorage`
- Follow the same ActionState pattern as DB actions

Example of a storage action:

```ts
"use server"

import { storage } from "@/lib/firebase-admin"; // Assuming you have Firebase Admin initialized and exported as 'storage'
import { ActionState } from "@/types";

export async function uploadFileStorageAction(
  bucketName: string, // Pass bucket name if using multiple buckets
  filePath: string, // Path within the bucket
  file: File
): Promise<ActionState<{ fileUrl: string }>> {
  try {
    const bucket = storage.bucket(bucketName); // Get specific bucket if needed, otherwise default bucket is used
    const fileRef = bucket.file(filePath);

    const buffer = Buffer.from(await file.arrayBuffer());

    await fileRef.save(buffer, {
      metadata: {
        contentType: file.type,
      },
    });

    const fileUrl = await fileRef.getSignedUrl({
      action: 'read',
      expires: '03-09-2491' // Example expiry date (adjust as needed)
    });


    return {
      isSuccess: true,
      message: "File uploaded successfully",
      data: { fileUrl: fileUrl[0] }
    };
  } catch (error) {
    console.error("Error uploading file to Firebase Storage:", error);
    return { isSuccess: false, message: "Failed to upload file" };
  }
}
```

## File Handling

### Upload Rules

- Always validate file size before upload on the client-side and server-side.
- Implement file type validation using both extension and MIME type.
- Generate unique filenames to prevent collisions (consider using UUIDs).
- Set appropriate content-type headers when uploading.
- Handle existing files appropriately (error or overwrite based on requirements).

Example validation (Conceptual - Adapt for your forms/actions):

```ts
const MAX_FILE_SIZE = 10 * 1024 * 1024 // 10MB
const ALLOWED_TYPES = ["image/jpeg", "image/png", "image/webp", "application/pdf"]

function validateFile(file: File): boolean {
  if (file.size > MAX_FILE_SIZE) {
    throw new Error("File size exceeds limit");
  }

  if (!ALLOWED_TYPES.includes(file.type)) {
    throw new Error("File type not allowed");
  }

  return true;
}
```

### Download Rules

- Always handle missing files gracefully.
- Implement proper error handling for failed downloads.
- Use signed URLs for private files to control access and expiration.

### Delete Rules

- Implement soft deletes when appropriate (e.g., mark file as deleted in database instead of immediately deleting from storage).
- Clean up related database records when deleting files.
- Handle bulk deletions carefully.
- Verify user permissions before deletion.

## Security

### Bucket Policies (Firebase Storage Security Rules)

- Make buckets private by default using Firebase Storage Security Rules.
- Only allow authorized users to read and write files based on authentication and authorization logic in your Security Rules.
- Example Security Rule to allow only authenticated users to upload and read files in a 'user-uploads' folder, and only allow users to delete their own files:

```
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /user-uploads/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    match /{allPaths=**} {
      allow read: if false; // Default deny all other paths
    }
  }
}
```

*(Remember to customize these rules based on your specific access control requirements. Deploy these rules to your Firebase project via the Firebase CLI or Firebase console.)*

### Access Control

- Generate short-lived signed URLs for private files using `getDownloadURL` or `getSignedUrl` to grant temporary access.
- Implement proper CORS policies in Firebase Storage settings if needed for cross-origin access.
- Validate user permissions before any storage operation in your server-side code and Firebase Security Rules.

## Error Handling

- Implement specific error types for common storage issues (e.g., file not found, permission denied, upload failed).
- Always provide meaningful error messages to the user.
- Implement retry logic for transient failures in storage operations.
- Log storage errors separately for monitoring and debugging.

## Optimization

- Implement progressive upload for large files if needed.
- Clean up temporary files and handle failed uploads appropriately.
- Use batch operations when handling multiple files for better performance.
- Consider using Firebase Storage's built-in CDN for serving public files efficiently.
```
</file>

<file path=".cursor/rules/ui-design-rules.mdc">
---
description: 
globs: 
alwaysApply: true
---
# UI Design Rules
Date Last Modified: March 20, 2025

## Component Structure
- Use shadcn/ui components for consistent UI
- Implement responsive design for all components
- Use proper layout components (Flex, Grid) for complex layouts
- Implement proper loading states for asynchronous operations
- Use proper error states for failed operations
- Implement proper empty states for lists and collections

## Styling Approach
- Use Tailwind CSS for styling
- Follow the project's color scheme and design system
- Use consistent spacing and sizing
- Implement proper dark mode support
- Use proper typography hierarchy
- Implement proper animations and transitions

## User Experience
- Implement proper form validation with clear error messages
- Use proper loading indicators for asynchronous operations
- Implement proper toast notifications for user feedback
- Use proper confirmation dialogs for destructive actions
- Implement proper keyboard navigation
- Use proper focus management for accessibility

## Layout Patterns
- Use ResizablePanels for split-view layouts
- Implement proper sidebar navigation with collapsible sections
- Use proper card layouts for content organization
- Implement proper table layouts for data display
- Use proper modal dialogs for focused interactions
- Implement proper drawer components for side panels
</file>

<file path=".cursor/rules/workflow-preferences.mdc">
---
description: 
globs: 
alwaysApply: true
---
# Workflow Preferences
Date Last Modified: March 20, 2025

## Development Approach
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Make incremental changes with frequent testing
- Implement features one at a time with proper testing
- Avoid making major architectural changes unless explicitly instructed
- Always consider the impact of changes on other parts of the codebase

## Testing Strategy
- Write end-to-end tests for critical user flows
- Test all major functionality thoroughly
- Run tests after every significant change
- Fix failing tests by addressing the root cause, not by changing the test
- Implement proper test fixtures and mocks
- Test edge cases and error scenarios

## Code Quality
- Follow consistent coding patterns throughout the codebase
- Use proper error handling for all operations
- Implement proper logging for debugging
- Write clear, concise comments for complex logic
- Use descriptive variable and function names
- Refactor code when it becomes too complex or lengthy

## Performance Optimization
- Optimize only after functionality is working correctly
- Focus on user-facing performance first
- Implement proper caching strategies
- Optimize database queries for efficiency
- Use proper indexing for frequently queried data
- Implement proper pagination for large datasets

- **Code Analysis & Refactoring Techniques**
  - **Top-Level Function Search**
    - Use grep pattern matching to find all exported functions across the codebase
    - Command: `grep -E "export (function|const) \w+|function \w+\(|const \w+ = \(|module\.exports" --include="*.js" -r ./`
    - Benefits:
      - Quickly identify all public API functions without reading implementation details
      - Compare functions between files during refactoring (e.g., monolithic to modular structure)
      - Verify all expected functions exist in refactored modules
      - Identify duplicate functionality or naming conflicts
    - Usage examples:
      - When migrating from `scripts/dev.js` to modular structure: `grep -E "function \w+\(" scripts/dev.js`
      - Check function exports in a directory: `grep -E "export (function|const)" scripts/modules/`
      - Find potential naming conflicts: `grep -E "function (get|set|create|update)\w+\(" -r ./`
    - Variations:
      - Add `-n` flag to include line numbers
      - Add `--include="*.ts"` to filter by file extension
      - Use with `| sort` to alphabetize results
    - Integration with refactoring workflow:
      - Start by mapping all functions in the source file
      - Create target module files based on function grouping
      - Verify all functions were properly migrated
      - Check for any unintentional duplications or omissions
</add this to your cursor rules
</file>

<file path="app/(auth)/login/page.tsx">
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText } from "lucide-react";

export default function LoginPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-muted/40 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1 text-center">
          <div className="flex justify-center mb-2">
            <FileText className="h-10 w-10 text-primary" />
          </div>
          <CardTitle className="text-2xl font-bold">Welcome back</CardTitle>
          <CardDescription>
            Sign in to your Ingestio.io account
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input id="email" type="email" placeholder="name@example.com" />
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="password">Password</Label>
              <Link
                href="/forgot-password"
                className="text-sm font-medium text-primary hover:underline"
              >
                Forgot password?
              </Link>
            </div>
            <Input id="password" type="password" />
          </div>
          <Button className="w-full" type="submit">
            Sign In
          </Button>
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-card px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <Button variant="outline" className="w-full">
              Google
            </Button>
            <Button variant="outline" className="w-full">
              GitHub
            </Button>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <div className="text-center text-sm text-muted-foreground">
            Don't have an account?{" "}
            <Link
              href="/signup"
              className="font-medium text-primary hover:underline"
            >
              Sign up
            </Link>
          </div>
          <div className="text-center text-xs text-muted-foreground">
            By signing in, you agree to our{" "}
            <Link href="#" className="hover:underline">
              Terms of Service
            </Link>{" "}
            and{" "}
            <Link href="#" className="hover:underline">
              Privacy Policy
            </Link>
            .
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="app/(auth)/signup/page.tsx">
"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { FileText } from "lucide-react";

export default function SignupPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-muted/40 py-12 px-4 sm:px-6 lg:px-8">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1 text-center">
          <div className="flex justify-center mb-2">
            <FileText className="h-10 w-10 text-primary" />
          </div>
          <CardTitle className="text-2xl font-bold">Create an account</CardTitle>
          <CardDescription>
            Sign up for Ingestio.io to get started
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="first-name">First name</Label>
              <Input id="first-name" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="last-name">Last name</Label>
              <Input id="last-name" />
            </div>
          </div>
          <div className="space-y-2">
            <Label htmlFor="email">Email</Label>
            <Input id="email" type="email" placeholder="name@example.com" />
          </div>
          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input id="password" type="password" />
            <p className="text-xs text-muted-foreground">
              Password must be at least 8 characters long
            </p>
          </div>
          <div className="space-y-2">
            <Label htmlFor="company">Company (optional)</Label>
            <Input id="company" />
          </div>
          <Button className="w-full" type="submit">
            Create Account
          </Button>
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-card px-2 text-muted-foreground">
                Or continue with
              </span>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <Button variant="outline" className="w-full">
              Google
            </Button>
            <Button variant="outline" className="w-full">
              GitHub
            </Button>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <div className="text-center text-sm text-muted-foreground">
            Already have an account?{" "}
            <Link
              href="/login"
              className="font-medium text-primary hover:underline"
            >
              Sign in
            </Link>
          </div>
          <div className="text-center text-xs text-muted-foreground">
            By signing up, you agree to our{" "}
            <Link href="#" className="hover:underline">
              Terms of Service
            </Link>{" "}
            and{" "}
            <Link href="#" className="hover:underline">
              Privacy Policy
            </Link>
            .
          </div>
        </CardFooter>
      </Card>
    </div>
  );
}
</file>

<file path="app/(auth)/layout.tsx">
export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}
</file>

<file path="app/(dashboard)/dashboard/review/page.tsx">
"use client";

import { useState } from "react";
import { ResizablePanels } from "@/components/ResizablePanels";
import DocumentViewer from "@/components/DocumentViewer";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Check, FileText, MessageSquare, RotateCcw, Edit, Save } from "lucide-react";

// Mock data for the current document
const mockDocument = {
  id: "doc-123",
  name: "Invoice-2023.pdf",
  url: "https://arxiv.org/pdf/2303.08774.pdf", // Sample PDF URL
  status: "reviewing",
  createdAt: "2023-03-15T12:00:00Z",
  extractedData: {
    invoiceNumber: "INV-2023-001",
    date: "2023-03-01",
    totalAmount: "$1,250.00",
    vendor: "Acme Corp",
    items: [
      { description: "Service A", quantity: 1, unitPrice: "$800.00", total: "$800.00" },
      { description: "Service B", quantity: 2, unitPrice: "$225.00", total: "$450.00" }
    ]
  }
};

// Sample highlight areas
const sampleHighlights = [
  {
    id: "highlight-1",
    pageNumber: 1,
    boundingBox: [10, 20, 30, 30] as [number, number, number, number], // [x1, y1, x2, y2] as percentages
    color: "#3b82f6"
  },
  {
    id: "highlight-2",
    pageNumber: 1,
    boundingBox: [40, 50, 70, 60] as [number, number, number, number],
    color: "#10b981"
  }
];

export default function ReviewPage() {
  const [activeField, setActiveField] = useState<string | null>(null);
  const [extractedData, setExtractedData] = useState(mockDocument.extractedData);
  const [isEditing, setIsEditing] = useState(false);

  const handleFieldClick = (fieldName: string) => {
    setActiveField(fieldName);
  };

  const handlePositionClick = (pageNumber: number, position: [number, number]) => {
    console.log(`Clicked at page ${pageNumber}, position: [${position[0]}, ${position[1]}]`);
    // Logic to add a new highlight or link position to a field
  };

  const handleValueChange = (field: string, value: string) => {
    setExtractedData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const toggleEditMode = () => {
    setIsEditing(!isEditing);
  };

  const saveChanges = () => {
    // Save logic would go here
    setIsEditing(false);
  };

  return (
    <div className="flex flex-col gap-4 w-full h-full overflow-hidden box-border">
      <div className="flex flex-col gap-2">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold tracking-tight text-foreground">Document Review</h1>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={toggleEditMode}>
              {isEditing ? (
                <>
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Cancel
                </>
              ) : (
                <>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </>
              )}
            </Button>
            {isEditing && (
              <Button size="sm" onClick={saveChanges}>
                <Save className="h-4 w-4 mr-2" />
                Save
              </Button>
            )}
          </div>
        </div>
        <p className="text-muted-foreground">
          Review and verify extracted information from {mockDocument.name}
        </p>
      </div>

      <ResizablePanels 
        defaultLeftWidth={40}
        minLeftWidth={25}
        maxLeftWidth={60}
        storageKey="reviewPagePanels"
        className="flex-1 h-[calc(100%-4rem)] rounded-lg box-border"
        leftPanel={
          <div className="h-full flex flex-col p-2 box-border">
            <Card className="flex-1 border-border rounded-lg overflow-hidden">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Document</CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent className="h-[calc(100%-60px)] p-2">
                <DocumentViewer 
                  url={mockDocument.url} 
                  highlights={sampleHighlights}
                  onPositionClick={handlePositionClick}
                />
              </CardContent>
            </Card>
          </div>
        }
        rightPanel={
          <div className="h-full flex flex-col p-2 box-border">
            <Tabs defaultValue="data" className="flex-1 flex flex-col h-full">
              <TabsList className="mb-4">
                <TabsTrigger value="data">Extracted Data</TabsTrigger>
                <TabsTrigger value="validation">Validation</TabsTrigger>
                <TabsTrigger value="comments">Comments</TabsTrigger>
              </TabsList>
              
              <TabsContent value="data" className="flex-1 h-[calc(100%-40px)]">
                <Card className="border-border h-full rounded-lg">
                  <CardHeader>
                    <CardTitle>Extracted Information</CardTitle>
                    <CardDescription>
                      Review and validate the extracted data
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6 overflow-y-auto h-[calc(100%-120px)]">
                    <div className="space-y-4">
                      {Object.entries(extractedData).map(([key, value]) => {
                        if (key === 'items') return null; // Handle items separately
                        
                        return (
                          <div 
                            key={key}
                            className={`p-3 rounded-md border ${activeField === key ? 'border-primary bg-primary/5' : 'border-border'}`}
                            onClick={() => handleFieldClick(key)}
                          >
                            <div className="text-sm font-medium text-muted-foreground mb-1">
                              {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                            </div>
                            <div className="flex items-center justify-between">
                              {isEditing ? (
                                <input 
                                  type="text" 
                                  value={value as string} 
                                  onChange={(e) => handleValueChange(key, e.target.value)}
                                  className="p-1 bg-background border border-input rounded-md w-full"
                                  aria-label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                                />
                              ) : (
                                <div className="font-medium">{value as string}</div>
                              )}
                              <Check className="h-4 w-4 text-green-500 ml-2" />
                            </div>
                          </div>
                        );
                      })}
                      
                      {/* Line items section */}
                      <div className="mt-6">
                        <h3 className="text-sm font-medium text-muted-foreground mb-3">Line Items</h3>
                        <div className="space-y-3">
                          {extractedData.items.map((item, index) => (
                            <div 
                              key={`item-${index}`}
                              className="p-3 rounded-md border border-border"
                            >
                              <div className="grid grid-cols-2 gap-2">
                                <div className="text-sm">
                                  <span className="text-muted-foreground">Description:</span>{' '}
                                  <span className="font-medium">{item.description}</span>
                                </div>
                                <div className="text-sm">
                                  <span className="text-muted-foreground">Quantity:</span>{' '}
                                  <span className="font-medium">{item.quantity}</span>
                                </div>
                                <div className="text-sm">
                                  <span className="text-muted-foreground">Unit Price:</span>{' '}
                                  <span className="font-medium">{item.unitPrice}</span>
                                </div>
                                <div className="text-sm">
                                  <span className="text-muted-foreground">Total:</span>{' '}
                                  <span className="font-medium">{item.total}</span>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="validation" className="flex-1 h-[calc(100%-40px)]">
                <Card className="border-border h-full rounded-lg">
                  <CardHeader>
                    <CardTitle>Validation Rules</CardTitle>
                    <CardDescription>
                      Check for validation issues in the extracted data
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="overflow-y-auto h-[calc(100%-120px)]">
                    <div className="flex items-center justify-center h-60 border border-dashed rounded-md">
                      <p className="text-muted-foreground">No validation issues found</p>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              <TabsContent value="comments" className="flex-1 h-[calc(100%-40px)]">
                <Card className="border-border h-full rounded-lg">
                  <CardHeader>
                    <CardTitle>Comments & Notes</CardTitle>
                    <CardDescription>
                      Add comments or notes about this document
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="overflow-y-auto h-[calc(100%-120px)]">
                    <div className="flex flex-col h-60">
                      <div className="flex-1 border rounded-md p-3 mb-3 overflow-y-auto">
                        <div className="text-muted-foreground text-center py-10">
                          No comments yet
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <input 
                          type="text" 
                          placeholder="Add a comment..."
                          className="flex-1 p-2 border border-input rounded-md"
                        />
                        <Button size="sm">
                          <MessageSquare className="h-4 w-4 mr-2" />
                          Add
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        }
      />
    </div>
  );
}
</file>

<file path="app/(marketing)/layout.tsx">
export default function MarketingLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return <>{children}</>;
}
</file>

<file path="components/dashboard/app-sidebar.tsx">
"use client"

import * as React from "react"
import Link from "next/link"
import { usePathname } from "next/navigation";
import {
  BarChart3,
  FileUp,
  History,
  Home,
  Settings,
  User,
  FileText,
  PlusCircle,
} from "lucide-react"

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  useSidebar,
} from "@/components/ui/sidebar"
import { Switch } from "@/components/ui/switch"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useTheme } from "next-themes"
import { cn } from "@/lib/utils"

const navMain = [
  {
    title: "Dashboard",
    url: "/dashboard",
    icon: Home,
  },
  {
    title: "Upload Document",
    url: "/dashboard/upload",
    icon: FileUp,
  },
  {
    title: "History",
    url: "/dashboard/history",
    icon: History,
  },
  {
    title: "Performance Metrics",
    url: "/dashboard/metrics",
    icon: BarChart3,
  },
];

const navSecondary = [
  {
    title: "Profile",
    url: "/dashboard/profile",
    icon: User,
  },
  {
    title: "Settings",
    url: "/dashboard/settings",
    icon: Settings,
  },
];

const user = {
  name: "User",
  email: "user@example.com",
  avatar: "/avatars/user.png",
};

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  const pathname = usePathname();
  const { resolvedTheme, setTheme } = useTheme();
  const [mounted, setMounted] = React.useState(false);
  const { isMobile } = useSidebar();

  React.useEffect(() => {
    setMounted(true);
  }, []);

  return (
    <Sidebar
      collapsible="offcanvas"
      className="bg-sidebar-background dark:bg-sidebar-background border-none"
      {...props}
    >
      <SidebarHeader className="border-none">
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton
              asChild
              className="data-[slot=sidebar-menu-button]:!p-1.5"
            >
              <Link href="/dashboard">
                <FileText className="text-primary h-5 w-5" />
                <span className="text-base font-semibold">Ingestio.io</span>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupContent className="flex flex-col gap-2 px-1">
            <SidebarMenu>
              <SidebarMenuItem className="flex items-center gap-2">
                <SidebarMenuButton
                  tooltip="Quick Upload"
                  className="bg-primary text-white hover:bg-primary/90 hover:text-white font-semibold active:bg-primary/90 active:text-white min-w-8 duration-200 ease-linear w-full"
                  asChild
                >
                  <Link href="/dashboard/upload">
                    <PlusCircle className="h-4 w-4" aria-hidden="true" />
                    <span>Quick Upload</span>
                  </Link>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
            
            <SidebarMenu>
              {navMain.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild tooltip={item.title} className={cn(
                    "w-full px-2",
                    pathname === item.url && "hover:bg-sidebar-accent"
                  )}>
                    <Link 
                      href={item.url}
                      className={cn(
                        "w-full rounded-md px-2",
                        pathname === item.url 
                          ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                          : "text-sidebar-foreground/80 hover:text-sidebar-foreground"
                      )}
                    >
                      <item.icon className={cn(
                        "h-4 w-4",
                        pathname === item.url 
                          ? "text-sidebar-accent-foreground" 
                          : "text-sidebar-foreground/80"
                      )} />
                      <span>{item.title}</span>
                    </Link>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
        
        <SidebarGroup className="mt-auto">
          <SidebarGroupLabel className="text-sidebar-foreground/70 px-3">Settings</SidebarGroupLabel>
          <SidebarGroupContent className="px-1">
            <SidebarMenu>
              {navSecondary.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild tooltip={item.title} className={cn(
                    "w-full px-2",
                    pathname === item.url && "hover:bg-sidebar-accent"
                  )}>
                    <Link 
                      href={item.url}
                      className={cn(
                        "w-full rounded-md px-2",
                        pathname === item.url 
                          ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium" 
                          : "text-sidebar-foreground/80 hover:text-sidebar-foreground"
                      )}
                    >
                      <item.icon className={cn(
                        "h-4 w-4",
                        pathname === item.url 
                          ? "text-sidebar-accent-foreground" 
                          : "text-sidebar-foreground/80"
                      )} />
                      <span>{item.title}</span>
                    </Link>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
              
              <SidebarMenu className="group-data-[collapsible=icon]:hidden">
                <SidebarMenuItem>
                  <SidebarMenuButton asChild className="w-full px-2">
                    <label className="flex w-full cursor-pointer items-center justify-between text-sidebar-foreground/80 hover:text-sidebar-foreground rounded-md px-2">
                      <span>Dark Mode</span>
                      {mounted ? (
                        <Switch
                          className="ml-auto"
                          checked={resolvedTheme === "dark"}
                          onCheckedChange={() =>
                            setTheme(resolvedTheme === "dark" ? "light" : "dark")
                          }
                        />
                      ) : null}
                    </label>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              </SidebarMenu>
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
      
      <SidebarFooter className="border-none">
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton size="lg" asChild className="w-full rounded-md mx-1">
              <div className="flex items-center gap-2">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">U</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-medium">{user.name}</span>
                  <span className="text-sidebar-foreground/70 truncate text-xs">
                    {user.email}
                  </span>
                </div>
              </div>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarFooter>
    </Sidebar>
  )
}
</file>

<file path="components/dashboard/main-nav.tsx">
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { FileText } from "lucide-react";

export function MainNav() {
  const pathname = usePathname();

  return (
    <div className="flex items-center gap-2">
      <Link href="/dashboard" className="hidden items-center space-x-2 md:flex">
        <FileText className="h-6 w-6 text-primary" />
        <span className="hidden font-bold sm:inline-block">Ingestio.io</span>
      </Link>
      <nav className="hidden gap-6 md:flex">
        <Link
          href="/dashboard"
          className={cn(
            "flex items-center text-sm font-medium transition-colors hover:text-primary",
            pathname === "/dashboard"
              ? "text-foreground"
              : "text-muted-foreground"
          )}
        >
          Dashboard
        </Link>
        <Link
          href="/dashboard/upload"
          className={cn(
            "flex items-center text-sm font-medium transition-colors hover:text-primary",
            pathname === "/dashboard/upload"
              ? "text-foreground"
              : "text-muted-foreground"
          )}
        >
          Upload
        </Link>
        <Link
          href="/dashboard/history"
          className={cn(
            "flex items-center text-sm font-medium transition-colors hover:text-primary",
            pathname === "/dashboard/history"
              ? "text-foreground"
              : "text-muted-foreground"
          )}
        >
          History
        </Link>
      </nav>
    </div>
  );
}
</file>

<file path="components/dashboard/mobile-nav.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Menu } from "lucide-react";

interface MobileNavProps {
  onOpenChange: (open: boolean) => void;
}

export function MobileNav({ onOpenChange }: MobileNavProps) {
  return (
    <Button
      variant="ghost"
      size="icon"
      className="md:hidden"
      onClick={() => onOpenChange(true)}
    >
      <Menu className="h-5 w-5" />
      <span className="sr-only">Toggle Menu</span>
    </Button>
  );
}
</file>

<file path="components/dashboard/mode-toggle.tsx">
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ModeToggle() {
  const { theme, setTheme } = useTheme()

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  return (
    <Button
      variant="outline"
      size="icon"
      className="size-8 hover:bg-primary/10 hover:text-primary border-border"
      onClick={toggleTheme}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
</file>

<file path="components/dashboard/site-header.tsx">
"use client"

import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import { SidebarTrigger } from "@/components/ui/sidebar"
import { ModeToggle } from "@/components/dashboard/mode-toggle"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"

interface SiteHeaderProps extends React.HTMLAttributes<HTMLElement> {}

export function SiteHeader({ className, ...props }: SiteHeaderProps) {
  const pathname = usePathname()
  
  // Get the current page title from the pathname
  const getTitle = () => {
    const path = pathname.split("/").filter(Boolean)
    if (path.length === 1 && path[0] === "dashboard") {
      return "Dashboard"
    }
    if (path.length > 1) {
      return path[1].charAt(0).toUpperCase() + path[1].slice(1).replace(/-/g, " ")
    }
    return "Ingestio.io"
  }

  return (
    <header className={cn("flex h-[40px] shrink-0 items-center gap-2 border-b border-border bg-background dark:bg-background transition-[width,height] ease-linear", className)} {...props}>
      <div className="flex w-full items-center gap-1 px-4 lg:gap-2 lg:px-6">
        <SidebarTrigger className="-ml-1 text-primary hover:bg-primary/10" />
        <Separator
          orientation="vertical"
          className="mx-2 data-[orientation=vertical]:h-4"
        />
        <h1 className="text-base font-medium text-foreground dark:text-foreground">{getTitle()}</h1>
        <div className="ml-auto flex items-center gap-2">
          <ModeToggle />
        </div>
      </div>
    </header>
  )
}
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="components/ui/collapsible.tsx">
"use client"

import * as React from "react"
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

import { cn } from "@/lib/utils"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = React.forwardRef<
  React.ElementRef<typeof CollapsiblePrimitive.CollapsibleContent>,
  React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.CollapsibleContent>
>(({ className, ...props }, ref) => (
  <CollapsiblePrimitive.CollapsibleContent
    ref={ref}
    className={cn(
      "data-[state=closed]:animate-collapsible-up data-[state=open]:animate-collapsible-down overflow-hidden",
      className
    )}
    {...props}
  />
))
CollapsibleContent.displayName = "CollapsibleContent"

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/mode-toggle.tsx">
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ModeToggle() {
  const { theme, setTheme } = useTheme()

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark")
  }

  return (
    <Button
      variant="outline"
      size="icon"
      className="size-8 hover:bg-primary/10 hover:text-primary border-border"
      onClick={toggleTheme}
      aria-label={theme === "dark" ? "Switch to light mode" : "Switch to dark mode"}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
</file>

<file path="components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import { X } from "lucide-react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-toast.ts">
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 5
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="components/DocumentViewer.tsx">
"use client";

import { useState, useEffect, useRef } from "react";
import PdfViewerUrl from "./PdfViewerUrl";
import { ZoomIn, ZoomOut, MoveHorizontal } from "lucide-react";
import { Button } from "./ui/button";
import { cn } from "@/lib/utils";

interface HighlightRect {
  pageNumber: number;
  boundingBox: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
  color?: string;
  id: string;
}

interface DocumentViewerProps {
  url: string;
  highlights?: HighlightRect[];
  onPositionClick?: (pageNumber: number, position: [number, number]) => void;
}

export default function DocumentViewer({ 
  url, 
  highlights = [], 
  onPositionClick
}: DocumentViewerProps) {
  const [documentType, setDocumentType] = useState<"pdf" | "image" | "unknown">("unknown");
  const [loading, setLoading] = useState(true);
  const [zoom, setZoom] = useState(100);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [dragMode, setDragMode] = useState<boolean>(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const imageRef = useRef<HTMLImageElement>(null);

  useEffect(() => {
    // Check document type based on extension
    if (url) {
      if (url.endsWith('.pdf')) {
        setDocumentType("pdf");
      } else if (url.endsWith('.png') || url.endsWith('.jpg') || url.endsWith('.jpeg')) {
        setDocumentType("image");
      } else {
        // Make a HEAD request to check content type
        fetch(url, { method: 'HEAD' })
          .then(response => {
            const contentType = response.headers.get('content-type') || '';
            if (contentType.includes('pdf')) {
              setDocumentType("pdf");
            } else if (contentType.includes('image')) {
              setDocumentType("image");
            } else {
              setDocumentType("unknown");
            }
          })
          .catch(error => {
            console.error("Error determining document type:", error);
            setDocumentType("unknown");
          })
          .finally(() => {
            setLoading(false);
          });
      }
    }
    
    // Reset zoom and position on new document
    setZoom(100);
    setPosition({ x: 0, y: 0 });
  }, [url]);

  const handleZoomIn = () => {
    setZoom(prevZoom => Math.min(prevZoom + 25, 400));
  };

  const handleZoomOut = () => {
    setZoom(prevZoom => Math.max(prevZoom - 25, 25));
  };

  const handleResetView = () => {
    setZoom(100);
    setPosition({ x: 0, y: 0 });
  };

  // Handle mouse down for dragging
  const handleMouseDown = (e: React.MouseEvent) => {
    // Don't initiate drag if in position selection mode
    if (onPositionClick && !dragMode) return;
    
    setIsDragging(true);
    setDragStart({ x: e.clientX - position.x, y: e.clientY - position.y });
    
    // Prevent default behavior when dragging
    e.preventDefault();
  };

  // Handle mouse move for dragging
  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging) {
      setPosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  };

  // Handle mouse up to stop dragging
  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // Toggle between drag mode and position selection mode
  const toggleDragMode = () => {
    setDragMode(!dragMode);
  };

  // Handle click on image with position calculation
  const handleImageClick = (e: React.MouseEvent<HTMLImageElement>) => {
    if (!onPositionClick || dragMode) return;
    
    const imgElement = e.currentTarget;
    const rect = imgElement.getBoundingClientRect();
    
    // Calculate position as percentage of image dimensions, accounting for zoom and pan
    const zoomFactor = zoom / 100;
    const offsetX = (e.clientX - rect.left) / zoomFactor;
    const offsetY = (e.clientY - rect.top) / zoomFactor;
    
    const x = (offsetX / imgElement.naturalWidth) * 100;
    const y = (offsetY / imgElement.naturalHeight) * 100;
    
    // Ensure values are within bounds
    const boundedX = Math.max(0, Math.min(100, x));
    const boundedY = Math.max(0, Math.min(100, y));
    
    // Notify parent component about the click position (use page 1 for images)
    onPositionClick(1, [boundedX, boundedY]);
  };

  // Cleanup event listeners
  useEffect(() => {
    const handleGlobalMouseUp = () => {
      setIsDragging(false);
    };
    
    const handleGlobalMouseMove = (e: MouseEvent) => {
      if (isDragging) {
        setPosition({
          x: e.clientX - dragStart.x,
          y: e.clientY - dragStart.y
        });
      }
    };
    
    window.addEventListener('mouseup', handleGlobalMouseUp);
    window.addEventListener('mousemove', handleGlobalMouseMove);
    
    return () => {
      window.removeEventListener('mouseup', handleGlobalMouseUp);
      window.removeEventListener('mousemove', handleGlobalMouseMove);
    };
  }, [isDragging, dragStart]);

  if (loading) {
    return <div className="flex items-center justify-center h-full">Loading document...</div>;
  }

  if (documentType === "pdf") {
    return (
      <div className="flex flex-col h-full w-full box-border">
        <div className="flex items-center justify-between gap-2 mb-2">
          <Button 
            variant={dragMode ? "default" : "outline"} 
            size="sm" 
            onClick={toggleDragMode}
            title={dragMode ? "Switch to selection mode" : "Switch to drag mode"}
          >
            {dragMode ? "Drag Mode" : "Selection Mode"}
          </Button>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" onClick={handleZoomOut}>
              <ZoomOut className="h-4 w-4" />
            </Button>
            <span className="text-sm">{zoom}%</span>
            <Button variant="outline" size="icon" onClick={handleZoomIn}>
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="sm" onClick={handleResetView}>
              <MoveHorizontal className="h-4 w-4 mr-1" />
              Reset View
            </Button>
          </div>
        </div>
        <PdfViewerUrl 
          url={url} 
          highlights={highlights}
          onPositionClick={dragMode ? undefined : onPositionClick}
          zoomLevel={zoom}
          onZoomChange={setZoom}
          className="w-full h-full box-border"
          dragMode={dragMode}
        />
      </div>
    );
  } else if (documentType === "image") {
    return (
      <div className="flex flex-col h-full w-full box-border">
        <div className="flex items-center justify-between gap-2 mb-2">
          <Button 
            variant={dragMode ? "default" : "outline"} 
            size="sm" 
            onClick={toggleDragMode}
            title={dragMode ? "Switch to selection mode" : "Switch to drag mode"}
          >
            {dragMode ? "Drag Mode" : "Selection Mode"}
          </Button>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" onClick={handleZoomOut}>
              <ZoomOut className="h-4 w-4" />
            </Button>
            <span className="text-sm">{zoom}%</span>
            <Button variant="outline" size="icon" onClick={handleZoomIn}>
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="sm" onClick={handleResetView}>
              <MoveHorizontal className="h-4 w-4 mr-1" />
              Reset View
            </Button>
          </div>
        </div>
        
        <div 
          ref={containerRef}
          className="flex-1 overflow-y-auto overflow-x-hidden relative h-full w-full box-border"
          style={{ 
            cursor: isDragging ? 'grabbing' : (dragMode ? 'grab' : 'default')
          }}
        >
          <div 
            className="relative inline-block"
            style={{ 
              transform: `scale(${zoom / 100})`,
              transformOrigin: 'top left',
              transition: isDragging ? 'none' : 'transform 0.1s ease-out',
              translate: `${position.x}px ${position.y}px`
            }}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
          >
            <img 
              ref={imageRef}
              src={url} 
              alt="Document" 
              className="max-w-none"
              onClick={!dragMode && onPositionClick ? handleImageClick : undefined}
              draggable={false}
            />
            
            {/* Render highlights on top of the image */}
            {highlights.map((highlight) => {
              if (highlight.pageNumber !== 1) return null; // Skip highlights not on page 1 (images only have 1 page)
              
              const [x1, y1, x2, y2] = highlight.boundingBox;
              
              return (
                <div
                  key={highlight.id}
                  className="absolute border-2 pointer-events-none"
                  style={{
                    left: `${x1}%`,
                    top: `${y1}%`,
                    width: `${x2 - x1}%`,
                    height: `${y2 - y1}%`,
                    borderColor: highlight.color || '#3b82f6',
                    backgroundColor: 'rgba(59, 130, 246, 0.1)'
                  }}
                />
              );
            })}
          </div>
        </div>
      </div>
    );
  } else {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        Unsupported document type
      </div>
    );
  }
}
</file>

<file path="components/theme-provider.tsx">
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="uploads/0a64da20-2faa-4590-bb76-479f6f31aa38/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/0a64da20-2faa-4590-bb76-479f6f31aa38/extraction_prompt.txt">
NAME AND EMAIL
</file>

<file path="uploads/0ce1682e-1665-4e0c-8e24-9d97db665aea/extracted_data.json">
{"data":{"DUE AMOUNT":{"value":"US$ 6,942","confidence":0.95},"PROJECT":{"value":"BEST PROJECT","confidence":0.95},"INVOICE ID":{"value":"#1234ABC","confidence":0.95},"DUE DATE":{"value":"21 SEP,99","confidence":0.95},"BILLED TO":{"value":"GREAT BUSINESS","confidence":0.95},"BILLING DATE":{"value":"30 AUG 99","confidence":0.95},"table":[{"NO":{"value":"01","confidence":0.95},"DESCRIPTION":{"value":"Defining the information architecture","confidence":0.95},"HOURS":{"value":"40","confidence":0.95},"RATE":{"value":"$30","confidence":0.95},"AMOUNT":{"value":"$1689","confidence":0.95}},{"NO":{"value":"02","confidence":0.95},"DESCRIPTION":{"value":"Wireframing","confidence":0.95},"HOURS":{"value":"30","confidence":0.95},"RATE":{"value":"$30","confidence":0.95},"AMOUNT":{"value":"$1500","confidence":0.95}},{"NO":{"value":"03","confidence":0.95},"DESCRIPTION":{"value":"Low high fidelity mockups","confidence":0.95},"HOURS":{"value":"70","confidence":0.95},"RATE":{"value":"$30","confidence":0.95},"AMOUNT":{"value":"$1000","confidence":0.95}},{"NO":{"value":"04","confidence":0.95},"DESCRIPTION":{"value":"FInal Polishing and asset creation","confidence":0.95},"HOURS":{"value":"35","confidence":0.95},"RATE":{"value":"$30","confidence":0.95},"AMOUNT":{"value":"$2000","confidence":0.95}}],"TOTAL DUE":{"value":"$9000","confidence":0.95}},"metadata":{"timestamp":"2025-03-25T18:15:05.397Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":5097,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/0ce1682e-1665-4e0c-8e24-9d97db665aea/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/0e90fd77-12f9-4c7e-bcd6-8e86c8afa08a/extraction_prompt.txt">
extract all data
</file>

<file path="uploads/21c9effe-5542-4f81-9335-2d402842ea32/extracted_data.json">
{"data":{"name":{"value":"ASHLEY KIRK","confidence":0.9,"position":{"page_number":1,"bounding_box":[69.1,20.7,77.2,22.3]}},"line_items":[{"value":"849756 - 12PK OF TABLECLOTHS","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,30.5,42.8,32.1]}},{"value":"161718 - ROLL OF GIFT WRAP PAPER","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,33.1,45.9,34.7]}},{"value":"475839 - CASE OF VACUUM FILTERS","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,35.7,45.4,37.3]}},{"value":"573849 - 24PK OF SCRUB BRUSHES","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,38.3,44.9,39.9]}},{"value":"234567 - BOX OF CLEANING SUPPLIES","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,40.9,47.2,42.5]}},{"value":"123456 - BOX OF SANITIZER WIPES","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.8,43.5,46.4,45.1]}}],"invoice_id":{"value":"E312-YF-315","confidence":0.95,"position":{"page_number":1,"bounding_box":[5.8,7.8,31.5,11.1]}},"asn_number":{"value":"6648416036","confidence":0.9,"position":{"page_number":1,"bounding_box":[19.8,18.9,32.2,20.5]}}},"metadata":{"timestamp":"2025-03-25T03:50:48.835Z","model":"gemini-2.0-flash","prompt":"extract name, line items, invoice id, and asn number \n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":5671}}
</file>

<file path="uploads/21c9effe-5542-4f81-9335-2d402842ea32/extraction_prompt.txt">
extract name, line items, invoice id, and asn number
</file>

<file path="uploads/2de96053-34a9-47d9-a7cf-830b180d6add/extracted_data.json">
{"data":{"Route":{"value":"E384-YF-654","confidence":0.98},"Delivery Date":{"value":"02/13/2025","confidence":0.95},"Shipment Id":{"value":"O92756826351","confidence":0.95},"Address":{"value":"19251 Richardson Pike, Shanefort, AL 05560","confidence":0.95},"ASN NUMBER":{"value":"6018993627","confidence":0.95},"DOCK":{"value":"D2","confidence":0.95},"Pallet#":{"value":"5","confidence":0.95},"Load":{"value":"2","confidence":0.95},"Salesman":{"value":"MELISSA STEWART","confidence":0.95},"table":[{"Product":{"value":"123456 BOX OF SANITIZER WIPES","confidence":0.9},"Cases":{"value":"13","confidence":0.9},"Sales Units":{"value":"312","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.9},"Cases":{"value":"30","confidence":0.9},"Sales Units":{"value":"240","confidence":0.9},"Layers":{"value":"2","confidence":0.9}},{"Product":{"value":"567890 - ROLL OF PAPER TOWELS","confidence":0.9},"Cases":{"value":"22","confidence":0.9},"Sales Units":{"value":"704","confidence":0.9},"Layers":{"value":"4","confidence":0.9}},{"Product":{"value":"849756-12PK OF TABLECLOTHS","confidence":0.9},"Cases":{"value":"29","confidence":0.9},"Sales Units":{"value":"696","confidence":0.9},"Layers":{"value":"4","confidence":0.9}},{"Product":{"value":"PALLET TOTAL:","confidence":0.9},"Cases":{"value":"94","confidence":0.9},"Sales Units":{"value":"1952","confidence":0.9},"Layers":{"value":"13","confidence":0.9}}]},"metadata":{"timestamp":"2025-03-25T04:41:22.929Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":5095,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/2de96053-34a9-47d9-a7cf-830b180d6add/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/3a99e354-013b-46a1-8833-ca9bf029cbfc/extracted_data.json">
{"data":{"total_due":{"value":"$9000","confidence":0.95},"due_date":{"value":"21 SEP,99","confidence":0.95},"name":{"value":"BEST BUSINESS","confidence":0.9}},"metadata":{"timestamp":"2025-03-25T04:53:51.135Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: extract total due and due date and name\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":2536,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0}}}
</file>

<file path="uploads/3a99e354-013b-46a1-8833-ca9bf029cbfc/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0
}
</file>

<file path="uploads/3a99e354-013b-46a1-8833-ca9bf029cbfc/extraction_prompt.txt">
extract total due and due date and name
</file>

<file path="uploads/3b7b19bd-64cc-48ed-a3b0-8c97238c1e65/extracted_data.json">
{"data":{"email":{"value":"jbrooks@email.site.com","confidence":0.9},"number":{"value":"(555) 555-0145","confidence":0.9},"total amount":{"value":"$9000","confidence":0.9}},"metadata":{"timestamp":"2025-03-25T18:24:18.270Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: email, number, total amount\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":2186,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/3b7b19bd-64cc-48ed-a3b0-8c97238c1e65/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/3b7b19bd-64cc-48ed-a3b0-8c97238c1e65/extraction_prompt.txt">
email, number, total amount
</file>

<file path="uploads/40bbdc4e-9b2d-4fb8-911f-372763cc79b3/extracted_data.json">
{"data":{"asn_number":{"value":"3081346582","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.8,21.1,34.2,23]}},"dock_number":{"value":"D92","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.8,23.3,22,25.2]}},"name":{"value":"TANYA BROOKS","confidence":0.95,"position":{"page_number":1,"bounding_box":[62.3,21.1,74.2,23]}},"invoice_id":{"value":"067747739560","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.8,16.5,34.2,18.4]}}},"metadata":{"timestamp":"2025-03-25T03:52:39.115Z","model":"gemini-2.0-flash","prompt":"asn number, dock number, name. invoice id. \n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":3470}}
</file>

<file path="uploads/40bbdc4e-9b2d-4fb8-911f-372763cc79b3/extraction_prompt.txt">
asn number, dock number, name. invoice id.
</file>

<file path="uploads/448745a8-052c-4ad4-854e-265806b77072/extraction_prompt.txt">
name and line items
</file>

<file path="uploads/56308e6d-2cea-49eb-982c-7c8d774f70a5/extracted_data.json">
{"data":{"name":{"value":"ALEXANDER HOLLAND","confidence":0.9},"line_items":[{"Product":{"value":"345678 CASE OF GLOVES","confidence":0.9},"Cases":{"value":"6","confidence":0.9},"Sales Units":{"value":"12","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"161718-ROLL OF GIFT WRAP PAPER","confidence":0.9},"Cases":{"value":"8","confidence":0.9},"Sales Units":{"value":"256","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"234567 - BOX OF CLEANING SUPPLIES","confidence":0.9},"Cases":{"value":"4","confidence":0.9},"Sales Units":{"value":"128","confidence":0.9},"Layers":{"value":"2","confidence":0.9}},{"Product":{"value":"475839 - CASE OF VACUUM FILTERS","confidence":0.9},"Cases":{"value":"29","confidence":0.9},"Sales Units":{"value":"928","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.9},"Cases":{"value":"15","confidence":0.9},"Sales Units":{"value":"360","confidence":0.9},"Layers":{"value":"3","confidence":0.9}}]},"metadata":{"timestamp":"2025-03-25T04:47:49.256Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: name and line items\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":4218,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0}}}
</file>

<file path="uploads/56308e6d-2cea-49eb-982c-7c8d774f70a5/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0
}
</file>

<file path="uploads/56308e6d-2cea-49eb-982c-7c8d774f70a5/extraction_prompt.txt">
name and line items
</file>

<file path="uploads/62665548-fb31-4813-a580-559ceca8cb27/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/62665548-fb31-4813-a580-559ceca8cb27/extraction_prompt.txt">
total amount due and items
</file>

<file path="uploads/67db6027-720e-42d0-9a63-28d2cc967e13/extracted_data.json">
{"invoice_number":{"value":null,"confidence":0},"date":{"value":"02/13/2025","confidence":0.95},"due_date":{"value":null,"confidence":0},"total_amount":{"value":null,"confidence":0},"vendor":{"value":null,"confidence":0},"items":[{"description":{"value":"123456 BOX OF SANITIZER WIPES","confidence":0.95},"quantity":{"value":13,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"312","confidence":0.95}},{"description":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.95},"quantity":{"value":30,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"240","confidence":0.95}},{"description":{"value":"567890 - ROLL OF PAPER TOWELS","confidence":0.95},"quantity":{"value":22,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"704","confidence":0.95}},{"description":{"value":"849756-12PK OF TABLECLOTHS","confidence":0.95},"quantity":{"value":29,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"696","confidence":0.95}}]}
</file>

<file path="uploads/67db6027-720e-42d0-9a63-28d2cc967e13/extraction_prompt.txt">
get name
</file>

<file path="uploads/6a918084-f0e1-4815-a8e0-cc83173c519a/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/6a918084-f0e1-4815-a8e0-cc83173c519a/extraction_prompt.txt">
name, email, total
</file>

<file path="uploads/76a0ed88-e500-4400-a818-7b6bd1eda244/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/76a0ed88-e500-4400-a818-7b6bd1eda244/extraction_prompt.txt">
total and items
</file>

<file path="uploads/7994430d-4209-4daa-a0a3-6d011499d469/extracted_data.json">
{"data":{"name":{"value":"Mary Smith","confidence":0.98,"position":{"page_number":1,"bounding_box":[18.16,14.26,36.16,21.06]}},"title":{"value":"General Manager","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.16,22.13,40,26.06]}},"phone":{"value":"(323) 302-9912","confidence":0.98,"position":{"page_number":1,"bounding_box":[18.16,30.33,39,34.26]}},"address":{"value":"1676 Kemberly Drive, Chicago, IL","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.16,37.93,56,41.86]}},"website":{"value":"a.barnescopy.site.com","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.16,45.53,52.83,49.46]}},"email":{"value":"info@barnescopy.site.com","confidence":0.95,"position":{"page_number":1,"bounding_box":[18.16,53.13,56.66,57.06]}},"company":{"value":"Bronze Anvil","confidence":0.98,"position":{"page_number":1,"bounding_box":[64.83,22.93,83.33,26.86]}}},"metadata":{"timestamp":"2025-03-25T01:36:41.006Z","model":"gemini-2.0-flash","prompt":"extract all info \n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":12431}}
</file>

<file path="uploads/7994430d-4209-4daa-a0a3-6d011499d469/extraction_prompt.txt">
extract all info
</file>

<file path="uploads/7d200ed1-ab55-420e-9a5c-06ba1b4bbab4/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/7d200ed1-ab55-420e-9a5c-06ba1b4bbab4/extraction_prompt.txt">
name and email
</file>

<file path="uploads/87b1f296-7e3c-47f8-9205-19811fbdb63b/extracted_data.json">
{"data":{"Route":{"value":"E322-YF-431","confidence":1},"Delivery Date":{"value":"01/23/2025","confidence":1},"Pallet#":{"value":"41","confidence":1},"Load":{"value":"5","confidence":1},"Shipment Id":{"value":"023027714567","confidence":1},"Address":{"value":"77453 Baker Flat, Jamesfurt, CT 23976","confidence":1},"ASN NUMBER":{"value":"1037299860","confidence":1},"DOCK":{"value":"D27","confidence":1},"Salesman":{"value":"DANIEL NEAL","confidence":1},"table":[{"Product":{"value":"475839 CASE OF VACUUM FILTERS","confidence":1},"Cases":{"value":"12","confidence":1},"Sales Units":{"value":"48","confidence":1},"Layers":{"value":"4","confidence":1}},{"Product":{"value":"849756-12PK OF TABLECLOTHS","confidence":1},"Cases":{"value":"20","confidence":1},"Sales Units":{"value":"160","confidence":1},"Layers":{"value":"2","confidence":1}},{"Product":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":1},"Cases":{"value":"8","confidence":1},"Sales Units":{"value":"96","confidence":1},"Layers":{"value":"4","confidence":1}},{"Product":{"value":"947365-6PK OF POLISHERS","confidence":1},"Cases":{"value":"8","confidence":1},"Sales Units":{"value":"256","confidence":1},"Layers":{"value":"1","confidence":1}},{"Product":{"value":"345678 - CASE OF GLOVES","confidence":1},"Cases":{"value":"17","confidence":1},"Sales Units":{"value":"34","confidence":1},"Layers":{"value":"2","confidence":1}},{"Product":{"value":"PALLET TOTAL:","confidence":1},"Cases":{"value":"65","confidence":1},"Sales Units":{"value":"594","confidence":1},"Layers":{"value":"13","confidence":1}}]},"metadata":{"timestamp":"2025-03-25T04:35:06.704Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        4. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        5. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":6051,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/87b1f296-7e3c-47f8-9205-19811fbdb63b/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/8eff47ea-39fa-4574-8ccb-037c2e31b9fb/extracted_data.json">
{"data":{"Route":{"value":"E895-YF-572","confidence":0.99},"Delivery Date":{"value":"02/01/2025","confidence":0.99},"Pallet#":{"value":"12","confidence":0.99},"Load":{"value":"4","confidence":0.99},"Salesman":{"value":"STACY JOHNSON","confidence":0.99},"table":{"value":[{"Product":"475839 - CASE OF VACUUM FILTERS","Cases":"17","Sales Units":"68","Layers":"3"},{"Product":"161718-ROLL OF GIFT WRAP PAPER","Cases":"16","Sales Units":"32","Layers":"4"},{"Product":"567890 - ROLL OF PAPER TOWELS","Cases":"21","Sales Units":"168","Layers":"1"},{"Product":"789012 - PACK OF DUST MASKS","Cases":"32","Sales Units":"1024","Layers":"4"},{"Product":"947365-6PK OF POLISHERS","Cases":"15","Sales Units":"360","Layers":"1"}],"confidence":0.99},"PALLET TOTAL Cases":{"value":"101","confidence":0.99},"PALLET TOTAL Sales Units":{"value":"1652","confidence":0.99},"PALLET TOTAL Layers":{"value":"13","confidence":0.99}},"metadata":{"timestamp":"2025-03-25T04:28:43.303Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        4. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        5. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Each line item should be a complete object with all its properties\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":3916,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/8eff47ea-39fa-4574-8ccb-037c2e31b9fb/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/984a0fa7-0667-46ac-ab0e-28c8eaf44dae/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/984a0fa7-0667-46ac-ab0e-28c8eaf44dae/extraction_prompt.txt">
name and email and items
</file>

<file path="uploads/a3893be6-be57-4e5b-9a29-22a9c3dcae39/extracted_data.json">
{"invoice_number":{"value":null,"confidence":0},"date":{"value":"02/09/2025","confidence":0.95},"due_date":{"value":null,"confidence":0},"total_amount":{"value":null,"confidence":0},"vendor":{"value":null,"confidence":0},"items":[{"description":{"value":"345678 CASE OF GLOVES","confidence":0.95},"quantity":{"value":20,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"160","confidence":0.95}},{"description":{"value":"123456 - BOX OF SANITIZER WIPES","confidence":0.95},"quantity":{"value":11,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"88","confidence":0.95}},{"description":{"value":"161718-ROLL OF GIFT WRAP PAPER","confidence":0.95},"quantity":{"value":8,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"32","confidence":0.95}},{"description":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.95},"quantity":{"value":20,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"160","confidence":0.95}},{"description":{"value":"475839 CASE OF VACUUM FILTERS","confidence":0.95},"quantity":{"value":27,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"648","confidence":0.95}},{"description":{"value":"849756-12PK OF TABLECLOTHS","confidence":0.95},"quantity":{"value":26,"confidence":0.95},"unit_price":{"value":null,"confidence":0},"amount":{"value":"832","confidence":0.95}}]}
</file>

<file path="uploads/a3893be6-be57-4e5b-9a29-22a9c3dcae39/extraction_prompt.txt">
date
</file>

<file path="uploads/a3f4dc14-42ff-462e-9579-5db0daaf4fe1/extracted_data.json">
{"data":{"name":{"value":"Michael Brown","confidence":0.98},"email":{"value":"jbrooks@email.site.com","confidence":0.95}},"metadata":{"timestamp":"2025-03-26T01:45:32.410Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: name and email\n\nIMPORTANT INSTRUCTIONS:\n1. You MUST return ONLY valid JSON. No text explanations.\n2. For each field requested, use the following format:\n{\n  \"field_name\": {\n    \"value\": \"extracted value\",\n    \"confidence\": 0.95\n  }\n}\n3. Example: If asked for \"name and email\", respond with:\n{\n  \"name\": {\n    \"value\": \"John Smith\",\n    \"confidence\": 0.95\n  },\n  \"email\": {\n    \"value\": \"john@example.com\",\n    \"confidence\": 0.9\n  }\n}\n\nPlease extract the following fields from the document and return them as JSON:\nname and email","processingTimeMs":1829,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/a3f4dc14-42ff-462e-9579-5db0daaf4fe1/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/a3f4dc14-42ff-462e-9579-5db0daaf4fe1/extraction_prompt.txt">
name and email
</file>

<file path="uploads/a484ced0-906a-44a5-ba33-eafd61c9f27f/extracted_data.json">
{"data":{"dock_number":{"value":"D81","confidence":0.98,"position":{"page_number":1,"bounding_box":[19.2,22.8,22.1,24.1]}},"asn":{"value":"6800171662","confidence":0.98,"position":{"page_number":1,"bounding_box":[19.2,20.4,28.9,21.7]}},"pallet_number":{"value":"23","confidence":0.97,"position":{"page_number":1,"bounding_box":[59.9,9.9,62.5,11.2]}},"name":{"value":"SARAH PARKER","confidence":0.95,"position":{"page_number":1,"bounding_box":[59.9,22.8,68.4,24.1]}}},"metadata":{"timestamp":"2025-03-25T03:55:43.230Z","model":"gemini-2.0-flash","prompt":"dock number, asn, pallet number, name \n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":2631}}
</file>

<file path="uploads/a484ced0-906a-44a5-ba33-eafd61c9f27f/extraction_prompt.txt">
dock number, asn, pallet number, name
</file>

<file path="uploads/a9e5a2cc-139e-4b51-8af1-1eb9dea456e4/extracted_data.json">
{"invoice_number":{"value":null,"confidence":0},"date":{"value":"02/13/2025","confidence":0.9},"due_date":{"value":null,"confidence":0},"total_amount":{"value":null,"confidence":0},"vendor":{"value":null,"confidence":0},"items":[{"description":{"value":"123456 BOX OF SANITIZER WIPES","confidence":0.9},"quantity":{"value":13,"confidence":0.9},"unit_price":{"value":"312","confidence":0.9},"amount":{"value":null,"confidence":0}},{"description":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.9},"quantity":{"value":30,"confidence":0.9},"unit_price":{"value":"240","confidence":0.9},"amount":{"value":null,"confidence":0}},{"description":{"value":"567890 - ROLL OF PAPER TOWELS","confidence":0.9},"quantity":{"value":22,"confidence":0.9},"unit_price":{"value":"704","confidence":0.9},"amount":{"value":null,"confidence":0}},{"description":{"value":"849756-12PK OF TABLECLOTHS","confidence":0.9},"quantity":{"value":29,"confidence":0.9},"unit_price":{"value":"696","confidence":0.9},"amount":{"value":null,"confidence":0}}]}
</file>

<file path="uploads/a9e5a2cc-139e-4b51-8af1-1eb9dea456e4/extraction_prompt.txt">
get all data in the document
</file>

<file path="uploads/af8fbc9c-c60d-483b-bd52-8c990e41e619/extracted_data.json">
{"data":{"Route":{"value":"E367-YF-725","confidence":0.98,"position":{"page_number":1,"bounding_box":[7.8,7,31.5,11]}},"Delivery Date":{"value":"02/21/2025","confidence":0.95,"position":{"page_number":1,"bounding_box":[7.8,13.4,23.9,15.3]}},"Pallet#":{"value":"27","confidence":0.96,"position":{"page_number":1,"bounding_box":[58.9,10.9,63.2,12.8]}},"Load":{"value":"1","confidence":0.97,"position":{"page_number":1,"bounding_box":[58.9,13.4,61.5,15.3]}},"Salesman":{"value":"LISA SWANSON","confidence":0.98,"position":{"page_number":1,"bounding_box":[58.9,19.3,74.4,21.2]}},"line_items":[{"Product":{"value":"567890- ROLL OF PAPER TOWELS","confidence":0.97,"position":{"page_number":1,"bounding_box":[7.8,29.6,30.9,31.5]}},"Cases":{"value":"7","confidence":0.98,"position":{"page_number":1,"bounding_box":[52.8,29.6,54.2,31.5]}},"Sales Units":{"value":"168","confidence":0.98,"position":{"page_number":1,"bounding_box":[63.2,29.6,66.1,31.5]}},"Layers":{"value":"2","confidence":0.98,"position":{"page_number":1,"bounding_box":[73.6,29.6,74.9,31.5]}}},{"Product":{"value":"475839 CASE OF VACUUM FILTERS","confidence":0.97,"position":{"page_number":1,"bounding_box":[7.8,32.5,31.5,34.4]}},"Cases":{"value":"10","confidence":0.98,"position":{"page_number":1,"bounding_box":[52.8,32.5,54.8,34.4]}},"Sales Units":{"value":"40","confidence":0.98,"position":{"page_number":1,"bounding_box":[63.2,32.5,65.1,34.4]}},"Layers":{"value":"4","confidence":0.98,"position":{"page_number":1,"bounding_box":[73.6,32.5,74.9,34.4]}}},{"Product":{"value":"161718-ROLL OF GIFT WRAP PAPER","confidence":0.97,"position":{"page_number":1,"bounding_box":[7.8,35.4,33.1,37.3]}},"Cases":{"value":"30","confidence":0.98,"position":{"page_number":1,"bounding_box":[52.8,35.4,55.1,37.3]}},"Sales Units":{"value":"360","confidence":0.98,"position":{"page_number":1,"bounding_box":[63.2,35.4,66.1,37.3]}},"Layers":{"value":"4","confidence":0.98,"position":{"page_number":1,"bounding_box":[73.6,35.4,74.9,37.3]}}},{"Product":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.97,"position":{"page_number":1,"bounding_box":[7.8,38.3,33.1,40.2]}},"Cases":{"value":"32","confidence":0.98,"position":{"page_number":1,"bounding_box":[52.8,38.3,55.1,40.2]}},"Sales Units":{"value":"384","confidence":0.98,"position":{"page_number":1,"bounding_box":[63.2,38.3,66.1,40.2]}},"Layers":{"value":"3","confidence":0.98,"position":{"page_number":1,"bounding_box":[73.6,38.3,74.9,40.2]}}}]},"metadata":{"timestamp":"2025-03-25T04:14:20.357Z","model":"gemini-2.0-flash","prompt":"name and all line items\n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":9289}}
</file>

<file path="uploads/af8fbc9c-c60d-483b-bd52-8c990e41e619/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/af8fbc9c-c60d-483b-bd52-8c990e41e619/extraction_prompt.txt">
name and all line items
</file>

<file path="uploads/b0593773-04fd-475e-abf3-6f52f09f8503/extracted_data.json">
{"data":{"route":{"value":"E550-YF-919","confidence":0.99},"delivery_date":{"value":"01/28/2025","confidence":0.99},"pallet_number":{"value":"23","confidence":0.99},"load_number":{"value":"5","confidence":0.99},"shipment_id":{"value":"085575549951","confidence":0.99},"address":{"value":"19406 Karla Forge, Hayesfort, PA 51685","confidence":0.99},"asn_number":{"value":"6800171662","confidence":0.99},"dock":{"value":"D81","confidence":0.99},"salesman":{"value":"SARAH PARKER","confidence":0.99},"line_items":[{"product":{"value":"84975612PK OF TABLECLOTHS","confidence":0.95},"cases":{"value":"8","confidence":0.99},"sales_units":{"value":"64","confidence":0.99},"layers":{"value":"1","confidence":0.99}},{"product":{"value":"234567 - BOX OF CLEANING SUPPLIES","confidence":0.95},"cases":{"value":"5","confidence":0.99},"sales_units":{"value":"10","confidence":0.99},"layers":{"value":"3","confidence":0.99}},{"product":{"value":"947365-6PK OF POLISHERS","confidence":0.95},"cases":{"value":"11","confidence":0.99},"sales_units":{"value":"44","confidence":0.99},"layers":{"value":"1","confidence":0.99}},{"product":{"value":"123456 - BOX OF SANITIZER WIPES","confidence":0.95},"cases":{"value":"31","confidence":0.99},"sales_units":{"value":"744","confidence":0.99},"layers":{"value":"3","confidence":0.99}}],"pallet_total_cases":{"value":"55","confidence":0.99},"pallet_total_sales_units":{"value":"862","confidence":0.99},"pallet_total_layers":{"value":"8","confidence":0.99}},"metadata":{"timestamp":"2025-03-25T04:22:31.077Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        4. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        5. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Each line item should be a complete object with all its properties\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":5550,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/b0593773-04fd-475e-abf3-6f52f09f8503/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/b7e6648d-a73c-4d0d-8537-8896577addb7/extracted_data.json">
{"data":{"asn":{"value":"6018993627","confidence":0.95,"position":{"page_number":1,"bounding_box":[19.3,22.6,39.1,24.1]}},"doc":{"value":"E384-YF-654","confidence":0.98,"position":{"page_number":1,"bounding_box":[7.9,10.8,40.2,14.1]}},"pallet":{"value":"5","confidence":0.97,"position":{"page_number":1,"bounding_box":[56.8,10.8,61.6,12.3]}},"shipment id":{"value":"O92756826351","confidence":0.96,"position":{"page_number":1,"bounding_box":[19.3,17.3,42.2,18.8]}}},"metadata":{"timestamp":"2025-03-25T03:54:50.412Z","model":"gemini-2.0-flash","prompt":"asn, doc, pallet, shipment id\n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":3266}}
</file>

<file path="uploads/b7e6648d-a73c-4d0d-8537-8896577addb7/extraction_prompt.txt">
asn, doc, pallet, shipment id
</file>

<file path="uploads/b893e9a0-c2eb-4290-b650-ab41e4869e7e/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/b893e9a0-c2eb-4290-b650-ab41e4869e7e/extraction_prompt.txt">
extract all data
</file>

<file path="uploads/bffa53a3-0d63-4cf7-bc27-7a26089603e6/extracted_data.json">
{"data":{"name":{"value":"ADAM HERNANDEZ","confidence":0.9},"line_items":[{"Product":{"value":"475839 - CASE OF VACUUM FILTERS","confidence":0.9},"Cases":{"value":"4","confidence":0.9},"Sales Units":{"value":"96","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"123456 BOX OF SANITIZER WIPES","confidence":0.9},"Cases":{"value":"9","confidence":0.9},"Sales Units":{"value":"72","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"573849-24PK OF SCRUB BRUSHES","confidence":0.9},"Cases":{"value":"17","confidence":0.9},"Sales Units":{"value":"136","confidence":0.9},"Layers":{"value":"4","confidence":0.9}},{"Product":{"value":"161718-ROLL OF GIFT WRAP PAPER","confidence":0.9},"Cases":{"value":"6","confidence":0.9},"Sales Units":{"value":"72","confidence":0.9},"Layers":{"value":"3","confidence":0.9}},{"Product":{"value":"345678 - CASE OF GLOVES","confidence":0.9},"Cases":{"value":"17","confidence":0.9},"Sales Units":{"value":"34","confidence":0.9},"Layers":{"value":"2","confidence":0.9}}]},"metadata":{"timestamp":"2025-03-25T04:44:40.562Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: name and line items\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          \n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\"\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":4645,"options":{"includeConfidence":false,"includePositions":false,"detectDocumentType":true,"temperature":0}}}
</file>

<file path="uploads/bffa53a3-0d63-4cf7-bc27-7a26089603e6/extraction_options.json">
{
  "includeConfidence": false,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0
}
</file>

<file path="uploads/bffa53a3-0d63-4cf7-bc27-7a26089603e6/extraction_prompt.txt">
name and line items
</file>

<file path="uploads/c44dc871-86ef-4a4c-832e-9a66c4e1ae43/extracted_data.json">
{"data":{"route":{"value":"E550-YF-919","confidence":0.95,"position":{"page_number":1,"bounding_box":[5.8,5.9,30.1,9.1]}},"invoice_number":{"value":"085575549951","confidence":0.9,"position":{"page_number":1,"bounding_box":[14.8,15.2,33.5,16.8]}},"salesman":{"value":"SARAH PARKER","confidence":0.9,"position":{"page_number":1,"bounding_box":[60,19.6,75.9,21.2]}}},"metadata":{"timestamp":"2025-03-25T03:23:43.006Z","model":"gemini-2.0-flash","prompt":"name and inovoice number\n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document as:\n          - page_number: The page where the information appears (1-indexed)\n          - bounding_box: [x1, y1, x2, y2] coordinates as percentages of page dimensions\n            where (x1,y1) is the top-left corner and (x2,y2) is the bottom-right corner\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"position\": {\n              \"page_number\": 1,\n              \"bounding_box\": [10.5, 20.3, 30.2, 25.1]\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [15.2, 35.7, 45.3, 40.1]\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [12.3, 50.6, 42.8, 55.2]\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"position\": {\n                \"page_number\": 1,\n                \"bounding_box\": [22.7, 60.1, 52.9, 65.4]\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":2664}}
</file>

<file path="uploads/c44dc871-86ef-4a4c-832e-9a66c4e1ae43/extraction_prompt.txt">
name and inovoice number
</file>

<file path="uploads/cbb422de-bfb0-4088-bab5-58bc532762ec/extracted_data.json">
{"data":{"Mary Smith":{"value":"Mary Smith","confidence":0.99},"General Manager":{"value":"General Manager","confidence":0.98},"(323) 302-9912":{"value":"(323) 302-9912","confidence":0.98},"1676 Kemberly Drive, Chicago, IL":{"value":"1676 Kemberly Drive, Chicago, IL","confidence":0.98},"a.barnescopy.site.com":{"value":"a.barnescopy.site.com","confidence":0.98},"info@barnescopy.site.com":{"value":"info@barnescopy.site.com","confidence":0.98},"Bronze Anvil":{"value":"Bronze Anvil","confidence":0.98}},"metadata":{"timestamp":"2025-03-25T18:17:15.243Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: all data\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":11271,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/cbb422de-bfb0-4088-bab5-58bc532762ec/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/cbb422de-bfb0-4088-bab5-58bc532762ec/extraction_prompt.txt">
all data
</file>

<file path="uploads/cbbdac4d-67d6-441a-8377-f460c675d08a/extracted_data.json">
{"name":{"value":"Walmart","confidence":0.98},"line_items":[{"item":{"value":"BOYS CREW","confidence":0.98},"price":{"value":"9.48","confidence":0.98}},{"item":{"value":"BOYS SOCKS","confidence":0.98},"price":{"value":"6.97","confidence":0.98}},{"item":{"value":"BOXER BRIEF","confidence":0.98},"price":{"value":"10.98","confidence":0.98}}],"total":{"value":"29.73","confidence":0.98},"contact_info":{"value":"702 839 3620","confidence":0.9}}
</file>

<file path="uploads/cbbdac4d-67d6-441a-8377-f460c675d08a/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/cbbdac4d-67d6-441a-8377-f460c675d08a/extraction_prompt.txt">
get name, line items, total and any contact info
</file>

<file path="uploads/cd58c189-5a22-463b-99cd-72348a105c96/extracted_data.json">
{"data":{"sender":{"value":"BRIAN JONES","confidence":0.95},"recipient":{"value":null,"confidence":0},"invoice_number":{"value":null,"confidence":0},"date":{"value":"01/28/2025","confidence":0.95},"total_amount":{"value":null,"confidence":0},"shipping_address":{"value":"99962 Allison Ford, Port Cassieview, CA 45506","confidence":0.95},"order_number":{"value":null,"confidence":0}},"metadata":{"timestamp":"2025-03-25T04:27:24.052Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: Extract only the name of the sender and recipient from this email\r\n- Extract just the invoice number, date, and total amount\r\n- Extract only the shipping address and order number from this receipt\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        4. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        5. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Each line item should be a complete object with all its properties\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":2480,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0}}}
</file>

<file path="uploads/cd58c189-5a22-463b-99cd-72348a105c96/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0
}
</file>

<file path="uploads/cd58c189-5a22-463b-99cd-72348a105c96/extraction_prompt.txt">
Extract only the name of the sender and recipient from this email
- Extract just the invoice number, date, and total amount
- Extract only the shipping address and order number from this receipt
</file>

<file path="uploads/cf538dfc-ef82-4c5e-9dce-4f38b2c8cb6b/extracted_data.json">
{"data":{"date":{"value":"01/28/2025","confidence":0.98,"location":{"page":1,"coordinates":{"x":83,"y":117,"width":100,"height":10}}}},"metadata":{"timestamp":"2025-03-12T03:43:25.485Z","model":"gemini-2.0-flash","prompt":"date\n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document (page number, coordinates)\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"location\": {\n              \"page\": 1,\n              \"coordinates\": {\n                \"x\": 100,\n                \"y\": 200,\n                \"width\": 300,\n                \"height\": 50\n              }\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"location\": {\n                \"page\": 1\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"location\": {\n                \"page\": 1\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"location\": {\n                \"page\": 1\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":2472}}
</file>

<file path="uploads/cf538dfc-ef82-4c5e-9dce-4f38b2c8cb6b/extraction_prompt.txt">
date
</file>

<file path="uploads/d7287f0f-1641-419b-8947-495c50b50d56/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/d7287f0f-1641-419b-8947-495c50b50d56/extraction_prompt.txt">
name, email. address, total amount
</file>

<file path="uploads/d7f66a68-5fb9-4f0b-989c-fa49da58e002/extracted_data.json">
{"data":{"TOTAL":{"value":"29.73","confidence":0.98}},"metadata":{"timestamp":"2025-03-25T17:16:10.507Z","model":"gemini-2.0-flash","prompt":"USER'S REQUEST: extract all data\n        \n        IMPORTANT INSTRUCTIONS:\n        1. Extract ONLY the data explicitly requested in the user's prompt above.\n        2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.\n        3. STRICT ENFORCEMENT: If the user requests specific fields like \"sender\" or \"invoice_number\", \n           extract ONLY those fields and nothing else. DO NOT extract additional fields like \"route\" \n           or \"delivery date\" unless they were explicitly requested.\n           \n           IMPORTANT: A request to extract \"name of sender\" should ONLY result in a \"sender\" field.\n           IMPORTANT: A request to extract \"invoice details\" should NOT extract unrelated fields like \"salesperson\".\n           \n        4. For each extracted field, include:\n          - The field value\n          - A confidence score between 0 and 1\n          \n        \n        5. If a requested field is not found in the document, include it with a null value and low confidence score.\n        \n        6. For line items or tabular data (if specifically requested in the prompt):\n          - Extract these as structured arrays of objects\n          - Ensure each line item is a complete object with all its properties\n          - DO NOT use objects with [object Object] notation\n          - Use proper array syntax with each item as a discrete object with key-value pairs\n          - ALWAYS structure tabular data as an array where each row is an object with named fields\n          - Example for table data:\n            \"table\": [\n              { \"column1\": { \"value\": \"row1value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row1value2\", \"confidence\": 0.95 } },\n              { \"column1\": { \"value\": \"row2value1\", \"confidence\": 0.9 }, \"column2\": { \"value\": \"row2value2\", \"confidence\": 0.95 } }\n            ]\n          - Maintain proper parent-child relationships\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          }\n        }\n\n        Return ONLY the data in valid JSON format without any markdown code block markers or explanations.\n      ","processingTimeMs":3029,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/d7f66a68-5fb9-4f0b-989c-fa49da58e002/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/d7f66a68-5fb9-4f0b-989c-fa49da58e002/extraction_prompt.txt">
extract all data
</file>

<file path="uploads/f0c01381-717b-490c-85f5-939200c05e19/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path="uploads/f3f7838c-9b88-4e61-a0d8-b1f828bab3bb/extracted_data.json">
{"data":{"Route":{"value":"E332-YF-338","confidence":0.95,"location":{"page":1,"coordinates":{"x":67,"y":49,"width":225,"height":24}}},"Delivery Date":{"value":"01/28/2025","confidence":0.95,"location":{"page":1,"coordinates":{"x":67,"y":99,"width":110,"height":12}}},"Salesman":{"value":"BRIAN JONES","confidence":0.95,"location":{"page":1,"coordinates":{"x":618,"y":197,"width":89,"height":12}}}},"metadata":{"timestamp":"2025-03-12T03:46:49.728Z","model":"gemini-2.0-flash","prompt":"name and date \n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        - The location in the document (page number, coordinates)\n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95,\n            \"location\": {\n              \"page\": 1,\n              \"coordinates\": {\n                \"x\": 100,\n                \"y\": 200,\n                \"width\": 300,\n                \"height\": 50\n              }\n            }\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8,\n              \"location\": {\n                \"page\": 1\n              }\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9,\n              \"location\": {\n                \"page\": 1\n              }\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85,\n              \"location\": {\n                \"page\": 1\n              }\n            }\n          ]\n        }\n      ","processingTimeMs":2884}}
</file>

<file path="uploads/f3f7838c-9b88-4e61-a0d8-b1f828bab3bb/extraction_prompt.txt">
name and date
</file>

<file path="uploads/f6be05e0-e893-45f1-97a7-f13313715e25/extracted_data.json">
{"data":{"Route":{"value":"E550-YF-919","confidence":0.99},"Delivery Date":{"value":"01/28/2025","confidence":0.99},"Pallet#":{"value":"23","confidence":0.99},"Load":{"value":"5","confidence":0.99},"Shipment Id":{"value":"085575549951","confidence":0.99},"Address":{"value":"19406 Karla Forge, Hayesfort, PA 51685","confidence":0.99},"ASN NUMBER":{"value":"6800171662","confidence":0.99},"DOCK":{"value":"D81","confidence":0.99},"Salesman":{"value":"SARAH PARKER","confidence":0.99},"Products":[{"Product":{"value":"849756 - 12PK OF TABLECLOTHS","confidence":0.99},"Cases":{"value":"8","confidence":0.99},"Sales Units":{"value":"64","confidence":0.99},"Layers":{"value":"1","confidence":0.99}},{"Product":{"value":"234567 - BOX OF CLEANING SUPPLIES","confidence":0.99},"Cases":{"value":"5","confidence":0.99},"Sales Units":{"value":"10","confidence":0.99},"Layers":{"value":"3","confidence":0.99}},{"Product":{"value":"947365 - 6PK OF POLISHERS","confidence":0.99},"Cases":{"value":"11","confidence":0.99},"Sales Units":{"value":"44","confidence":0.99},"Layers":{"value":"1","confidence":0.99}},{"Product":{"value":"123456 - BOX OF SANITIZER WIPES","confidence":0.99},"Cases":{"value":"31","confidence":0.99},"Sales Units":{"value":"744","confidence":0.99},"Layers":{"value":"3","confidence":0.99}}],"PALLET TOTAL":{"Cases":{"value":"55","confidence":0.99},"Sales Units":{"value":"862","confidence":0.99},"Layers":{"value":"8","confidence":0.99}}},"metadata":{"timestamp":"2025-03-25T04:17:36.301Z","model":"gemini-2.0-flash","prompt":"Extract all relevant information from this document.\n        Return the data in valid JSON format. For each extracted field, include:\n        - The field value\n        - A confidence score between 0 and 1\n        \n\n        Example format:\n        {\n          \"field_name\": {\n            \"value\": \"extracted value\",\n            \"confidence\": 0.95\n          },\n          \"nested_field\": {\n            \"sub_field\": {\n              \"value\": \"nested value\",\n              \"confidence\": 0.8\n            }\n          },\n          \"array_field\": [\n            {\n              \"value\": \"item 1\",\n              \"confidence\": 0.9\n            },\n            {\n              \"value\": \"item 2\",\n              \"confidence\": 0.85\n            }\n          ]\n        }\n      ","processingTimeMs":5666,"options":{"includeConfidence":true,"includePositions":false,"detectDocumentType":true,"temperature":0.1}}}
</file>

<file path="uploads/f6be05e0-e893-45f1-97a7-f13313715e25/extraction_options.json">
{
  "includeConfidence": true,
  "includePositions": false,
  "detectDocumentType": true,
  "temperature": 0.1
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="LICENSE">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  // your config here
};

module.exports = nextConfig;
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="app/(dashboard)/dashboard/history/page.tsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Filter, Download, Eye, Trash2, Search, Calendar } from "lucide-react";
import Link from "next/link";

// Sample data for document history
const sampleDocuments = [
  {
    id: "doc-123",
    name: "Invoice-2023.pdf",
    type: "Invoice",
    status: "Completed",
    date: "2023-03-15T12:00:00Z",
    extractedData: true
  },
  {
    id: "doc-124",
    name: "Receipt-Feb2023.pdf",
    type: "Receipt",
    status: "Completed",
    date: "2023-02-28T09:30:00Z",
    extractedData: true
  },
  {
    id: "doc-125",
    name: "Contract-2023-Q1.pdf",
    type: "Contract",
    status: "In Progress",
    date: "2023-03-10T14:45:00Z",
    extractedData: false
  }
];

export default function HistoryPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [filterStatus, setFilterStatus] = useState("all");
  
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };
  
  const filteredDocuments = sampleDocuments.filter(doc => {
    // Filter by search term
    const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Filter by document type
    const matchesType = filterType === "all" || doc.type.toLowerCase() === filterType.toLowerCase();
    
    // Filter by status
    const matchesStatus = filterStatus === "all" || doc.status.toLowerCase() === filterStatus.toLowerCase();
    
    return matchesSearch && matchesType && matchesStatus;
  });

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight text-foreground">Document History</h1>
        <p className="text-muted-foreground">
          View and manage your previously processed documents
        </p>
      </div>
      
      <Card className="border-border">
        <CardHeader>
          <CardTitle>Filters</CardTitle>
          <CardDescription>
            Filter documents by type, status, or search by name
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search documents..."
                className="pl-8"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            
            <Select value={filterType} onValueChange={setFilterType}>
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="Document Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="invoice">Invoice</SelectItem>
                <SelectItem value="receipt">Receipt</SelectItem>
                <SelectItem value="contract">Contract</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-full md:w-[200px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="in progress">In Progress</SelectItem>
                <SelectItem value="failed">Failed</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>
      
      <Card className="border-border">
        <CardHeader>
          <CardTitle>Document List</CardTitle>
          <CardDescription>
            {filteredDocuments.length} {filteredDocuments.length === 1 ? "document" : "documents"} found
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <div className="grid grid-cols-6 p-4 bg-muted/50 font-medium text-sm">
              <div className="col-span-2">Document</div>
              <div>Type</div>
              <div>Status</div>
              <div>Date</div>
              <div className="text-right">Actions</div>
            </div>
            
            {filteredDocuments.length > 0 ? (
              filteredDocuments.map((doc) => (
                <div key={doc.id} className="grid grid-cols-6 p-4 border-t items-center">
                  <div className="col-span-2 font-medium">{doc.name}</div>
                  <div>{doc.type}</div>
                  <div>
                    <span className={`inline-flex items-center rounded-full px-2 py-1 text-xs ${
                      doc.status === "Completed" 
                        ? "bg-green-100 text-green-700"
                        : doc.status === "In Progress"
                        ? "bg-blue-100 text-blue-700"
                        : "bg-red-100 text-red-700"
                    }`}>
                      {doc.status}
                    </span>
                  </div>
                  <div className="flex items-center">
                    <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                    {formatDate(doc.date)}
                  </div>
                  <div className="flex justify-end gap-2">
                    <Button variant="ghost" size="icon" asChild>
                      <Link href={`/dashboard/review?id=${doc.id}`}>
                        <Eye className="h-4 w-4" />
                        <span className="sr-only">View</span>
                      </Link>
                    </Button>
                    <Button variant="ghost" size="icon">
                      <Download className="h-4 w-4" />
                      <span className="sr-only">Download</span>
                    </Button>
                    <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive">
                      <Trash2 className="h-4 w-4" />
                      <span className="sr-only">Delete</span>
                    </Button>
                  </div>
                </div>
              ))
            ) : (
              <div className="p-8 text-center text-muted-foreground">
                No documents found matching your criteria.
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="app/(dashboard)/dashboard/metrics/page.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { BarChart3, PieChart, LineChart, Download, Calendar, Clock, File, CheckCircle2, AlertCircle } from "lucide-react";

export default function MetricsPage() {
  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold tracking-tight text-foreground">Performance Metrics</h1>
          <div className="flex items-center gap-2">
            <Select defaultValue="30">
              <SelectTrigger className="w-[150px]">
                <SelectValue placeholder="Time period" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="7">Last 7 days</SelectItem>
                <SelectItem value="30">Last 30 days</SelectItem>
                <SelectItem value="90">Last 90 days</SelectItem>
                <SelectItem value="365">Last year</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="outline" size="icon">
              <Download className="h-4 w-4" />
              <span className="sr-only">Download report</span>
            </Button>
          </div>
        </div>
        <p className="text-muted-foreground">
          Track your document processing performance and efficiency metrics
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Documents Processed</CardTitle>
            <File className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">128</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500">↑ 12%</span> from previous period
            </p>
          </CardContent>
        </Card>
        
        <Card className="border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Processing Time</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">42s</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500">↓ 8%</span> from previous period
            </p>
          </CardContent>
        </Card>
        
        <Card className="border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Success Rate</CardTitle>
            <CheckCircle2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">98.2%</div>
            <p className="text-xs text-muted-foreground">
              <span className="text-green-500">↑ 1.2%</span> from previous period
            </p>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue="usage" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="usage">Usage Metrics</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="accuracy">Accuracy</TabsTrigger>
          <TabsTrigger value="efficiency">Efficiency</TabsTrigger>
        </TabsList>
        
        <TabsContent value="usage">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-primary" />
                  Document Volume by Day
                </CardTitle>
                <CardDescription>
                  Number of documents processed over time
                </CardDescription>
              </CardHeader>
              <CardContent className="h-[350px]">
                <div className="flex items-center justify-center h-full text-muted-foreground">
                  {/* This would be a real chart component in production */}
                  <div className="w-full h-full bg-muted/20 rounded-md flex items-center justify-center">
                    Bar chart visualization
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card className="border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <PieChart className="h-5 w-5 text-primary" />
                  Document Types
                </CardTitle>
                <CardDescription>
                  Distribution of document types processed
                </CardDescription>
              </CardHeader>
              <CardContent className="h-[350px]">
                <div className="flex items-center justify-center h-full text-muted-foreground">
                  {/* This would be a real chart component in production */}
                  <div className="w-full h-full bg-muted/20 rounded-md flex items-center justify-center">
                    Pie chart visualization
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="performance">
          <Card className="border-border">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <LineChart className="h-5 w-5 text-primary" />
                Processing Time
              </CardTitle>
              <CardDescription>
                Average processing time per document (in seconds)
              </CardDescription>
            </CardHeader>
            <CardContent className="h-[400px]">
              <div className="flex items-center justify-center h-full text-muted-foreground">
                {/* This would be a real chart component in production */}
                <div className="w-full h-full bg-muted/20 rounded-md flex items-center justify-center">
                  Line chart visualization
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="accuracy">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle2 className="h-5 w-5 text-primary" />
                  Extraction Accuracy
                </CardTitle>
                <CardDescription>
                  Accuracy of extracted data fields
                </CardDescription>
              </CardHeader>
              <CardContent className="h-[350px]">
                <div className="flex items-center justify-center h-full text-muted-foreground">
                  {/* This would be a real chart component in production */}
                  <div className="w-full h-full bg-muted/20 rounded-md flex items-center justify-center">
                    Accuracy chart visualization
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card className="border-border">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertCircle className="h-5 w-5 text-primary" />
                  Error Distribution
                </CardTitle>
                <CardDescription>
                  Most common error types in document processing
                </CardDescription>
              </CardHeader>
              <CardContent className="h-[350px]">
                <div className="flex items-center justify-center h-full text-muted-foreground">
                  {/* This would be a real chart component in production */}
                  <div className="w-full h-full bg-muted/20 rounded-md flex items-center justify-center">
                    Error distribution chart
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="efficiency">
          <Card className="border-border">
            <CardHeader>
              <CardTitle>Processing Efficiency</CardTitle>
              <CardDescription>
                Detailed breakdown of processing efficiency metrics
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">CPU Utilization</div>
                    <div className="text-sm text-muted-foreground">68%</div>
                  </div>
                  <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                    <div className="bg-primary h-full" style={{ width: '68%' }}></div>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Memory Usage</div>
                    <div className="text-sm text-muted-foreground">42%</div>
                  </div>
                  <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                    <div className="bg-primary h-full" style={{ width: '42%' }}></div>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Concurrent Processing</div>
                    <div className="text-sm text-muted-foreground">5 documents</div>
                  </div>
                  <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                    <div className="bg-primary h-full" style={{ width: '50%' }}></div>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="text-sm font-medium">Queue Wait Time</div>
                    <div className="text-sm text-muted-foreground">3.2s average</div>
                  </div>
                  <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                    <div className="bg-primary h-full" style={{ width: '32%' }}></div>
                  </div>
                </div>
                
                <div className="pt-6">
                  <div className="rounded-md border p-4">
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <div className="text-sm font-medium">Processing Capacity</div>
                    </div>
                    <p className="mt-2 text-sm text-muted-foreground">
                      Based on current usage patterns, your system can process up to <span className="font-medium">250</span> documents per day.
                    </p>
                    <div className="mt-4 text-xs text-muted-foreground flex items-center justify-between">
                      <span>Current daily average: 42 documents</span>
                      <span className="text-green-500">16.8% of capacity</span>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="app/(dashboard)/dashboard/profile/page.tsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { UserCircle, Mail, Building, Key, ShieldCheck, History, Save } from "lucide-react";

export default function ProfilePage() {
  const [user, setUser] = useState({
    name: "Sarah Johnson",
    email: "sarah.johnson@example.com",
    company: "Acme Technologies",
    role: "Administrator",
    plan: "Business",
    joinDate: "January 15, 2023"
  });
  
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    name: user.name,
    email: user.email,
    company: user.company,
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  
  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleSaveProfile = () => {
    setUser(prev => ({
      ...prev,
      name: formData.name,
      email: formData.email,
      company: formData.company
    }));
    setIsEditing(false);
  };
  
  const handlePasswordChange = () => {
    // Password change logic would go here
    console.log("Password change requested");
    // Reset password fields
    setFormData(prev => ({
      ...prev,
      currentPassword: "",
      newPassword: "",
      confirmPassword: ""
    }));
  };

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight text-foreground">My Profile</h1>
        <p className="text-muted-foreground">
          Manage your account settings and preferences
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="border-border md:col-span-1">
          <CardHeader>
            <CardTitle>Profile Information</CardTitle>
            <CardDescription>
              Your personal account details
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex justify-center">
              <div className="relative">
                <div className="w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center">
                  <UserCircle className="w-16 h-16 text-primary" />
                </div>
                {!isEditing && (
                  <Button variant="outline" size="sm" className="absolute -bottom-2 right-0">
                    Change
                  </Button>
                )}
              </div>
            </div>
            
            <div>
              <h3 className="font-medium text-lg">{user.name}</h3>
              <p className="text-muted-foreground text-sm">{user.email}</p>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <Building className="h-4 w-4 text-muted-foreground" />
                <span>{user.company}</span>
              </div>
              <div className="flex items-center gap-2">
                <ShieldCheck className="h-4 w-4 text-muted-foreground" />
                <span>{user.role}</span>
              </div>
              <div className="flex items-center gap-2">
                <History className="h-4 w-4 text-muted-foreground" />
                <span>Member since {user.joinDate}</span>
              </div>
            </div>
            
            <div className="pt-2">
              <Button 
                variant="outline" 
                className="w-full"
                onClick={() => setIsEditing(!isEditing)}
              >
                {isEditing ? "Cancel" : "Edit Profile"}
              </Button>
            </div>
          </CardContent>
        </Card>
        
        <div className="md:col-span-2">
          <Tabs defaultValue="account" className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="account">Account Settings</TabsTrigger>
              <TabsTrigger value="security">Security</TabsTrigger>
              <TabsTrigger value="billing">Billing</TabsTrigger>
            </TabsList>
            
            <TabsContent value="account">
              <Card className="border-border">
                <CardHeader>
                  <CardTitle>Account Information</CardTitle>
                  <CardDescription>
                    Update your account details and preferences
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="name">Full Name</Label>
                        <Input 
                          id="name" 
                          value={formData.name}
                          onChange={(e) => handleInputChange("name", e.target.value)}
                          disabled={!isEditing}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="email">Email Address</Label>
                        <Input 
                          id="email" 
                          type="email" 
                          value={formData.email}
                          onChange={(e) => handleInputChange("email", e.target.value)}
                          disabled={!isEditing}
                        />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="company">Company</Label>
                      <Input 
                        id="company" 
                        value={formData.company}
                        onChange={(e) => handleInputChange("company", e.target.value)}
                        disabled={!isEditing}
                      />
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <Label>Notification Preferences</Label>
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <input type="checkbox" id="email-notifications" className="rounded" defaultChecked />
                        <Label htmlFor="email-notifications" className="font-normal cursor-pointer">
                          Email notifications for completed document processing
                        </Label>
                      </div>
                      <div className="flex items-center gap-2">
                        <input type="checkbox" id="summary-emails" className="rounded" defaultChecked />
                        <Label htmlFor="summary-emails" className="font-normal cursor-pointer">
                          Weekly summary emails
                        </Label>
                      </div>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-end">
                  {isEditing && (
                    <Button onClick={handleSaveProfile}>
                      <Save className="h-4 w-4 mr-2" />
                      Save Changes
                    </Button>
                  )}
                </CardFooter>
              </Card>
            </TabsContent>
            
            <TabsContent value="security">
              <Card className="border-border">
                <CardHeader>
                  <CardTitle>Security Settings</CardTitle>
                  <CardDescription>
                    Update your password and security preferences
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="current-password">Current Password</Label>
                      <div className="relative">
                        <Input 
                          id="current-password" 
                          type="password" 
                          value={formData.currentPassword}
                          onChange={(e) => handleInputChange("currentPassword", e.target.value)}
                        />
                        <Key className="absolute right-3 top-2.5 h-4 w-4 text-muted-foreground" />
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="new-password">New Password</Label>
                      <Input 
                        id="new-password" 
                        type="password" 
                        value={formData.newPassword}
                        onChange={(e) => handleInputChange("newPassword", e.target.value)}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="confirm-password">Confirm New Password</Label>
                      <Input 
                        id="confirm-password" 
                        type="password" 
                        value={formData.confirmPassword}
                        onChange={(e) => handleInputChange("confirmPassword", e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="space-y-2">
                    <Label>Two-Factor Authentication</Label>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <ShieldCheck className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">Enhanced account security</span>
                      </div>
                      <Button variant="outline" size="sm">Enable 2FA</Button>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="flex justify-end">
                  <Button 
                    onClick={handlePasswordChange}
                    disabled={!formData.currentPassword || !formData.newPassword || formData.newPassword !== formData.confirmPassword}
                  >
                    Update Password
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            <TabsContent value="billing">
              <Card className="border-border">
                <CardHeader>
                  <CardTitle>Subscription & Billing</CardTitle>
                  <CardDescription>
                    Manage your subscription plan and payment methods
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="p-4 rounded-md bg-primary/5 border border-primary/10">
                    <div className="flex justify-between items-center">
                      <div>
                        <h3 className="font-medium">Current Plan: {user.plan}</h3>
                        <p className="text-muted-foreground text-sm">Your subscription renews on April 15, 2023</p>
                      </div>
                      <Button variant="outline">Change Plan</Button>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <h3 className="font-medium">Payment Methods</h3>
                    <div className="p-4 rounded-md border border-border flex justify-between items-center">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded bg-primary/10 flex items-center justify-center">
                          <Mail className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <div className="font-medium">Visa ending in 4242</div>
                          <div className="text-sm text-muted-foreground">Expires 04/2025</div>
                        </div>
                      </div>
                      <Button variant="ghost" size="sm">Edit</Button>
                    </div>
                    
                    <Button variant="outline" className="mt-2">
                      Add Payment Method
                    </Button>
                  </div>
                  
                  <div className="space-y-2">
                    <h3 className="font-medium">Billing History</h3>
                    <div className="rounded-md border">
                      <div className="grid grid-cols-4 p-3 bg-muted/50 font-medium text-sm">
                        <div>Date</div>
                        <div>Amount</div>
                        <div>Status</div>
                        <div className="text-right">Invoice</div>
                      </div>
                      <div className="grid grid-cols-4 p-3 border-t">
                        <div>Mar 15, 2023</div>
                        <div>$49.99</div>
                        <div>
                          <span className="inline-flex items-center rounded-full px-2 py-1 text-xs bg-green-100 text-green-700">
                            Paid
                          </span>
                        </div>
                        <div className="text-right">
                          <Button variant="ghost" size="sm" className="h-6 px-2">Download</Button>
                        </div>
                      </div>
                      <div className="grid grid-cols-4 p-3 border-t">
                        <div>Feb 15, 2023</div>
                        <div>$49.99</div>
                        <div>
                          <span className="inline-flex items-center rounded-full px-2 py-1 text-xs bg-green-100 text-green-700">
                            Paid
                          </span>
                        </div>
                        <div className="text-right">
                          <Button variant="ghost" size="sm" className="h-6 px-2">Download</Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="app/(dashboard)/dashboard/settings/page.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Globe, Database, Lock, Bell, Save, Download, Trash2, AlertTriangle } from "lucide-react";

export default function SettingsPage() {
  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight text-foreground">Settings</h1>
        <p className="text-muted-foreground">
          Manage your application settings and preferences
        </p>
      </div>
      
      <Tabs defaultValue="general" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="general">General</TabsTrigger>
          <TabsTrigger value="integration">API & Integrations</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="privacy">Privacy & Data</TabsTrigger>
        </TabsList>
        
        <TabsContent value="general">
          <div className="grid gap-6 md:grid-cols-2">
            <Card className="border-border">
              <CardHeader>
                <CardTitle>Display Settings</CardTitle>
                <CardDescription>
                  Customize how the application appears
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="theme">Theme Preference</Label>
                    <p className="text-sm text-muted-foreground">
                      Choose your preferred theme
                    </p>
                  </div>
                  <Select defaultValue="system">
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Select theme" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="light">Light</SelectItem>
                      <SelectItem value="dark">Dark</SelectItem>
                      <SelectItem value="system">System</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <Separator />
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Sidebar Behavior</Label>
                    <p className="text-sm text-muted-foreground">
                      Auto-collapse sidebar on small screens
                    </p>
                  </div>
                  <Switch defaultChecked />
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Compact Mode</Label>
                    <p className="text-sm text-muted-foreground">
                      Reduce padding and spacing throughout the UI
                    </p>
                  </div>
                  <Switch />
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Animation Effects</Label>
                    <p className="text-sm text-muted-foreground">
                      Enable animations and transitions
                    </p>
                  </div>
                  <Switch defaultChecked />
                </div>
              </CardContent>
            </Card>
            
            <Card className="border-border">
              <CardHeader>
                <CardTitle>Language & Region</CardTitle>
                <CardDescription>
                  Set your language and regional preferences
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="language">Language</Label>
                  <Select defaultValue="en">
                    <SelectTrigger>
                      <SelectValue placeholder="Select language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">English</SelectItem>
                      <SelectItem value="es">Español</SelectItem>
                      <SelectItem value="fr">Français</SelectItem>
                      <SelectItem value="de">Deutsch</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="date-format">Date Format</Label>
                  <Select defaultValue="mdy">
                    <SelectTrigger>
                      <SelectValue placeholder="Select date format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="mdy">MM/DD/YYYY</SelectItem>
                      <SelectItem value="dmy">DD/MM/YYYY</SelectItem>
                      <SelectItem value="ymd">YYYY/MM/DD</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="time-format">Time Format</Label>
                  <Select defaultValue="12h">
                    <SelectTrigger>
                      <SelectValue placeholder="Select time format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="12h">12-hour (AM/PM)</SelectItem>
                      <SelectItem value="24h">24-hour</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="timezone">Timezone</Label>
                  <Select defaultValue="utc-8">
                    <SelectTrigger>
                      <SelectValue placeholder="Select timezone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="utc-8">Pacific Time (UTC-8)</SelectItem>
                      <SelectItem value="utc-5">Eastern Time (UTC-5)</SelectItem>
                      <SelectItem value="utc+0">UTC+0</SelectItem>
                      <SelectItem value="utc+1">Central European Time (UTC+1)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="integration">
          <Card className="border-border">
            <CardHeader>
              <CardTitle>API Settings</CardTitle>
              <CardDescription>
                Manage your API keys and integration settings
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium">API Access</h3>
                    <p className="text-sm text-muted-foreground">
                      Enable API access to your account
                    </p>
                  </div>
                  <Switch defaultChecked />
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <Label>API Key</Label>
                  <div className="flex gap-2">
                    <Input 
                      value="api_aBcDeFgHiJkLmNoPqRsTuVwXyZ123456789" 
                      type="password" 
                      className="flex-1 font-mono text-sm"
                      readOnly
                    />
                    <Button variant="outline">
                      Show
                    </Button>
                    <Button variant="outline">
                      Regenerate
                    </Button>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    This key grants full access to your account via API. Keep it secure.
                  </p>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h3 className="font-medium">Third-Party Integrations</h3>
                  
                  <div className="rounded-md border p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded bg-primary/10 flex items-center justify-center">
                          <Globe className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <h4 className="font-medium">Google Drive</h4>
                          <p className="text-sm text-muted-foreground">Import and export documents</p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm">Connect</Button>
                    </div>
                  </div>
                  
                  <div className="rounded-md border p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded bg-primary/10 flex items-center justify-center">
                          <Database className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <h4 className="font-medium">Dropbox</h4>
                          <p className="text-sm text-muted-foreground">Import and export documents</p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm">Connect</Button>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="notifications">
          <Card className="border-border">
            <CardHeader>
              <CardTitle>Notification Settings</CardTitle>
              <CardDescription>
                Manage how and when you receive notifications
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h3 className="font-medium">Email Notifications</h3>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="notify-processing" className="font-normal">Document Processing</Label>
                      <p className="text-xs text-muted-foreground">
                        When document processing is complete
                      </p>
                    </div>
                    <Switch id="notify-processing" defaultChecked />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="notify-errors" className="font-normal">Processing Errors</Label>
                      <p className="text-xs text-muted-foreground">
                        When document processing encounters an error
                      </p>
                    </div>
                    <Switch id="notify-errors" defaultChecked />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="notify-summary" className="font-normal">Weekly Summary</Label>
                      <p className="text-xs text-muted-foreground">
                        Weekly summary of your document processing activity
                      </p>
                    </div>
                    <Switch id="notify-summary" />
                  </div>
                </div>
                
                <Separator />
                
                <h3 className="font-medium">Browser Notifications</h3>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="browser-notify" className="font-normal">Enable Browser Notifications</Label>
                      <p className="text-xs text-muted-foreground">
                        Show notifications in your browser
                      </p>
                    </div>
                    <Switch id="browser-notify" defaultChecked />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="browser-sound" className="font-normal">Notification Sounds</Label>
                      <p className="text-xs text-muted-foreground">
                        Play a sound when notifications appear
                      </p>
                    </div>
                    <Switch id="browser-sound" />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="privacy">
          <div className="grid gap-6 md:grid-cols-2">
            <Card className="border-border">
              <CardHeader>
                <CardTitle>Privacy Settings</CardTitle>
                <CardDescription>
                  Control how your data is used and stored
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="data-analytics" className="font-normal">Usage Analytics</Label>
                      <p className="text-xs text-muted-foreground">
                        Allow collection of anonymized usage data to improve the service
                      </p>
                    </div>
                    <Switch id="data-analytics" defaultChecked />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="data-processing" className="font-normal">Document Storage</Label>
                      <p className="text-xs text-muted-foreground">
                        Store processed documents for future reference
                      </p>
                    </div>
                    <Switch id="data-processing" defaultChecked />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="data-third-party" className="font-normal">Third-Party Processing</Label>
                      <p className="text-xs text-muted-foreground">
                        Allow third-party services to process your documents for enhanced features
                      </p>
                    </div>
                    <Switch id="data-third-party" />
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card className="border-border">
              <CardHeader>
                <CardTitle>Data Management</CardTitle>
                <CardDescription>
                  Export or delete your account data
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="p-4 rounded-md border">
                    <h3 className="font-medium flex items-center gap-2">
                      <Download className="h-4 w-4 text-primary" />
                      Export Your Data
                    </h3>
                    <p className="text-sm text-muted-foreground mt-1 mb-3">
                      Download a copy of your personal data and documents
                    </p>
                    <Button variant="outline">
                      Request Data Export
                    </Button>
                  </div>
                  
                  <div className="p-4 rounded-md border border-destructive/20">
                    <h3 className="font-medium flex items-center gap-2 text-destructive">
                      <Trash2 className="h-4 w-4" />
                      Delete Account
                    </h3>
                    <p className="text-sm text-muted-foreground mt-1 mb-3">
                      Permanently delete your account and all associated data
                    </p>
                    <div className="flex items-center gap-2 mb-3">
                      <AlertTriangle className="h-4 w-4 text-destructive" />
                      <p className="text-xs text-destructive">
                        This action cannot be undone
                      </p>
                    </div>
                    <Button variant="destructive">
                      Delete Account
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
      
      <div className="flex justify-end gap-2 mt-2">
        <Button variant="outline">Cancel</Button>
        <Button>
          <Save className="h-4 w-4 mr-2" />
          Save Settings
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="app/(marketing)/page.tsx">
"use client"

import { useEffect, useState, useRef } from "react"
import Link from "next/link"
import { useTheme } from "next-themes"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card"
import { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext } from "@/components/ui/carousel"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Switch } from "@/components/ui/switch"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  ArrowRight,
  CheckCircle2,
  FileText,
  Zap,
  BarChart,
  Lock,
  Globe,
  ArrowUpRight,
  ChevronRight,
  Menu,
  X,
  Sun,
  Moon,
  Star,
  Sparkles,
  ArrowDown,
  Layers,
  Database,
  Workflow,
  Code,
  Settings,
  Shield,
  Users,
} from "lucide-react"

export default function LandingPage() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [scrolled, setScrolled] = useState(false)
  const [activeSection, setActiveSection] = useState("hero")
  const { theme, setTheme } = useTheme()
  const heroRef = useRef<HTMLElement>(null)
  const featuresRef = useRef<HTMLElement>(null)
  const howItWorksRef = useRef<HTMLElement>(null)
  const testimonialsRef = useRef<HTMLElement>(null)
  const pricingRef = useRef<HTMLElement>(null)

  // Handle scroll events
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20)

      // Determine active section
      const scrollPosition = window.scrollY + 100

      const sections = [
        { id: "hero", ref: heroRef },
        { id: "features", ref: featuresRef },
        { id: "how-it-works", ref: howItWorksRef },
        { id: "testimonials", ref: testimonialsRef },
        { id: "pricing", ref: pricingRef },
      ] as const

      for (let i = sections.length - 1; i >= 0; i--) {
        const section = sections[i]
        const element = section.ref.current
        if (element && element.offsetTop <= scrollPosition) {
          setActiveSection(section.id)
          break
        }
      }
    }

    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  // Parallax effect for hero section
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({
        x: e.clientX / window.innerWidth - 0.5,
        y: e.clientY / window.innerHeight - 0.5,
      })
    }

    window.addEventListener("mousemove", handleMouseMove)
    return () => window.removeEventListener("mousemove", handleMouseMove)
  }, [])

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-b from-background to-background/80 selection:bg-primary/20 selection:text-primary">
      {/* Header */}
      <header
        className={`sticky top-0 z-50 w-full border-b transition-all duration-300 ${scrolled ? "bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-border/40" : "bg-transparent border-transparent"}`}
      >
        <div className="container flex h-16 items-center justify-between py-4">
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="flex items-center gap-2"
          >
            <div className="bg-primary p-1.5 rounded-lg relative overflow-hidden group">
              <div className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
              <FileText className="h-5 w-5 text-primary-foreground relative z-10" />
            </div>
            <span className="font-bold text-xl">
              Ingestio<span className="text-primary">.io</span>
            </span>
          </motion.div>

          {/* Mobile menu button */}
          <motion.button
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="md:hidden"
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            whileTap={{ scale: 0.95 }}
          >
            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </motion.button>

          {/* Desktop navigation */}
          <nav className="hidden md:flex gap-8">
            {[
              { href: "#features", label: "Features", id: "features" },
              { href: "#how-it-works", label: "How It Works", id: "how-it-works" },
              { href: "#testimonials", label: "Testimonials", id: "testimonials" },
              { href: "#pricing", label: "Pricing", id: "pricing" },
            ].map((item) => (
              <Link
                key={item.id}
                href={item.href}
                className={`text-sm font-medium transition-colors hover:text-primary relative ${activeSection === item.id ? "text-primary" : "text-muted-foreground"}`}
              >
                {item.label}
                {activeSection === item.id && (
                  <motion.div
                    layoutId="activeSection"
                    className="absolute -bottom-1 left-0 right-0 h-0.5 bg-primary rounded-full"
                    transition={{ type: "spring", stiffness: 380, damping: 30 }}
                  />
                )}
              </Link>
            ))}
          </nav>

          {/* Desktop CTA buttons */}
          <div className="hidden md:flex items-center gap-4">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Switch
                    checked={theme === "dark"}
                    onCheckedChange={() => setTheme(theme === "dark" ? "light" : "dark")}
                    className="mr-2"
                  />
                </TooltipTrigger>
                <TooltipContent>
                  <p>Toggle {theme === "dark" ? "light" : "dark"} mode</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <Link
              href="/login"
              className="text-sm font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              Log in
            </Link>
            <Button asChild className="relative overflow-hidden group">
              <Link href="/dashboard">
                <span className="relative z-10">Get Started</span>
                <span className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
              </Link>
            </Button>
          </div>
        </div>

        {/* Mobile menu */}
        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="md:hidden border-t bg-background overflow-hidden"
            >
              <div className="container py-4 flex flex-col gap-4">
                {[
                  { href: "#features", label: "Features" },
                  { href: "#how-it-works", label: "How It Works" },
                  { href: "#testimonials", label: "Testimonials" },
                  { href: "#pricing", label: "Pricing" },
                ].map((item, index) => (
                  <motion.div
                    key={item.href}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Link
                      href={item.href}
                      className="text-sm font-medium py-2 hover:text-primary block"
                      onClick={() => setIsMenuOpen(false)}
                    >
                      {item.label}
                    </Link>
                  </motion.div>
                ))}
                <div className="flex items-center justify-between pt-2 border-t">
                  <div className="flex items-center gap-2">
                    <Sun className="h-4 w-4" />
                    <Switch
                      checked={theme === "dark"}
                      onCheckedChange={() => setTheme(theme === "dark" ? "light" : "dark")}
                    />
                    <Moon className="h-4 w-4" />
                  </div>
                </div>
                <div className="flex flex-col gap-2 pt-2 border-t">
                  <Link
                    href="/login"
                    className="text-sm font-medium py-2 hover:text-primary"
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Log in
                  </Link>
                  <Button asChild className="w-full">
                    <Link href="/dashboard">Get Started</Link>
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </header>

      {/* Hero Section */}
      <section ref={heroRef} className="relative overflow-hidden py-20 md:py-32">
        <div className="absolute inset-0 bg-grid-small-black/[0.03] dark:bg-grid-small-white/[0.03] -z-10" />

        {/* Animated gradient background */}
        <div
          className="absolute top-0 -right-40 -z-10 h-[600px] w-[600px] rounded-full bg-primary/10 blur-3xl animate-pulse"
          style={{
            transform: `translate(${mousePosition.x * 20}px, ${mousePosition.y * 20}px)`,
            opacity: 0.7 + mousePosition.y * 0.3,
          }}
        />
        <div
          className="absolute -bottom-40 -left-40 -z-10 h-[600px] w-[600px] rounded-full bg-blue-500/5 dark:bg-blue-500/10 blur-3xl animate-pulse"
          style={{
            animationDelay: "1s",
            transform: `translate(${mousePosition.x * -20}px, ${mousePosition.y * -20}px)`,
          }}
        />

        <div className="container px-4 md:px-6">
          <div className="grid gap-12 lg:grid-cols-2 lg:gap-16 items-center">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="flex flex-col gap-6"
            >
              <Badge className="w-fit group" variant="outline">
                <motion.span
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 0.3 }}
                  className="inline-flex items-center"
                >
                  <Sparkles className="h-3.5 w-3.5 mr-1 text-primary" />
                  <span>AI-Powered Document Processing</span>
                </motion.span>
              </Badge>
              <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl lg:text-7xl">
                Extract data from{" "}
                <span className="text-primary relative inline-block">
                  documents
                  <motion.svg
                    aria-hidden="true"
                    viewBox="0 0 418 42"
                    className="absolute top-full left-0 h-[0.58em] w-full fill-primary/40"
                    preserveAspectRatio="none"
                    initial={{ pathLength: 0 }}
                    animate={{ pathLength: 1 }}
                    transition={{ delay: 0.5, duration: 1 }}
                  >
                    <path d="M203.371.916c-26.013-2.078-76.686 1.963-124.73 9.946L67.3 12.749C35.421 18.062 18.2 21.766 6.004 25.934 1.244 27.561.828 27.778.874 28.61c.07 1.214.828 1.121 9.595-1.176 9.072-2.377 17.15-3.92 39.246-7.496C123.565 7.986 157.869 4.492 195.942 5.046c7.461.108 19.25 1.696 19.17 2.582-.107 1.183-7.874 4.31-25.75 10.366-21.992 7.45-35.43 12.534-36.701 13.884-2.173 2.308-.202 4.407 4.442 4.734 2.654.187 3.263.157 15.593-.78 35.401-2.686 57.944-3.488 88.365-3.143 46.327.526 75.721 2.23 130.788 7.584 19.787 1.924 20.814 1.98 24.557 1.332l.066-.011c1.201-.203 1.53-1.825.399-2.335-2.911-1.31-4.893-1.604-22.048-3.261-57.509-5.556-87.871-7.36-132.059-7.842-23.239-.254-33.617-.116-50.627.674-11.629.54-42.371 2.494-46.696 2.967-2.359.259 8.133-3.625 26.504-9.81 23.239-7.825 27.934-10.149 28.304-14.005.417-4.348-3.529-6-16.878-7.066Z" />
                  </motion.svg>
                </span>{" "}
                in seconds
              </h1>
              <motion.p
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.2 }}
                className="max-w-[600px] text-lg text-muted-foreground md:text-xl"
              >
                Stop wasting time on manual data entry. Our AI automatically extracts, structures, and validates data
                from any document type with <span className="font-semibold text-primary">99% accuracy</span>.
              </motion.p>
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                className="flex flex-col sm:flex-row gap-4 pt-4"
              >
                <Button size="lg" className="h-12 px-8 group relative overflow-hidden" asChild>
                  <Link href="/dashboard">
                    <span className="relative z-10 flex items-center">
                      Try for free
                      <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                    </span>
                    <span className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
                  </Link>
                </Button>
                <Button size="lg" variant="outline" className="h-12 px-8 group" asChild>
                  <Link href="#demo">
                    <span className="flex items-center">
                      Watch demo
                      <svg
                        className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1"
                        viewBox="0 0 16 16"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M5.5 3.5L10.5 8L5.5 12.5"
                          stroke="currentColor"
                          strokeWidth="1.5"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </span>
                  </Link>
                </Button>
              </motion.div>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.6 }}
                className="flex items-center gap-8 pt-4"
              >
                <div className="flex -space-x-3">
                  {[1, 2, 3, 4].map((i) => (
                    <motion.div
                      key={i}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.6 + i * 0.1 }}
                      className="h-8 w-8 rounded-full border-2 border-background bg-muted overflow-hidden"
                    >
                      <img
                        src={`/landing/avatar${i}.jpg`}
                        alt={`User ${i}`}
                        className="h-full w-full object-cover"
                      />
                    </motion.div>
                  ))}
                </div>
                <div className="text-sm">
                  <span className="font-medium">1,000+ companies</span>
                  <span className="text-muted-foreground"> trust Ingestio.io</span>
                </div>
              </motion.div>
            </motion.div>
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="relative"
              style={{
                transform: `translate(${mousePosition.x * -10}px, ${mousePosition.y * -10}px)`,
              }}
            >
              <div className="absolute -inset-0.5 rounded-xl bg-gradient-to-r from-primary/20 to-primary/40 blur-xl opacity-70 animate-pulse" />
              <div className="relative bg-card rounded-xl border shadow-xl overflow-hidden">
                <div className="absolute top-0 left-0 right-0 h-12 bg-muted/80 backdrop-blur-sm flex items-center px-4 gap-2">
                  <div className="flex gap-1.5">
                    <div className="h-3 w-3 rounded-full bg-red-500" />
                    <div className="h-3 w-3 rounded-full bg-yellow-500" />
                    <div className="h-3 w-3 rounded-full bg-green-500" />
                  </div>
                  <div className="text-xs font-medium ml-2">Ingestio.io Dashboard</div>
                </div>
                <div className="pt-12 pb-4 px-4 h-[400px]">
                  <img
                    src="/landing/ingestio_dashboard.png"
                    alt="Ingestio.io Dashboard"
                    className="rounded-md w-full h-full object-fill"
                    width={600}
                    height={500}
                  />
                </div>
              </div>
              <div
                className="absolute -bottom-6 -right-6 h-24 w-24 rounded-full bg-primary/20 blur-xl animate-pulse"
                style={{ animationDelay: "0.5s" }}
              />
            </motion.div>
          </div>
        </div>

        {/* Scroll indicator */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1, duration: 0.5 }}
          className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex flex-col items-center"
        >
          <span className="text-xs text-muted-foreground mb-2">Scroll to explore</span>
          <motion.div animate={{ y: [0, 8, 0] }} transition={{ repeat: Number.POSITIVE_INFINITY, duration: 1.5 }}>
            <ArrowDown className="h-4 w-4 text-muted-foreground" />
          </motion.div>
        </motion.div>

        {/* Logos */}
        <div className="container mt-20">
          <motion.p
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.8 }}
            className="text-center text-sm font-medium text-muted-foreground mb-6"
          >
            TRUSTED BY INNOVATIVE TECH STARTUPS
          </motion.p>
          <div className="flex flex-wrap justify-center gap-x-12 gap-y-8">
            {[
              { id: 1, name: "Supabase" },
              { id: 2, name: "Vercel" },
              { id: 3, name: "Planetscale" },
              { id: 4, name: "Retool" },
              { id: 5, name: "Railway" }
            ].map((company) => (
              <motion.div
                key={company.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.8 + company.id * 0.1 }}
                className="h-12 transition-all hover:opacity-100"
              >
                <img
                  src={`/landing/company${company.id}.png`}
                  alt={`${company.name} logo`}
                  className="h-full w-auto object-contain"
                  width={120}
                  height={48}
                />
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section ref={featuresRef} id="features" className="py-24 relative">
        <div className="absolute inset-0 bg-grid-small-black/[0.03] dark:bg-grid-small-white/[0.03] -z-10" />
        <div className="container px-4 md:px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16 max-w-3xl mx-auto"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <Sparkles className="h-3.5 w-3.5 mr-1 text-primary" />
                <span>Features</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Everything you need for document processing
            </h2>
            <p className="text-lg text-muted-foreground">
              Our platform combines powerful AI with an intuitive interface to make document processing effortless
            </p>
          </motion.div>

          <Tabs defaultValue="extract" className="w-full">
            <TabsList className="grid w-full grid-cols-3 mb-12 relative">
              <TabsTrigger
                value="extract"
                className="data-[state=active]:bg-primary/10 data-[state=active]:text-primary"
              >
                <Zap className="h-4 w-4 mr-2" />
                Extract
              </TabsTrigger>
              <TabsTrigger
                value="process"
                className="data-[state=active]:bg-primary/10 data-[state=active]:text-primary"
              >
                <BarChart className="h-4 w-4 mr-2" />
                Process
              </TabsTrigger>
              <TabsTrigger
                value="integrate"
                className="data-[state=active]:bg-primary/10 data-[state=active]:text-primary"
              >
                <Globe className="h-4 w-4 mr-2" />
                Integrate
              </TabsTrigger>
            </TabsList>

            <TabsContent value="extract" className="mt-0">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="grid lg:grid-cols-2 gap-12 items-center"
              >
                <div className="order-2 lg:order-1">
                  <div className="space-y-4">
                    <div className="inline-flex items-center gap-2 rounded-lg bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                      <Zap className="h-4 w-4" />
                      Instant Extraction
                    </div>
                    <h3 className="text-2xl font-bold">Extract data from any document type</h3>
                    <p className="text-muted-foreground">
                      Our AI can process invoices, receipts, contracts, forms, and more with industry-leading accuracy.
                    </p>

                    <ul className="space-y-4 pt-4">
                      {[
                        {
                          title: "99% Accuracy",
                          description: "Advanced AI models trained on millions of documents",
                          icon: <CheckCircle2 className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Multiple Document Types",
                          description: "PDFs, images, scans, and even handwritten documents",
                          icon: <Layers className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Structured Output",
                          description: "Get clean, structured data ready for your systems",
                          icon: <Database className="h-5 w-5 text-primary" />,
                        },
                      ].map((item, index) => (
                        <motion.li
                          key={index}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: 0.1 * index }}
                          className="flex gap-3"
                        >
                          <div className="rounded-full p-1 bg-primary/10">{item.icon}</div>
                          <div>
                            <h4 className="font-medium">{item.title}</h4>
                            <p className="text-sm text-muted-foreground">{item.description}</p>
                          </div>
                        </motion.li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div className="relative order-1 lg:order-2">
                  <div className="absolute -inset-1 rounded-xl bg-gradient-to-r from-primary/20 to-primary/30 blur-xl opacity-70" />
                  <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className="relative bg-card rounded-xl border shadow-xl overflow-hidden"
                  >
                    <img
                      src="/landing/document-extraction.jpg"
                      alt="Document Extraction"
                      className="w-full"
                      width={600}
                      height={400}
                    />
                  </motion.div>
                </div>
              </motion.div>
            </TabsContent>

            <TabsContent value="process" className="mt-0">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="grid lg:grid-cols-2 gap-12 items-center"
              >
                <div className="order-2 lg:order-1">
                  <div className="space-y-4">
                    <div className="inline-flex items-center gap-2 rounded-lg bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                      <BarChart className="h-4 w-4" />
                      Smart Processing
                    </div>
                    <h3 className="text-2xl font-bold">Process and validate with confidence</h3>
                    <p className="text-muted-foreground">
                      Our platform doesn't just extract data—it understands it, validates it, and prepares it for your
                      workflows.
                    </p>

                    <ul className="space-y-4 pt-4">
                      {[
                        {
                          title: "Automatic Validation",
                          description: "Built-in checks to ensure data accuracy",
                          icon: <Shield className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Data Enrichment",
                          description: "Enhance extracted data with additional context",
                          icon: <Workflow className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Custom Rules",
                          description: "Define your own validation and processing rules",
                          icon: <Settings className="h-5 w-5 text-primary" />,
                        },
                      ].map((item, index) => (
                        <motion.li
                          key={index}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: 0.1 * index }}
                          className="flex gap-3"
                        >
                          <div className="rounded-full p-1 bg-primary/10">{item.icon}</div>
                          <div>
                            <h4 className="font-medium">{item.title}</h4>
                            <p className="text-sm text-muted-foreground">{item.description}</p>
                          </div>
                        </motion.li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div className="relative order-1 lg:order-2">
                  <div className="absolute -inset-1 rounded-xl bg-gradient-to-r from-primary/20 to-primary/30 blur-xl opacity-70" />
                  <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className="relative bg-card rounded-xl border shadow-xl overflow-hidden"
                  >
                    <img
                      src="/landing/data-processing.jpg"
                      alt="Data Processing"
                      className="w-full"
                      width={600}
                      height={400}
                    />
                  </motion.div>
                </div>
              </motion.div>
            </TabsContent>

            <TabsContent value="integrate" className="mt-0">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="grid lg:grid-cols-2 gap-12 items-center"
              >
                <div className="order-2 lg:order-1">
                  <div className="space-y-4">
                    <div className="inline-flex items-center gap-2 rounded-lg bg-primary/10 px-3 py-1 text-sm font-medium text-primary">
                      <Globe className="h-4 w-4" />
                      Seamless Integration
                    </div>
                    <h3 className="text-2xl font-bold">Connect with your existing tools</h3>
                    <p className="text-muted-foreground">
                      Ingestio.io integrates with your favorite tools and platforms to create a seamless workflow.
                    </p>

                    <ul className="space-y-4 pt-4">
                      {[
                        {
                          title: "API Access",
                          description: "Powerful REST API for custom integrations",
                          icon: <Code className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Pre-built Connectors",
                          description: "Connect with Zapier, Salesforce, QuickBooks, and more",
                          icon: <Workflow className="h-5 w-5 text-primary" />,
                        },
                        {
                          title: "Webhooks",
                          description: "Trigger actions in other systems automatically",
                          icon: <Zap className="h-5 w-5 text-primary" />,
                        },
                      ].map((item, index) => (
                        <motion.li
                          key={index}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: 0.1 * index }}
                          className="flex gap-3"
                        >
                          <div className="rounded-full p-1 bg-primary/10">{item.icon}</div>
                          <div>
                            <h4 className="font-medium">{item.title}</h4>
                            <p className="text-sm text-muted-foreground">{item.description}</p>
                          </div>
                        </motion.li>
                      ))}
                    </ul>
                  </div>
                </div>
                <div className="relative order-1 lg:order-2">
                  <div className="absolute -inset-1 rounded-xl bg-gradient-to-r from-primary/20 to-primary/30 blur-xl opacity-70" />
                  <motion.div
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.5 }}
                    className="relative bg-card rounded-xl border shadow-xl overflow-hidden"
                  >
                    <img
                      src="/landing/integration.jpg"
                      alt="Integration"
                      className="w-full"
                      width={600}
                      height={400}
                    />
                  </motion.div>
                </div>
              </motion.div>
            </TabsContent>
          </Tabs>

          {/* Feature cards */}
          <div className="mt-24">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true, margin: "-100px" }}
              transition={{ duration: 0.5 }}
              className="text-center mb-12"
            >
              <h3 className="text-2xl font-bold mb-4">More powerful features</h3>
              <p className="text-muted-foreground max-w-2xl mx-auto">
                Discover all the tools you need to streamline your document processing workflow
              </p>
            </motion.div>

            <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {[
                {
                  title: "Batch Processing",
                  description:
                    "Process thousands of documents simultaneously with our powerful batch processing engine.",
                  icon: <Layers className="h-5 w-5 text-primary" />,
                },
                {
                  title: "Custom Templates",
                  description: "Create custom extraction templates for your specific document types and formats.",
                  icon: <FileText className="h-5 w-5 text-primary" />,
                },
                {
                  title: "Advanced OCR",
                  description: "Extract text from any document, including scanned images and handwritten notes.",
                  icon: <Zap className="h-5 w-5 text-primary" />,
                },
                {
                  title: "Data Validation",
                  description: "Ensure accuracy with built-in validation rules and error detection.",
                  icon: <Shield className="h-5 w-5 text-primary" />,
                },
                {
                  title: "Team Collaboration",
                  description: "Work together with your team to review and approve extracted data.",
                  icon: <Users className="h-5 w-5 text-primary" />,
                },
                {
                  title: "Audit Trails",
                  description: "Keep track of all document processing activities with detailed audit logs.",
                  icon: <Database className="h-5 w-5 text-primary" />,
                },
              ].map((feature, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true, margin: "-100px" }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                  <HoverCard>
                    <HoverCardTrigger asChild>
                      <Card className="h-full transition-all hover:shadow-md hover:border-primary/50 cursor-pointer">
                        <CardContent className="p-6 flex flex-col h-full">
                          <div className="rounded-full w-10 h-10 bg-primary/10 flex items-center justify-center mb-4">
                            {feature.icon}
                          </div>
                          <h4 className="text-lg font-medium mb-2">{feature.title}</h4>
                          <p className="text-sm text-muted-foreground">{feature.description}</p>
                        </CardContent>
                      </Card>
                    </HoverCardTrigger>
                    <HoverCardContent className="w-80">
                      <div className="flex justify-between space-x-4">
                        <div className="space-y-1">
                          <h4 className="text-sm font-semibold">{feature.title}</h4>
                          <p className="text-sm text-muted-foreground">{feature.description}</p>
                          <div className="flex items-center pt-2">
                            <Button variant="link" className="h-8 p-0 text-primary" asChild>
                              <Link href="#" className="flex items-center">
                                Learn more
                                <ArrowRight className="ml-1 h-3 w-3" />
                              </Link>
                            </Button>
                          </div>
                        </div>
                      </div>
                    </HoverCardContent>
                  </HoverCard>
                </motion.div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section
        ref={howItWorksRef}
        id="how-it-works"
        className="py-24 bg-muted/30 dark:bg-muted/10 relative overflow-hidden"
      >
        <div className="absolute top-0 right-0 -z-10 h-[600px] w-[600px] rounded-full bg-primary/5 blur-3xl" />
        <div className="absolute bottom-0 left-0 -z-10 h-[600px] w-[600px] rounded-full bg-blue-500/5 blur-3xl" />

        <div className="container px-4 md:px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16 max-w-3xl mx-auto"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <Workflow className="h-3.5 w-3.5 mr-1 text-primary" />
                <span>How It Works</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Three simple steps to automate your workflow
            </h2>
            <p className="text-lg text-muted-foreground">
              Our platform makes document processing effortless from start to finish
            </p>
          </motion.div>

          <div className="relative">
            {/* Connection line */}
            <div className="absolute top-24 left-1/2 h-[calc(100%-6rem)] w-0.5 bg-border -translate-x-1/2 hidden md:block" />

            <div className="grid md:grid-cols-3 gap-8 relative">
              {[
                {
                  step: 1,
                  title: "Upload Documents",
                  description: "Drag and drop your documents or connect to cloud storage for automatic importing.",
                  features: [
                    "Support for PDFs, images, and scans",
                    "Batch upload for multiple documents",
                    "Secure and encrypted storage",
                  ],
                },
                {
                  step: 2,
                  title: "AI Processing",
                  description: "Our AI automatically extracts, classifies, and validates data from your documents.",
                  features: [
                    "Advanced OCR and machine learning",
                    "Automatic field detection and mapping",
                    "Data validation and error correction",
                  ],
                },
                {
                  step: 3,
                  title: "Export & Integrate",
                  description: "Review the extracted data and export it to your preferred format or system.",
                  features: [
                    "Export to CSV, JSON, Excel, and more",
                    "Direct integration with business systems",
                    "Automated workflows with webhooks",
                  ],
                },
              ].map((step, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true, margin: "-100px" }}
                  transition={{ duration: 0.5, delay: index * 0.2 }}
                  className="bg-background rounded-xl p-6 border shadow-sm relative z-10 group hover:border-primary/50 hover:shadow-md transition-all"
                >
                  <div className="rounded-full w-12 h-12 bg-primary flex items-center justify-center mb-6 group-hover:scale-110 transition-transform">
                    <span className="text-primary-foreground font-bold">{step.step}</span>
                  </div>
                  <h3 className="text-xl font-bold mb-2">{step.title}</h3>
                  <p className="text-muted-foreground mb-4">{step.description}</p>
                  <ul className="space-y-2 text-sm">
                    {step.features.map((feature, featureIndex) => (
                      <motion.li
                        key={featureIndex}
                        initial={{ opacity: 0, x: -10 }}
                        whileInView={{ opacity: 1, x: 0 }}
                        viewport={{ once: true }}
                        transition={{ delay: 0.5 + index * 0.2 + featureIndex * 0.1 }}
                        className="flex items-center gap-2"
                      >
                        <CheckCircle2 className="h-4 w-4 text-primary flex-shrink-0" />
                        <span>{feature}</span>
                      </motion.li>
                    ))}
                  </ul>
                </motion.div>
              ))}
            </div>
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.8 }}
            className="mt-16 text-center"
          >
            <Button size="lg" className="h-12 px-8 group relative overflow-hidden" asChild>
              <Link href="/dashboard">
                <span className="relative z-10 flex items-center">
                  Try it yourself
                  <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </span>
                <span className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
              </Link>
            </Button>
          </motion.div>
        </div>
      </section>

      {/* Testimonials */}
      <section ref={testimonialsRef} id="testimonials" className="py-24 relative">
        <div className="absolute inset-0 bg-grid-small-black/[0.03] dark:bg-grid-small-white/[0.03] -z-10" />

        <div className="container px-4 md:px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16 max-w-3xl mx-auto"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <Star className="h-3.5 w-3.5 mr-1 text-primary" />
                <span>Testimonials</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Trusted by businesses worldwide
            </h2>
            <p className="text-lg text-muted-foreground">See what our customers have to say about Ingestio.io</p>
          </motion.div>

          <Carousel className="w-full max-w-5xl mx-auto">
            <CarouselContent>
              {[
                {
                  name: "Sarah Johnson",
                  role: "Operations Manager, TechCorp",
                  quote:
                    "Ingestio.io has transformed our document processing workflow. What used to take hours now takes minutes, with better accuracy. The ROI was immediate and the customer support has been exceptional.",
                  avatar: "/landing/avatar1.jpg",
                },
                {
                  name: "Michael Chen",
                  role: "CFO, Global Logistics",
                  quote:
                    "The ROI was immediate. We've reduced our invoice processing costs by 75% and eliminated data entry errors completely. I can't imagine going back to our old manual processes.",
                  avatar: "/landing/avatar2.jpg",
                },
                {
                  name: "Emily Rodriguez",
                  role: "IT Director, Healthcare Solutions",
                  quote:
                    "The API integration was seamless. We connected Ingestio.io to our existing systems in less than a day. The documentation is excellent and the developer experience is top-notch.",
                  avatar: "/landing/avatar3.jpg",
                },
                {
                  name: "David Kim",
                  role: "CEO, Retail Innovations",
                  quote:
                    "Implementing Ingestio.io was one of the best business decisions we made last year. The accuracy of the data extraction is impressive, and it has freed up our team to focus on more strategic initiatives.",
                  avatar: "/landing/avatar4.jpg",
                },
              ].map((testimonial, index) => (
                <CarouselItem key={index} className="md:basis-1/1 lg:basis-1/2 pl-4">
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                  >
                    <Card className="overflow-hidden h-full">
                      <CardContent className="p-6">
                        <div className="flex flex-col h-full">
                          <div className="mb-4 flex">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <Star key={star} className="h-4 w-4 fill-yellow-500 text-yellow-500" />
                            ))}
                          </div>
                          <blockquote className="flex-1 mb-4 text-lg italic">"{testimonial.quote}"</blockquote>
                          <div className="flex items-center gap-4">
                            <Avatar>
                              <AvatarImage src={testimonial.avatar} alt={testimonial.name} />
                              <AvatarFallback className="bg-primary/10 text-primary">
                                {testimonial.name.charAt(0)}
                              </AvatarFallback>
                            </Avatar>
                            <div>
                              <div className="font-medium">{testimonial.name}</div>
                              <div className="text-sm text-muted-foreground">{testimonial.role}</div>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                </CarouselItem>
              ))}
            </CarouselContent>
            <div className="flex justify-center mt-8 gap-2">
              <CarouselPrevious className="relative static transform-none" />
              <CarouselNext className="relative static transform-none" />
            </div>
          </Carousel>

          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.5 }}
            className="mt-16 flex justify-center"
          >
            <Link
              href="#"
              className="group inline-flex items-center gap-1 text-sm font-medium text-primary hover:underline"
            >
              Read more customer stories
              <ArrowUpRight className="h-4 w-4 transition-transform group-hover:translate-x-0.5 group-hover:-translate-y-0.5" />
            </Link>
          </motion.div>
        </div>
      </section>

      {/* Pricing Section */}
      <section ref={pricingRef} id="pricing" className="py-24 bg-muted/30 dark:bg-muted/10 relative overflow-hidden">
        <div className="absolute top-0 right-0 -z-10 h-[600px] w-[600px] rounded-full bg-primary/5 blur-3xl" />
        <div className="absolute bottom-0 left-0 -z-10 h-[600px] w-[600px] rounded-full bg-blue-500/5 blur-3xl" />

        <div className="container px-4 md:px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16 max-w-3xl mx-auto"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <Sparkles className="h-3.5 w-3.5 mr-1 text-primary" />
                <span>Pricing</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Simple, transparent pricing
            </h2>
            <p className="text-lg text-muted-foreground">Choose the plan that's right for your business</p>
          </motion.div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: "Free",
                description: "Perfect for trying out the platform",
                price: "$0",
                period: "/month",
                note: "No credit card required",
                features: [
                  { included: true, text: "10 documents per month" },
                  { included: true, text: "Basic extraction features" },
                  { included: true, text: "JSON and CSV export" },
                  { included: false, text: "API access" },
                ],
                buttonText: "Get Started",
                buttonVariant: "outline" as const,
                popular: false,
              },
              {
                title: "Pro",
                description: "For professionals and small teams",
                price: "$29",
                period: "/month",
                note: "Billed monthly or $290/year",
                features: [
                  { included: true, text: "100 documents per month" },
                  { included: true, text: "Advanced extraction features" },
                  { included: true, text: "All export formats" },
                  { included: true, text: "API access" },
                ],
                buttonText: "Get Started",
                buttonVariant: "default" as const,
                popular: true,
              },
              {
                title: "Enterprise",
                description: "For organizations with high volume needs",
                price: "Custom",
                period: "",
                note: "Contact us for pricing",
                features: [
                  { included: true, text: "Unlimited documents" },
                  { included: true, text: "Custom extraction models" },
                  { included: true, text: "Dedicated support" },
                  { included: true, text: "SLA guarantees" },
                ],
                buttonText: "Contact Sales",
                buttonVariant: "outline" as const,
                popular: false,
              },
            ].map((plan, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Card
                  className={`border ${plan.popular ? "border-2 border-primary" : ""} relative bg-background h-full`}
                >
                  {plan.popular && (
                    <div className="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-primary text-primary-foreground px-4 py-1 rounded-full text-sm font-medium">
                      Most Popular
                    </div>
                  )}
                  <CardContent className="p-6 flex flex-col h-full">
                    <div className="mb-4">
                      <h3 className="text-xl font-bold">{plan.title}</h3>
                      <p className="text-muted-foreground">{plan.description}</p>
                    </div>
                    <div className="mb-6">
                      <div className="flex items-baseline">
                        <span className="text-4xl font-bold">{plan.price}</span>
                        <span className="text-muted-foreground ml-1">{plan.period}</span>
                      </div>
                      <p className="text-sm text-muted-foreground mt-1">{plan.note}</p>
                    </div>
                    <ul className="space-y-3 mb-6 flex-grow">
                      {plan.features.map((feature, featureIndex) => (
                        <motion.li
                          key={featureIndex}
                          initial={{ opacity: 0, x: -10 }}
                          whileInView={{ opacity: 1, x: 0 }}
                          viewport={{ once: true }}
                          transition={{ delay: 0.3 + index * 0.1 + featureIndex * 0.05 }}
                          className="flex items-center gap-2"
                        >
                          {feature.included ? (
                            <CheckCircle2 className="h-5 w-5 text-primary flex-shrink-0" />
                          ) : (
                            <Lock className="h-5 w-5 text-muted-foreground flex-shrink-0" />
                          )}
                          <span className={feature.included ? "" : "text-muted-foreground"}>{feature.text}</span>
                        </motion.li>
                      ))}
                    </ul>
                    <Button className="w-full mt-auto" variant={plan.buttonVariant} asChild>
                      <Link href={plan.title === "Enterprise" ? "/contact" : "/dashboard"}>{plan.buttonText}</Link>
                    </Button>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="mt-16 p-8 border rounded-xl bg-background"
          >
            <div className="grid md:grid-cols-2 gap-8 items-center">
              <div>
                <h3 className="text-2xl font-bold mb-2">Need a custom solution?</h3>
                <p className="text-muted-foreground mb-4">
                  Our enterprise plan includes custom features, dedicated support, and volume discounts.
                </p>
                <Button asChild className="group relative overflow-hidden">
                  <Link href="/contact">
                    <span className="relative z-10 flex items-center">
                      Contact our sales team
                      <ChevronRight className="ml-1 h-4 w-4 transition-transform group-hover:translate-x-1" />
                    </span>
                    <span className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
                  </Link>
                </Button>
              </div>
              <div className="space-y-4">
                {[
                  "Custom document templates and extraction models",
                  "Dedicated account manager and priority support",
                  "Custom integrations with your existing systems",
                  "On-premise deployment options available",
                ].map((feature, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -10 }}
                    whileInView={{ opacity: 1, x: 0 }}
                    viewport={{ once: true }}
                    transition={{ delay: 0.5 + index * 0.1 }}
                    className="flex items-center gap-3"
                  >
                    <CheckCircle2 className="h-5 w-5 text-primary flex-shrink-0" />
                    <span>{feature}</span>
                  </motion.div>
                ))}
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-24 relative">
        <div className="container px-4 md:px-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, margin: "-100px" }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16 max-w-3xl mx-auto"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <span>FAQ</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Frequently asked questions
            </h2>
            <p className="text-lg text-muted-foreground">Everything you need to know about Ingestio.io</p>
          </motion.div>

          <div className="max-w-3xl mx-auto">
            <ScrollArea className="h-[500px] pr-4">
              {[
                {
                  question: "How accurate is the data extraction?",
                  answer:
                    "Our AI-powered extraction achieves 99% accuracy for most document types. The system continuously learns and improves with each document processed. For critical data points, we provide confidence scores and validation tools to ensure maximum accuracy.",
                },
                {
                  question: "What document types are supported?",
                  answer:
                    "Ingestio.io supports a wide range of document types including invoices, receipts, contracts, forms, ID cards, passports, bank statements, and more. Our system can handle PDFs, images (JPG, PNG), scanned documents, and even handwritten notes with high accuracy.",
                },
                {
                  question: "How secure is my data?",
                  answer:
                    "Security is our top priority. All data is encrypted both in transit and at rest using industry-standard encryption. We are SOC 2 Type II compliant and GDPR compliant. Your documents are processed in isolated environments and can be automatically deleted after processing if required.",
                },
                {
                  question: "Can I integrate with my existing systems?",
                  answer:
                    "Yes, Ingestio.io offers robust integration options. We provide a RESTful API, webhooks, and pre-built connectors for popular platforms like Salesforce, QuickBooks, SAP, and more. Our developer documentation makes custom integrations straightforward.",
                },
                {
                  question: "What is the pricing model?",
                  answer:
                    "Our pricing is based on the number of documents processed per month. We offer a free tier for up to 10 documents, a Pro plan at $29/month for up to 100 documents, and custom Enterprise plans for higher volumes. There are no hidden fees or long-term commitments required.",
                },
                {
                  question: "How long does implementation take?",
                  answer:
                    "Most customers are up and running within minutes. Our intuitive interface requires minimal setup for standard document types. For custom templates or complex integrations, our team provides support to ensure a smooth implementation process, typically completed within days.",
                },
                {
                  question: "Is there a trial period?",
                  answer:
                    "Yes, we offer a 14-day free trial of our Pro plan with no credit card required. This gives you full access to all features so you can thoroughly test the platform with your own documents before making a decision.",
                },
                {
                  question: "What kind of support do you offer?",
                  answer:
                    "All plans include email support with 24-hour response times. Pro plans include chat support during business hours. Enterprise plans receive dedicated account managers, priority support with guaranteed response times, and optional phone support.",
                },
              ].map((faq, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                  className="mb-6"
                >
                  <div className="border-b pb-4 mb-4">
                    <h3 className="text-lg font-medium mb-2">{faq.question}</h3>
                    <p className="text-muted-foreground">{faq.answer}</p>
                  </div>
                </motion.div>
              ))}
            </ScrollArea>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 relative overflow-hidden">
        <div className="absolute inset-0 bg-primary/10 dark:bg-primary/20 -z-10" />
        <div className="absolute top-0 right-0 -z-10 h-[600px] w-[600px] rounded-full bg-primary/20 blur-3xl animate-pulse" />
        <div className="container px-4 md:px-6 relative">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
            className="max-w-3xl mx-auto text-center"
          >
            <Badge className="mb-4" variant="outline">
              <span className="inline-flex items-center">
                <Sparkles className="h-3.5 w-3.5 mr-1 text-primary" />
                <span>Get Started Today</span>
              </span>
            </Badge>
            <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl mb-4">
              Ready to transform your document workflow?
            </h2>
            <p className="text-lg text-muted-foreground mb-8">
              Join thousands of businesses that trust Ingestio.io for their document processing needs.
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Button size="lg" className="h-12 px-8 group relative overflow-hidden" asChild>
                <Link href="/dashboard">
                  <span className="relative z-10 flex items-center">
                    Start your free trial
                    <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                  </span>
                  <span className="absolute inset-0 bg-white/20 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500" />
                </Link>
              </Button>
              <Button size="lg" variant="outline" className="h-12 px-8 group" asChild>
                <Link href="/contact">
                  <span className="flex items-center">
                    Talk to sales
                    <ChevronRight className="ml-1 h-4 w-4 transition-transform group-hover:translate-x-1" />
                  </span>
                </Link>
              </Button>
            </div>
            <p className="mt-4 text-sm text-muted-foreground">No credit card required. 14-day free trial.</p>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t py-12 bg-muted/30 dark:bg-muted/10">
        <div className="container px-4 md:px-6">
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8">
            <div className="col-span-2 lg:col-span-2">
              <div className="flex items-center gap-2 mb-4">
                <div className="bg-primary p-1.5 rounded-lg">
                  <FileText className="h-5 w-5 text-primary-foreground" />
                </div>
                <span className="font-bold text-xl">
                  Ingestio<span className="text-primary">.io</span>
                </span>
              </div>
              <p className="text-muted-foreground mb-4 max-w-xs">
                AI-powered document processing that saves time, reduces errors, and streamlines your workflow.
              </p>
              <div className="flex gap-4">
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-5 w-5"
                  >
                    <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path>
                  </svg>
                </Link>
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-5 w-5"
                  >
                    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                    <rect width="4" height="12" x="2" y="9"></rect>
                    <circle cx="4" cy="4" r="2"></circle>
                  </svg>
                </Link>
                <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-5 w-5"
                  >
                    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
                  </svg>
                </Link>
              </div>
            </div>

            <div>
              <h3 className="font-medium mb-4">Product</h3>
              <ul className="space-y-2">
                <li>
                  <Link href="#features" className="text-muted-foreground hover:text-foreground transition-colors">
                    Features
                  </Link>
                </li>
                <li>
                  <Link href="#pricing" className="text-muted-foreground hover:text-foreground transition-colors">
                    Pricing
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    API
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Integrations
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="font-medium mb-4">Company</h3>
              <ul className="space-y-2">
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    About
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Blog
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Careers
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Contact
                  </Link>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="font-medium mb-4">Legal</h3>
              <ul className="space-y-2">
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Privacy
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Terms
                  </Link>
                </li>
                <li>
                  <Link href="#" className="text-muted-foreground hover:text-foreground transition-colors">
                    Security
                  </Link>
                </li>
              </ul>
            </div>
          </div>

          <div className="mt-12 pt-8 border-t text-center text-sm text-muted-foreground">
            <div className="flex items-center justify-center mb-4">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-8 w-8 rounded-full"
                      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
                    >
                      {theme === "dark" ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
                      <span className="sr-only">Toggle theme</span>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Toggle theme</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            <p>© {new Date().getFullYear()} Ingestio.io. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/api/documents/[id]/update/route.ts">
import { NextResponse } from "next/server";
import { writeFile } from "fs/promises";
import { join } from "path";
import { existsSync } from "fs";

// This is a temporary solution for demo purposes
const UPLOAD_DIR = join(process.cwd(), "uploads");

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    const documentId = id;
    const documentDir = join(UPLOAD_DIR, documentId);
    
    // Check if the document directory exists
    if (!existsSync(documentDir)) {
      return NextResponse.json(
        { error: "Document not found" },
        { status: 404 }
      );
    }
    
    // Get the request body
    const body = await request.json();
    const { extractedData } = body;
    
    if (!extractedData) {
      return NextResponse.json(
        { error: "No data provided" },
        { status: 400 }
      );
    }
    
    // Save the updated extracted data
    const extractedDataPath = join(documentDir, "extracted_data.json");
    await writeFile(extractedDataPath, JSON.stringify(extractedData));
    
    return NextResponse.json({
      message: "Document data updated successfully",
    });
  } catch (error) {
    console.error("Error updating document data:", error);
    return NextResponse.json(
      { error: "Failed to update document data" },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/schema/route.ts">
import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
const MODEL_ID = "gemini-2.0-flash";

const META_PROMPT = `
You are a JSON Schema expert. Your task is to create JSON schema baed on the user input. The schema will be used for extra data.  

You must also make sure:
- All fields in an object are set as required
- All objects must have properties defined
- Order matters! If the values are dependent or would require additional information, make sure to include the additional information in the description. Same counts for "reasoning" or "thinking" should come before the conclusion.
- $defs must be defined under the schema param
- Return only the schema JSON not more, use \`\`\`json to start and \`\`\` to end the JSON schema

Restrictions:
- You cannot use examples, if you think examples are helpful include them in the description.
- You cannot use default values, If you think default are helpful include them in the description.
- Top level cannot have a "title" property only "description"
- You cannot use $defs, directly in the schema, don't use any $defs and $ref in the schema. Directly define the schema in the properties.
- Never include a $schema
- The "type" needs to be a single value, no arrays

Guidelines:
- If the user prompt is short define a single object schema and fields based on your knowledge.
- If the user prompt is in detail about the data only use the data in the schema. Don't add more fields than the user asked for.

Examples:

Input: Cookie Recipes
Output: \`\`\`json
{
    "description": "Schema for a cookie recipe, including ingredients and quantities. The 'ingredients' array lists each ingredient along with its corresponding quantity and unit of measurement. The 'instructions' array provides a step-by-step guide to preparing the cookies. The order of instructions is important.",
    "type": "object",
    "properties": {
       "name": {
          "type": "string",
          "description": "The name of the cookie recipe."
       },
       "description": {
          "type": "string",
          "description": "A short description of the cookie, including taste and textures."
       },
       "ingredients": {
          "type": "array",
          "description": "A list of ingredients required for the recipe.",
          "items": {
             "type": "object",
             "description": "An ingredient with its quantity and unit.",
             "properties": {
                "name": {
                   "type": "string",
                   "description": "The name of the ingredient (e.g., flour, sugar, butter)."
                },
                "quantity": {
                   "type": "number",
                   "description": "The amount of the ingredient needed."
                },
                "unit": {
                   "type": "string",
                   "description": "The unit of measurement for the ingredient (e.g., cups, grams, teaspoons). Use abbreviations like 'tsp' for teaspoon and 'tbsp' for tablespoon."
                }
             },
             "required": [
                "name",
                "quantity",
                "unit"
             ]
          }
       },
       "instructions": {
          "type": "array",
          "description": "A sequence of steps to prepare the cookie recipe. The order of instructions matters.",
          "items": {
             "type": "string",
             "description": "A single instruction step."
          }
       }
    },
    "required": [
       "name",
       "description",
       "ingredients",
       "instructions"
    ]
}
\`\`\`

Input: Book with title, author, and publication year.
Output: \`\`\`json
{
    "type": "object",
    "properties": {
        "title": {
            "type": "string",
            "description": "The title of the book."
        },
        "author": {
            "type": "string",
            "description": "The author of the book."
        },
        "publicationYear": {
            "type": "integer",
            "description": "The year the book was published."
        }
    },
    "required": [
        "title",
        "author",
        "publicationYear"
    ],
}
\`\`\`

Input: {USER_PROMPT}`.trim();

export async function POST(request: Request) {
  try {
    // Get the prompt from the request body
    const { prompt } = await request.json();
    // Get the model
    const model = genAI.getGenerativeModel({ model: MODEL_ID });
    // Generate the content
    const result = await model.generateContent(
      META_PROMPT.replace("{USER_PROMPT}", prompt)
    );
    // Get the response
    const response = await result.response;
    // Remove markdown code block markers if present
    const jsonString = response
      .text()
      .replace(/^```json\n?/, "")
      .replace(/\n?```$/, "");
    // Return the schema
    return NextResponse.json({ schema: JSON.parse(jsonString) });
  } catch (error) {
    console.error("Error generating schema:", error);
    return NextResponse.json(
      { error: "Failed to generate schema" },
      { status: 500 }
    );
  }
}
</file>

<file path="components/dashboard/export-modal.tsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Download, FileJson, FileSpreadsheet, FileText } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";

interface ExportModalProps {
  documentName: string;
  documentId: string;
  trigger?: React.ReactNode;
}

export function ExportModal({
  documentName,
  documentId,
  trigger,
}: ExportModalProps) {
  const [selectedFormat, setSelectedFormat] = useState<
    "json" | "csv" | "xlsx" | null
  >(null);
  const [exporting, setExporting] = useState(false);

  const handleExport = () => {
    if (!selectedFormat) return;

    setExporting(true);
    // Simulate export process
    setTimeout(() => {
      setExporting(false);
      // Here you would trigger the actual download
      console.log(`Exporting ${documentName} as ${selectedFormat}`);
    }, 1500);
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        {trigger || (
          <Button>
            <Download className="mr-2 h-4 w-4" /> Export
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Export Document Data</DialogTitle>
          <DialogDescription>
            Choose a format to export the extracted data
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="space-y-2">
            <Label>Document</Label>
            <div className="flex items-center gap-2 rounded-md border p-2">
              <FileText className="h-5 w-5 text-muted-foreground" />
              <span className="text-sm font-medium">{documentName}</span>
            </div>
          </div>

          <Separator />

          <div className="space-y-2">
            <Label>Export Format</Label>
            <div className="grid grid-cols-3 gap-2">
              <Button
                variant={selectedFormat === "json" ? "default" : "outline"}
                className="flex flex-col items-center justify-center gap-2 h-auto py-4 bg-background"
                onClick={() => setSelectedFormat("json")}
              >
                <FileJson className="h-8 w-8" />
                <span className="text-xs">JSON</span>
              </Button>
              <Button
                variant={selectedFormat === "csv" ? "default" : "outline"}
                className="flex flex-col items-center justify-center gap-2 h-auto py-4 bg-background"
                onClick={() => setSelectedFormat("csv")}
              >
                <FileText className="h-8 w-8" />
                <span className="text-xs">CSV</span>
              </Button>
              <Button
                variant={selectedFormat === "xlsx" ? "default" : "outline"}
                className="flex flex-col items-center justify-center gap-2 h-auto py-4 bg-background"
                onClick={() => setSelectedFormat("xlsx")}
              >
                <FileSpreadsheet className="h-8 w-8" />
                <span className="text-xs">Excel</span>
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <Label>Export Options</Label>
            <div className="space-y-2">
              <div className="flex items-center justify-between rounded-md border p-2">
                <span className="text-sm">Include metadata</span>
                <Badge variant="outline">Enabled</Badge>
              </div>
              <div className="flex items-center justify-between rounded-md border p-2">
                <span className="text-sm">Include confidence scores</span>
                <Badge variant="outline">Enabled</Badge>
              </div>
            </div>
          </div>
        </div>
        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => setSelectedFormat(null)}
            disabled={exporting}
          >
            Cancel
          </Button>
          <Button
            onClick={handleExport}
            disabled={!selectedFormat || exporting}
          >
            {exporting ? (
              <>
                <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                Exporting...
              </>
            ) : (
              <>
                <Download className="mr-2 h-4 w-4" /> Download
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="components/dashboard/sidebar.tsx">
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import {
  ChevronLeft,
  ChevronRight,
  BarChart3,
  FileUp,
  History,
  Home,
  Settings,
  User,
  FileText,
} from "lucide-react";
import { Sheet, SheetContent } from "@/components/ui/sheet";

interface SidebarProps {
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
  className?: string;
}

export function Sidebar({ open, onOpenChange, className }: SidebarProps) {
  const pathname = usePathname();
  const [collapsed, setCollapsed] = useState(false);
  
  // Load collapsed state from localStorage on mount
  useEffect(() => {
    const savedState = localStorage.getItem("sidebarCollapsed");
    if (savedState !== null) {
      setCollapsed(savedState === "true");
    }
  }, []);
  
  // Save collapsed state to localStorage when it changes
  useEffect(() => {
    localStorage.setItem("sidebarCollapsed", String(collapsed));
  }, [collapsed]);
  
  const toggleSidebar = () => {
    setCollapsed(!collapsed);
    // Dispatch a custom event that layout components can listen for
    window.dispatchEvent(new CustomEvent("sidebarToggle", { 
      detail: { collapsed: !collapsed } 
    }));
  };

  const routes = [
    {
      href: "/dashboard",
      label: "Dashboard",
      icon: Home,
    },
    {
      href: "/dashboard/upload",
      label: "Upload Document",
      icon: FileUp,
    },
    {
      href: "/dashboard/history",
      label: "History",
      icon: History,
    },
    {
      href: "/dashboard/metrics",
      label: "Performance Metrics",
      icon: BarChart3,
    },
    {
      href: "/dashboard/profile",
      label: "Profile",
      icon: User,
    },
    {
      href: "/dashboard/settings",
      label: "Settings",
      icon: Settings,
    },
  ];
  
  return (
    <>
      {/* Mobile sidebar */}
      <Sheet open={open} onOpenChange={onOpenChange}>
        <SheetContent side="left" className="w-[240px] sm:max-w-none p-0">
          <div className="flex h-16 items-center border-b px-4">
            <Link href="/dashboard" className="flex items-center gap-2">
              <FileText className="h-6 w-6 text-primary" />
              <span className="font-bold">Ingestio.io</span>
            </Link>
          </div>
          <div className="py-4">
            <nav className="grid gap-1 px-2">
              {routes.map((route) => (
                <Link
                  key={route.href}
                  href={route.href}
                  onClick={() => onOpenChange && onOpenChange(false)}
                  className={cn(
                    "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground transition-colors",
                    pathname === route.href
                      ? "bg-accent text-accent-foreground"
                      : "text-muted-foreground"
                  )}
                >
                  <route.icon className="h-4 w-4" />
                  {route.label}
                </Link>
              ))}
            </nav>
          </div>
        </SheetContent>
      </Sheet>

      {/* Desktop sidebar */}
      <aside 
        className={cn(
          "fixed top-16 z-30 hidden h-[calc(100vh-4rem)] shrink-0 md:sticky md:block transition-all duration-300 ease-in-out border-r bg-background",
          collapsed ? "w-[var(--sidebar-width-collapsed)]" : "w-[var(--sidebar-width)]",
          className
        )}
      >
        <div className="flex h-14 items-center justify-between p-4 border-b">
          {!collapsed && 
            <Link href="/dashboard" className="flex items-center gap-2 font-semibold">
              <FileText className="h-5 w-5 text-primary" />
              <span>Ingestio.io</span>
            </Link>
          }
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={toggleSidebar} 
            className={collapsed ? "mx-auto" : "ml-auto"}
          >
            {collapsed ? <ChevronRight size={16} /> : <ChevronLeft size={16} />}
          </Button>
        </div>
        
        <nav className="flex-1 py-4">
          <div className="px-3">
            <div className="space-y-1">
              {routes.map((route) => (
                <Link
                  key={route.href}
                  href={route.href}
                  className={cn(
                    "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors",
                    "hover:bg-accent hover:text-accent-foreground",
                    pathname === route.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                    collapsed && "justify-center"
                  )}
                  title={collapsed ? route.label : undefined}
                >
                  <route.icon className="size-4" />
                  {!collapsed && <span>{route.label}</span>}
                </Link>
              ))}
            </div>
          </div>
        </nav>
      </aside>
    </>
  );
}
</file>

<file path="components/dashboard/user-nav.tsx">
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { LogOut, Settings, User } from "lucide-react";

export function UserNav() {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="/avatars/user.png" alt="User" />
            <AvatarFallback>U</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56 rounded-lg" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">User</p>
            <p className="text-xs leading-none text-muted-foreground">
              user@example.com
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem>
            <User className="mr-2 h-4 w-4" />
            <span>Profile</span>
          </DropdownMenuItem>
          <DropdownMenuItem>
            <Settings className="mr-2 h-4 w-4" />
            <span>Settings</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem>
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { cva } from "class-variance-authority"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"

const sidebarVariants = cva(
  "fixed inset-y-0 left-0 z-50 w-[var(--sidebar-width)] bg-sidebar-background transition-all duration-300 ease-in-out",
  {
    variants: {
      variant: {
        default: "",
        inset: "",
      },
      collapsible: {
        default: "data-[state=closed]:w-[var(--sidebar-width-collapsed)]",
        offcanvas: "sm:translate-x-0 data-[state=closed]:translate-x-[-100%]",
        icon: "data-[state=closed]:w-[var(--sidebar-width-collapsed)]",
      },
    },
    defaultVariants: {
      variant: "default",
      collapsible: "default",
    },
  }
)

type SidebarContextValue = {
  open: boolean
  setOpen: (open: boolean) => void
  toggle: () => void
  isMobile: boolean
}

const SidebarContext = React.createContext<SidebarContextValue>({
  open: true,
  setOpen: () => {},
  toggle: () => {},
  isMobile: false,
})

interface SidebarProviderProps {
  defaultOpen?: boolean
  children: React.ReactNode
  style?: React.CSSProperties
}

export function SidebarProvider({
  defaultOpen = true,
  children,
  style,
}: SidebarProviderProps) {
  const [open, setOpen] = React.useState(defaultOpen)
  const [isMobile, setIsMobile] = React.useState(false)

  React.useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }
    
    // Check on mount and window resize
    checkIsMobile()
    window.addEventListener("resize", checkIsMobile)

    // Save state to localStorage
    localStorage.setItem("sidebar_state", String(open))
    
    return () => {
      window.removeEventListener("resize", checkIsMobile)
    }
  }, [open])

  const toggle = React.useCallback(() => {
    setOpen(prev => !prev)
  }, [])

  return (
    <SidebarContext.Provider value={{ open, setOpen, toggle, isMobile }}>
      <div className="relative flex w-full min-w-0 max-w-full overflow-hidden justify-start" style={style}>
        {children}
      </div>
    </SidebarContext.Provider>
  )
}

export function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider")
  }
  return context
}

interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
  collapsible?: "default" | "offcanvas" | "icon"
  variant?: "default" | "inset"
}

export function Sidebar({
  className,
  collapsible = "default",
  variant = "default",
  ...props
}: SidebarProps) {
  const { open } = useSidebar()

  return (
    <div
      id="sidebar"
      role="navigation"
      aria-label="Main navigation"
      data-state={open ? "open" : "closed"}
      data-collapsible={collapsible}
      className={cn(sidebarVariants({ variant, collapsible }), className)}
      {...props}
    />
  )
}

interface SidebarInsetProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarInset({
  className,
  ...props
}: SidebarInsetProps) {
  const { open, isMobile } = useSidebar();
  
  // Add useEffect for debugging padding
  React.useEffect(() => {
    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
      // Log SidebarInset dimensions and styles
      const insetElement = document.querySelector('[data-state][data-sidebar-inset="true"]');
      if (insetElement) {
        const rect = insetElement.getBoundingClientRect();
        const style = window.getComputedStyle(insetElement);
        
        console.log('SidebarInset dimensions:', {
          width: rect.width,
          paddingLeft: style.paddingLeft,
          paddingRight: style.paddingRight,
          marginLeft: style.marginLeft,
          marginRight: style.marginRight,
          open,
          isMobile,
        });
      }
    }
  }, [open, isMobile]);
  
  return (
    <div
      className={cn(
        "flex flex-1 flex-col transition-all duration-300 ease-in-out",
        // Base padding for mobile
        isMobile ? "px-2" : "",
        // Specific padding for desktop based on sidebar state
        !isMobile && (open 
          ? "sm:pl-[var(--sidebar-width)] sm:pr-2 md:pr-4 lg:pr-6" 
          : "sm:pl-[var(--sidebar-width-collapsed)] sm:pr-2 md:pr-4 lg:pr-6"),
        className
      )}
      data-state={open ? "open" : "closed"}
      data-sidebar-inset="true"
      {...props}
    />
  );
}

interface SidebarHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarHeader({
  className,
  ...props
}: SidebarHeaderProps) {
  return (
    <div
      className={cn("flex h-[var(--header-height)] shrink-0 items-center px-4", className)}
      {...props}
    />
  )
}

interface SidebarContentProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarContent({
  className,
  ...props
}: SidebarContentProps) {
  return (
    <div
      className={cn("flex flex-1 flex-col overflow-hidden", className)}
      {...props}
    />
  )
}

interface SidebarFooterProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarFooter({
  className,
  ...props
}: SidebarFooterProps) {
  return (
    <div
      className={cn("shrink-0 px-4 py-4", className)}
      {...props}
    />
  )
}

interface SidebarGroupProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarGroup({
  className,
  ...props
}: SidebarGroupProps) {
  return (
    <div
      className={cn("py-2", className)}
      {...props}
    />
  )
}

interface SidebarGroupLabelProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarGroupLabel({
  className,
  ...props
}: SidebarGroupLabelProps) {
  return (
    <div
      className={cn("px-3 py-1 text-xs font-medium text-muted-foreground", className)}
      {...props}
    />
  )
}

interface SidebarGroupContentProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarGroupContent({
  className,
  ...props
}: SidebarGroupContentProps) {
  return (
    <div
      className={cn("", className)}
      {...props}
    />
  )
}

interface SidebarMenuProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarMenu({
  className,
  ...props
}: SidebarMenuProps) {
  return (
    <div
      data-slot="sidebar-menu"
      className={cn("space-y-1 px-1", className)}
      {...props}
    />
  )
}

interface SidebarMenuItemProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarMenuItem({
  className,
  ...props
}: SidebarMenuItemProps) {
  return (
    <div
      data-slot="sidebar-menu-item"
      className={cn("relative flex items-center w-full", className)}
      {...props}
    />
  )
}

interface SidebarMenuButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean
  tooltip?: string
  size?: "default" | "lg"
}

const sidebarMenuButtonVariants = cva(
  "flex w-full cursor-pointer items-center gap-2 rounded-md px-3 py-2 text-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=open]:bg-accent",
  {
    variants: {
      size: {
        default: "py-2",
        lg: "py-3",
      },
    },
    defaultVariants: {
      size: "default",
    },
  }
)

export function SidebarMenuButton({
  className,
  asChild = false,
  tooltip,
  size = "default",
  ...props
}: SidebarMenuButtonProps) {
  const Comp = asChild ? Slot : "button"
  
  return (
    <Comp
      data-slot="sidebar-menu-button"
      className={cn(
        sidebarMenuButtonVariants({ size }),
        "hover:bg-sidebar-accent/50",
        className
      )}
      title={tooltip}
      {...props}
    />
  )
}

interface SidebarMenuActionProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  showOnHover?: boolean
}

export function SidebarMenuAction({
  className,
  showOnHover,
  ...props
}: SidebarMenuActionProps) {
  return (
    <button
      className={cn(
        "size-6 rounded-sm p-0 text-muted-foreground hover:text-foreground",
        showOnHover && "opacity-0 group-hover/item:opacity-100",
        className
      )}
      {...props}
    />
  )
}

interface SidebarMenuSubProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarMenuSub({
  className,
  ...props
}: SidebarMenuSubProps) {
  return (
    <div
      className={cn("ml-6 space-y-1 pt-1", className)}
      {...props}
    />
  )
}

interface SidebarMenuSubItemProps extends React.HTMLAttributes<HTMLDivElement> {}

export function SidebarMenuSubItem({
  className,
  ...props
}: SidebarMenuSubItemProps) {
  return (
    <div
      className={cn("relative flex items-center", className)}
      {...props}
    />
  )
}

interface SidebarMenuSubButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean
}

export function SidebarMenuSubButton({
  className,
  asChild = false,
  ...props
}: SidebarMenuSubButtonProps) {
  const Comp = asChild ? Slot : "button"
  
  return (
    <Comp
      className={cn(
        "flex w-full items-center gap-2 rounded-md px-3 py-1.5 text-sm font-medium text-muted-foreground hover:bg-accent hover:text-accent-foreground",
        className
      )}
      {...props}
    />
  )
}

interface SidebarTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}

export function SidebarTrigger({
  className,
  ...props
}: SidebarTriggerProps) {
  const { toggle, open } = useSidebar()
  
  return (
    <button
      type="button"
      className={cn("size-6 rounded-md hover:bg-accent hover:text-accent-foreground", className)}
      onClick={toggle}
      aria-label={open ? "Collapse sidebar" : "Expand sidebar"}
      aria-expanded={open}
      aria-controls="sidebar"
      {...props}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className="size-4"
        aria-hidden="true"
      >
        <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
        <path d="M9 3v18" />
      </svg>
      <span className="sr-only">{open ? "Collapse sidebar" : "Expand sidebar"}</span>
    </button>
  )
}
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb 
      className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" 
      aria-label={props["aria-label"] || "Slider value"}
    />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/InteractiveDataField.tsx">
import { useState } from "react";
import { cn } from "@/lib/utils";

interface PositionData {
  page_number: number;
  bounding_box: [number, number, number, number];
}

interface FieldData {
  value: string | number;
  confidence: number;
  position?: PositionData;
}

interface InteractiveDataFieldProps {
  label: string;
  data: FieldData;
  path: string;
  onHover?: (path: string, position: PositionData | null) => void;
  onSelect?: (path: string, data: FieldData) => void;
  className?: string;
  showPositionInfo?: boolean;
}

export function InteractiveDataField({
  label,
  data,
  path,
  onHover,
  onSelect,
  className,
  showPositionInfo = true,
}: InteractiveDataFieldProps) {
  const [isHovered, setIsHovered] = useState(false);
  
  const handleMouseEnter = () => {
    setIsHovered(true);
    if (onHover && data.position) {
      onHover(path, data.position);
    }
  };
  
  const handleMouseLeave = () => {
    setIsHovered(false);
    if (onHover) {
      onHover(path, null);
    }
  };
  
  const handleClick = () => {
    if (onSelect) {
      onSelect(path, data);
    }
  };
  
  // Determine confidence color
  const getConfidenceColor = () => {
    if (data.confidence >= 0.8) return "bg-green-500";
    if (data.confidence >= 0.5) return "bg-yellow-500";
    return "bg-red-500";
  };
  
  const hasPosition = Boolean(data.position);
  
  return (
    <div
      id={`field-${path.replace(/\./g, '-')}`}
      className={cn(
        "group flex items-center justify-between p-2 rounded-md transition-colors",
        isHovered ? "bg-accent" : "hover:bg-accent/50",
        hasPosition ? "cursor-pointer" : "cursor-default",
        className
      )}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onClick={handleClick}
      tabIndex={0}
      role="button"
      aria-label={`${label}: ${data.value}`}
      onKeyDown={(e) => {
        if (e.key === "Enter" || e.key === " ") {
          handleClick();
        }
      }}
    >
      <div className="flex items-center gap-2">
        <div 
          className={cn(
            "w-2 h-2 rounded-full",
            getConfidenceColor()
          )}
          title={`Confidence: ${Math.round(data.confidence * 100)}%`}
        />
        <span className="font-medium">{label}:</span>
      </div>
      <div className="flex items-center gap-2">
        <span>{String(data.value)}</span>
        {showPositionInfo && data.position && (
          <div className="opacity-0 group-hover:opacity-100 transition-opacity">
            <span className="text-xs text-muted-foreground">
              (Page {data.position.page_number})
            </span>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="components/PdfHighlightLayer.tsx">
import React from "react";
import { cn } from "@/lib/utils";

interface HighlightRect {
  pageNumber: number;
  boundingBox: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
  color?: string;
  id: string;
}

interface PdfHighlightLayerProps {
  highlights: HighlightRect[];
  currentPage: number;
  containerWidth: number;
  containerHeight: number;
  scale: number;
  position?: { x: number, y: number };
  className?: string;
}

export function PdfHighlightLayer({
  highlights,
  currentPage,
  containerWidth,
  containerHeight,
  scale,
  position = { x: 0, y: 0 },
  className,
}: PdfHighlightLayerProps) {
  // Filter highlights for the current page
  const pageHighlights = highlights.filter(h => h.pageNumber === currentPage);
  
  return (
    <div 
      className={cn(
        "absolute inset-0 pointer-events-none",
        className
      )}
    >
      {pageHighlights.map((highlight) => {
        const [x1, y1, x2, y2] = highlight.boundingBox;
        
        // Convert percentage to pixels based on container dimensions
        const left = (x1 / 100) * containerWidth * scale;
        const top = (y1 / 100) * containerHeight * scale;
        const width = ((x2 - x1) / 100) * containerWidth * scale;
        const height = ((y2 - y1) / 100) * containerHeight * scale;
        
        return (
          <div
            key={highlight.id}
            className="absolute border-2 bg-primary/20 transition-all duration-200 animate-pulse"
            style={{
              left: `${left}px`,
              top: `${top}px`,
              width: `${width}px`,
              height: `${height}px`,
              borderColor: highlight.color || 'var(--primary)',
              backgroundColor: highlight.color ? `${highlight.color}20` : 'var(--primary-20)',
              animationDuration: '2s',
            }}
          />
        );
      })}
    </div>
  );
}
</file>

<file path="components/ResizablePanels.tsx">
import { useState, useRef, useEffect } from "react";
import { cn } from "@/lib/utils";

interface ResizablePanelsProps {
  leftPanel: React.ReactNode;
  rightPanel: React.ReactNode;
  defaultLeftWidth?: number; // percentage
  minLeftWidth?: number; // percentage
  maxLeftWidth?: number; // percentage
  storageKey?: string;
  className?: string;
}

export function ResizablePanels({
  leftPanel,
  rightPanel,
  defaultLeftWidth = 50,
  minLeftWidth = 30,
  maxLeftWidth = 70,
  storageKey = "panelSizes",
  className,
}: ResizablePanelsProps) {
  const [leftWidth, setLeftWidth] = useState(defaultLeftWidth);
  const containerRef = useRef<HTMLDivElement>(null);
  const isDragging = useRef(false);
  
  // Load saved panel sizes on mount
  useEffect(() => {
    if (storageKey) {
      const savedWidth = localStorage.getItem(storageKey);
      if (savedWidth !== null) {
        setLeftWidth(Number(savedWidth));
      }
    }
  }, [storageKey]);
  
  // Save panel sizes when they change
  useEffect(() => {
    if (storageKey) {
      localStorage.setItem(storageKey, String(leftWidth));
    }
  }, [leftWidth, storageKey]);
  
  const handleMouseDown = () => {
    isDragging.current = true;
    document.body.style.cursor = "col-resize";
    document.body.style.userSelect = "none";
  };
  
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isDragging.current || !containerRef.current) return;
      
      const containerRect = containerRef.current.getBoundingClientRect();
      const containerWidth = containerRect.width;
      const mouseX = e.clientX - containerRect.left;
      
      // Calculate new width as percentage
      let newLeftWidth = (mouseX / containerWidth) * 100;
      
      // Apply constraints
      newLeftWidth = Math.max(minLeftWidth, Math.min(maxLeftWidth, newLeftWidth));
      
      setLeftWidth(newLeftWidth);
    };
    
    const handleMouseUp = () => {
      isDragging.current = false;
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
    
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
    
    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
      document.removeEventListener("mouseup", handleMouseUp);
    };
  }, [minLeftWidth, maxLeftWidth]);
  
  return (
    <div 
      ref={containerRef}
      className={cn("flex h-full w-full overflow-hidden rounded-lg box-border", className)}
    >
      <div 
        className="overflow-y-auto overflow-x-hidden h-full box-border"
        style={{ width: `${leftWidth}%` }}
      >
        {leftPanel}
      </div>
      
      <div 
        className="w-1 bg-border hover:bg-primary/50 cursor-col-resize flex-shrink-0 h-full"
        onMouseDown={handleMouseDown}
      />
      
      <div 
        className="overflow-y-auto overflow-x-hidden h-full box-border"
        style={{ width: `${100 - leftWidth}%` }}
      >
        {rightPanel}
      </div>
    </div>
  );
}
</file>

<file path="Dockerfile">
# syntax=docker.io/docker/dockerfile:1

FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT=3000

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/config/next-config-js/output
ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "next.config.js"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/(dashboard)/dashboard/page.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { BarChart3, FileText, FileUp, History } from "lucide-react";
import Link from "next/link";

export default function DashboardPage() {
  return (
    <div className="flex flex-col gap-6 p-4 md:p-6 w-full max-w-full overflow-hidden">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight text-foreground dark:text-foreground">Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome to Ingestio.io! Streamline your workflow with automated data extraction.
        </p>
      </div>
      
      <div className="flex flex-col gap-4 md:flex-row">
        <Card className="flex-1 border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Documents</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">1</div>
            <p className="text-xs text-muted-foreground">
              +0% from last month
            </p>
          </CardContent>
        </Card>
        <Card className="flex-1 border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Processed Documents</CardTitle>
            <History className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">1</div>
            <p className="text-xs text-muted-foreground">
              100% completion rate
            </p>
          </CardContent>
        </Card>
        <Card className="flex-1 border-border">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Time Saved</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-card-foreground">3 min</div>
            <p className="text-xs text-muted-foreground">
              Estimated time savings
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4 border-border">
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>
              Get started with these common tasks
            </CardDescription>
          </CardHeader>
          <CardContent className="grid gap-4">
            <div className="flex items-center gap-4">
              <div className="rounded-full p-2 bg-primary/10">
                <FileUp className="h-5 w-5 text-primary" />
              </div>
              <div className="space-y-1 flex-1">
                <p className="text-sm font-medium leading-none text-card-foreground">
                  Upload a new document
                </p>
                <p className="text-sm text-muted-foreground">
                  Extract data from PDFs, invoices, and more
                </p>
              </div>
              <Button asChild>
                <Link href="/dashboard/upload">Upload</Link>
              </Button>
            </div>
            <div className="flex items-center gap-4">
              <div className="rounded-full p-2 bg-primary/10">
                <History className="h-5 w-5 text-primary" />
              </div>
              <div className="space-y-1 flex-1">
                <p className="text-sm font-medium leading-none text-card-foreground">
                  View document history
                </p>
                <p className="text-sm text-muted-foreground">
                  Access your previously processed documents
                </p>
              </div>
              <Button variant="outline" asChild className="border-border">
                <Link href="/dashboard/history">View</Link>
              </Button>
            </div>
            <div className="flex items-center gap-4">
              <div className="rounded-full p-2 bg-primary/10">
                <BarChart3 className="h-5 w-5 text-primary" />
              </div>
              <div className="space-y-1 flex-1">
                <p className="text-sm font-medium leading-none text-card-foreground">
                  Performance metrics
                </p>
                <p className="text-sm text-muted-foreground">
                  See detailed analytics about your usage
                </p>
              </div>
              <Button variant="outline" asChild className="border-border">
                <Link href="/dashboard/metrics">View</Link>
              </Button>
            </div>
          </CardContent>
        </Card>
        <Card className="col-span-3 border-border">
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
            <CardDescription>
              Your latest document processing activity
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              <div className="flex items-center">
                <div className="space-y-1 flex-1">
                  <p className="text-sm font-medium leading-none text-card-foreground">
                    Invoice-2023.pdf
                  </p>
                  <p className="text-xs text-muted-foreground">
                    Processed 2 hours ago
                  </p>
                </div>
                <Button variant="ghost" size="sm">
                  View
                </Button>
              </div>
              <div className="flex items-center">
                <div className="space-y-1 flex-1">
                  <p className="text-sm font-medium leading-none text-card-foreground">
                    No other recent activity
                  </p>
                  <p className="text-xs text-muted-foreground">
                    Upload a document to get started
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="app/(dashboard)/layout.tsx">
"use client";

import { useState, useEffect } from "react";
import { SidebarProvider, SidebarInset } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/dashboard/app-sidebar";
import { SiteHeader } from "@/components/dashboard/site-header";
import { useSidebar } from "@/components/ui/sidebar";

// This component adds equal spacing based on sidebar state
function DashboardContent({ children }: { children: React.ReactNode }) {
  const { open } = useSidebar();
  
  // Add useEffect to log padding and spacing information
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Log sidebar state
      console.log('Sidebar open state:', open);
      
      // Log container dimensions on initial render and sidebar state change
      const container = document.querySelector('.dashboard-container');
      if (container) {
        const containerRect = container.getBoundingClientRect();
        const computedStyle = window.getComputedStyle(container);
        
        console.log('Dashboard container dimensions:', {
          width: containerRect.width,
          paddingLeft: computedStyle.paddingLeft,
          paddingRight: computedStyle.paddingRight,
          marginLeft: computedStyle.marginLeft,
          marginRight: computedStyle.marginRight,
        });
      }
      
      // Log content padding
      const contentDiv = document.querySelector('.dashboard-container > div:nth-child(2)');
      if (contentDiv) {
        const computedStyle = window.getComputedStyle(contentDiv);
        console.log('Content padding:', {
          paddingLeft: computedStyle.paddingLeft,
          paddingRight: computedStyle.paddingRight,
        });
      }
    }
  }, [open]);
  
  return (
    <SidebarInset className="w-full max-w-full box-border">
      <div className="dashboard-container flex-1 min-w-0 w-full h-[calc(100vh-2rem)] overflow-hidden p-4 md:p-6 lg:p-8 box-border rounded-lg mx-auto my-0">
        <SiteHeader className="border-b border-border/50 mb-4" />
        <div 
          className="flex flex-1 flex-col h-[calc(100vh-140px)] overflow-y-auto overflow-x-hidden w-full"
          data-content-container="true"
        >
          {children}
        </div>
      </div>
    </SidebarInset>
  );
}

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [defaultOpen, setDefaultOpen] = useState(true);

  useEffect(() => {
    // Check localStorage for sidebar state
    const savedState = localStorage.getItem("sidebar_state");
    if (savedState !== null) {
      setDefaultOpen(savedState === "true");
    }
  }, []);

  return (
    <div className="theme-default theme-scaled dashboard-background min-h-screen w-full flex overflow-hidden box-border p-4">
      <SidebarProvider
        defaultOpen={defaultOpen}
        style={{
          "--sidebar-width": "calc(var(--spacing) * 60)",
          "--sidebar-width-collapsed": "calc(var(--spacing) * 14)",
          "--header-height": "60px",
        } as React.CSSProperties}
      >
        <AppSidebar variant="inset" />
        <DashboardContent>{children}</DashboardContent>
      </SidebarProvider>
    </div>
  );
}
</file>

<file path="app/api/documents/[id]/file/route.ts">
import { NextResponse } from "next/server";
import { readFile, readdir } from "fs/promises";
import { join } from "path";
import { existsSync } from "fs";

// This is a temporary solution for demo purposes
const UPLOAD_DIR = join(process.cwd(), "uploads");

// Get the content type for a file based on its extension
function getContentType(fileName: string): string {
  if (fileName.endsWith('.pdf')) return 'application/pdf';
  if (fileName.endsWith('.png')) return 'image/png';
  if (fileName.endsWith('.jpg') || fileName.endsWith('.jpeg')) return 'image/jpeg';
  return 'application/octet-stream';
}

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    const documentId = id;
    const documentDir = join(UPLOAD_DIR, documentId);
    
    // Check if the document directory exists
    if (!existsSync(documentDir)) {
      return NextResponse.json(
        { error: "Document not found" },
        { status: 404 }
      );
    }
    
    // Get the file from the document directory
    const files = await readdir(documentDir);
    if (files.length === 0) {
      return NextResponse.json(
        { error: "No files found for this document" },
        { status: 404 }
      );
    }
    
    // Filter for document files (PDF, PNG, JPG, JPEG)
    const docFiles = files.filter(file => 
      file.endsWith('.pdf') || 
      file.endsWith('.png') || 
      file.endsWith('.jpg') || 
      file.endsWith('.jpeg')
    );
    
    if (docFiles.length === 0) {
      return NextResponse.json(
        { error: "No document file found" },
        { status: 404 }
      );
    }
    
    const fileName = docFiles[0]; // Get the first document file
    const filePath = join(documentDir, fileName);
    
    // Read the file
    const fileBuffer = await readFile(filePath);
    
    // Return the file as a blob with appropriate content type
    const contentType = getContentType(fileName);
    
    return new NextResponse(fileBuffer, {
      headers: {
        "Content-Type": contentType,
        "Content-Disposition": `inline; filename="${fileName}"`,
      },
    });
  } catch (error) {
    console.error("Error fetching document file:", error);
    return NextResponse.json(
      { error: "Failed to fetch document file" },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/upload/route.ts">
import { NextResponse } from "next/server";
import { v4 as uuidv4 } from "uuid";
import { writeFile } from "fs/promises";
import { join } from "path";
import { mkdir } from "fs/promises";

// This is a temporary solution for demo purposes
// In a production environment, you would use a proper storage solution like Firebase Storage
const UPLOAD_DIR = join(process.cwd(), "uploads");

interface ExtractionOptions {
  includeConfidence: boolean;
  includePositions: boolean;
  detectDocumentType: boolean;
  temperature: number;
}

export async function POST(request: Request) {
  try {
    // Ensure the upload directory exists
    try {
      await mkdir(UPLOAD_DIR, { recursive: true });
    } catch (error) {
      console.error("Error creating upload directory:", error);
    }

    const formData = await request.formData();
    const file = formData.get("file") as File;
    const fileId = formData.get("fileId") as string || uuidv4();
    const extractionPrompt = formData.get("extractionPrompt") as string || "";
    
    console.log("Upload API - File ID:", fileId);
    
    // Get extraction options or use defaults
    let extractionOptions: ExtractionOptions = {
      includeConfidence: true,
      includePositions: false,
      detectDocumentType: true,
      temperature: 0.1
    };
    
    // Parse options if provided
    const optionsJson = formData.get("options") as string;
    if (optionsJson && optionsJson !== 'undefined') {
      try {
        extractionOptions = { ...extractionOptions, ...JSON.parse(optionsJson) };
      } catch (error) {
        console.error("Error parsing extraction options:", error);
      }
    }
    
    if (!file) {
      return NextResponse.json(
        { error: "No file provided" },
        { status: 400 }
      );
    }

    // Generate a unique ID for the document
    const documentId = uuidv4();
    
    // Create a directory for this document
    const documentDir = join(UPLOAD_DIR, documentId);
    await mkdir(documentDir, { recursive: true });
    
    // Save the file
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    const filePath = join(documentDir, file.name);
    await writeFile(filePath, buffer);
    
    // Save the extraction prompt if provided
    if (extractionPrompt && extractionPrompt.trim()) {
      const promptPath = join(documentDir, "extraction_prompt.txt");
      await writeFile(promptPath, extractionPrompt);
      console.log("Upload API - Saved extraction prompt to file:", promptPath);
    }
    
    // Save extraction options
    const optionsPath = join(documentDir, "extraction_options.json");
    await writeFile(optionsPath, JSON.stringify(extractionOptions, null, 2));
    console.log("Upload API - Saved extraction options to file:", optionsPath);
    
    // In a real application, you would also store metadata in a database
    // For now, we'll just return the document ID
    
    // Process the document with Gemini API (similar to the extract endpoint)
    // This would be done asynchronously in a production environment
    // You would use the extractionPrompt to guide the extraction process
    
    return NextResponse.json({ 
      documentId,
      message: "File uploaded successfully" 
    });
  } catch (error) {
    console.error("Error uploading file:", error);
    return NextResponse.json(
      { error: "Failed to upload file" },
      { status: 500 }
    );
  }
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/PdfViewerUrl.tsx">
"use client";

import { useCallback, useState, useEffect, useMemo, useRef } from "react";
import { pdfjs, Document, Page } from "react-pdf";
import "react-pdf/dist/esm/Page/AnnotationLayer.css";
import "react-pdf/dist/esm/Page/TextLayer.css";
import { useResizeObserver } from "@wojtekmaj/react-hooks";
import { AlertCircle } from "lucide-react";
import { debounce } from "lodash";

import type { PDFDocumentProxy } from "pdfjs-dist";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Button } from "./ui/button";
import { PdfHighlightLayer } from "./PdfHighlightLayer";

pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  "pdfjs-dist/build/pdf.worker.min.mjs",
  import.meta.url
).toString();

const options = {
  cMapUrl: "/cmaps/",
  standardFontDataUrl: "/standard_fonts/",
};

interface FieldLocation {
  page: number;
  coordinates?: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
}

interface HighlightRect {
  pageNumber: number;
  boundingBox: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
  color?: string;
  id: string;
}

interface PdfViewerUrlProps {
  url: string;
  zoomLevel?: number;
  onZoomChange?: (zoom: number) => void;
  highlightedField?: FieldLocation;
  highlights?: HighlightRect[];
  onPositionClick?: (pageNumber: number, position: [number, number]) => void;
  className?: string;
  dragMode?: boolean;
}

export default function PdfViewerUrl({ 
  url, 
  zoomLevel = 100,
  onZoomChange,
  highlightedField,
  highlights = [],
  onPositionClick,
  className,
  dragMode = false
}: PdfViewerUrlProps) {
  const [numPages, setNumPages] = useState<number>();
  const [containerRef, setContainerRef] = useState<HTMLElement | null>(null);
  const [containerWidth, setContainerWidth] = useState<number>();
  const [error, setError] = useState<Error | null>(null);
  const [zoom, setZoom] = useState(zoomLevel);
  const [pageRefs, setPageRefs] = useState<(HTMLDivElement | null)[]>([]);
  const [pageHeights, setPageHeights] = useState<number[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const pdfContainerRef = useRef<HTMLDivElement>(null);

  // Sync zoom level with parent component
  useEffect(() => {
    setZoom(zoomLevel);
  }, [zoomLevel]);

  // Update local zoom and notify parent
  const updateZoom = (newZoom: number) => {
    setZoom(newZoom);
    if (onZoomChange) {
      onZoomChange(newZoom);
    }
  };

  // Initialize page refs when numPages changes
  useEffect(() => {
    if (numPages) {
      setPageRefs(Array(numPages).fill(null));
    }
  }, [numPages]);

  // Add debounced resize observer
  const debouncedResize = useCallback(
    debounce((entries: ResizeObserverEntry[]) => {
      const [entry] = entries;
      if (entry) {
        setContainerWidth(entry.contentRect.width);
      }
    }, 100),
    []
  );

  useResizeObserver(containerRef, {}, debouncedResize);

  // Add effect to handle manual resize events
  useEffect(() => {
    const handleResize = debounce(() => {
      if (containerRef) {
        setContainerWidth(containerRef.clientWidth);
      }
    }, 100);
    
    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
      handleResize.cancel();
    };
  }, [containerRef]);

  async function onDocumentLoadSuccess(page: PDFDocumentProxy): Promise<void> {
    setError(null);
    setNumPages(page._pdfInfo.numPages);
    // Reset position and zoom on new document
    setPosition({ x: 0, y: 0 });
    setZoom(100);
  }

  function onDocumentLoadError(err: Error): void {
    console.error("Error loading PDF:", err);
    setError(err);
  }

  const handleZoomIn = () => {
    const newZoom = Math.min(400, zoom + 25);
    updateZoom(newZoom);
  };

  const handleZoomOut = () => {
    const newZoom = Math.max(25, zoom - 25);
    updateZoom(newZoom);
  };

  const handleResetView = () => {
    updateZoom(100);
    setPosition({ x: 0, y: 0 });
  };

  // Handle mouse down for dragging
  const handleMouseDown = (e: React.MouseEvent) => {
    // Don't initiate drag if in position selection mode and not in drag mode
    if (onPositionClick && !dragMode) return;
    
    setIsDragging(true);
    setDragStart({ x: e.clientX - position.x, y: e.clientY - position.y });
    
    // Prevent default behavior when dragging
    e.preventDefault();
  };

  // Handle mouse move for dragging
  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging) {
      setPosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  };

  // Handle mouse up to stop dragging
  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // Set a ref for a specific page - use useCallback to prevent recreation on every render
  const setPageRef = useCallback((index: number, ref: HTMLDivElement | null) => {
    if (!ref) return; // Skip null refs
    
    setPageRefs(prev => {
      // If the ref is the same, return the previous state to prevent unnecessary updates
      if (prev[index] === ref) {
        return prev;
      }
      
      // Create a new array with the updated ref
      const newRefs = [...prev];
      newRefs[index] = ref;
      return newRefs;
    });
  }, []);

  // Create a memoized array of callbacks for each page
  const refCallbacks = useMemo(() => {
    if (!numPages) return [];
    
    return Array.from({ length: numPages }, (_, index) => 
      (ref: HTMLDivElement | null) => setPageRef(index, ref)
    );
  }, [numPages, setPageRef]);

  // Update page heights when a page is rendered
  const handlePageRenderSuccess = (page: any, pageNumber: number) => {
    setPageHeights(prev => {
      const newHeights = [...prev];
      newHeights[pageNumber - 1] = page.height;
      return newHeights;
    });
  };

  // Scroll to highlighted field
  useEffect(() => {
    if (highlights.length > 0) {
      const highlight = highlights[0]; // Get the first highlight
      if (highlight && highlight.pageNumber) {
        // Set current page to the highlighted page
        setCurrentPage(highlight.pageNumber);
        
        // Scroll the page into view
        const pageIndex = highlight.pageNumber - 1;
        const pageRef = pageRefs[pageIndex];
        
        if (pageRef) {
          // Scroll the page into view with a small delay to prevent rapid re-renders
          const timer = setTimeout(() => {
            pageRef.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }, 100);
          
          return () => clearTimeout(timer);
        }
      }
    }
  }, [highlights, pageRefs]);

  // Add click handler for the text layer
  const handleTextLayerClick = (e: React.MouseEvent, pageNumber: number) => {
    if (!containerRef || !onPositionClick || isDragging || dragMode) return;
    
    const pageRef = pageRefs[pageNumber - 1];
    if (!pageRef) return;
    
    const pageRect = pageRef.getBoundingClientRect();
    const scale = zoom / 100;
    
    // Calculate click position as percentage of page dimensions, accounting for panning
    const offsetX = (e.clientX - pageRect.left - position.x / scale);
    const offsetY = (e.clientY - pageRect.top - position.y / scale);
    
    // Convert to percentage
    const x = (offsetX / (containerWidth! * scale)) * 100;
    const y = (offsetY / (pageHeights[pageNumber - 1] * scale)) * 100;
    
    // Ensure values are within bounds
    const boundedX = Math.max(0, Math.min(100, x));
    const boundedY = Math.max(0, Math.min(100, y));
    
    console.log(`Clicked at page ${pageNumber}, position: ${boundedX}%, ${boundedY}%`);
    
    // Notify parent component about the click position
    onPositionClick(pageNumber, [boundedX, boundedY]);
  };

  // Add global event listeners for dragging
  useEffect(() => {
    const handleGlobalMouseUp = () => {
      setIsDragging(false);
    };
    
    const handleGlobalMouseMove = (e: MouseEvent) => {
      if (isDragging && zoom > 100) {
        setPosition({
          x: e.clientX - dragStart.x,
          y: e.clientY - dragStart.y
        });
      }
    };
    
    window.addEventListener('mouseup', handleGlobalMouseUp);
    window.addEventListener('mousemove', handleGlobalMouseMove);
    
    return () => {
      window.removeEventListener('mouseup', handleGlobalMouseUp);
      window.removeEventListener('mousemove', handleGlobalMouseMove);
    };
  }, [isDragging, dragStart, zoom]);

  // Add wheel event for zooming 
  useEffect(() => {
    const handleWheel = (e: WheelEvent) => {
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault();
        const delta = -Math.sign(e.deltaY) * 10;
        const newZoom = Math.max(25, Math.min(400, zoom + delta));
        updateZoom(newZoom);
      }
    };
    
    containerRef?.addEventListener('wheel', handleWheel, { passive: false });
    
    return () => {
      containerRef?.removeEventListener('wheel', handleWheel);
    };
  }, [containerRef, zoom, updateZoom]);

  return (
    <div className={`flex flex-col h-full w-full box-border ${className || ''}`}>
      <div
        ref={setContainerRef}
        className="flex-1 overflow-y-auto overflow-x-hidden h-full w-full box-border"
      >
        {error ? (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>
              Failed to load PDF document. {error.message}
            </AlertDescription>
          </Alert>
        ) : (
          <div 
            ref={pdfContainerRef}
            className="h-full w-full box-border"
            style={{ 
              cursor: isDragging ? 'grabbing' : (dragMode ? 'grab' : 'default'),
              position: 'relative'
            }}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
          >
            <div style={{ 
              transform: `scale(${zoom / 100})`, 
              transformOrigin: 'top center',
              transition: isDragging ? 'none' : 'transform 0.1s ease-out',
              translate: `${position.x}px ${position.y}px`
            }}>
              <Document
                file={url}
                onLoadSuccess={onDocumentLoadSuccess}
                onLoadError={onDocumentLoadError}
                options={options}
                loading={<div className="text-center py-4">Loading PDF...</div>}
              >
                {Array.from(new Array(numPages), (_el, index) => {
                  const pageNumber = index + 1;
                  return (
                    <div 
                      key={`page_container_${pageNumber}`} 
                      className="relative mb-4"
                      ref={refCallbacks[index]}
                    >
                      <Page
                        key={`page_${pageNumber}`}
                        pageNumber={pageNumber}
                        width={containerWidth}
                        renderTextLayer={true}
                        renderAnnotationLayer={true}
                        onRenderSuccess={(page) => handlePageRenderSuccess(page, pageNumber)}
                      />
                      
                      {/* Add highlight layer for each page */}
                      <PdfHighlightLayer
                        highlights={highlights}
                        currentPage={pageNumber}
                        containerWidth={containerWidth || 0}
                        containerHeight={pageHeights[index] || 0}
                        scale={zoom / 100}
                        position={position}
                      />
                      
                      {/* Add a transparent overlay for click handling */}
                      <div 
                        className="absolute inset-0"
                        onClick={(e) => handleTextLayerClick(e, pageNumber)}
                        style={{ 
                          pointerEvents: onPositionClick && !isDragging && !dragMode ? 'auto' : 'none',
                          cursor: 'default'
                        }}
                      />
                    </div>
                  );
                })}
              </Document>
            </div>
          </div>
        )}
      </div>
      
      {/* Add page navigation controls */}
      {numPages && numPages > 1 && (
        <div className="flex items-center justify-between border-t p-2 mt-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
          >
            Previous
          </Button>
          <span className="text-sm">
            Page {currentPage} of {numPages}
          </span>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentPage(Math.min(numPages, currentPage + 1))}
            disabled={currentPage === numPages}
          >
            Next
          </Button>
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/ResultDisplay.tsx">
"use client";

import { Button } from "@/components/ui/button";
import { Braces, Copy, RotateCcw, ChevronDown, ChevronRight, Search, X } from "lucide-react";
import { useState, useMemo } from "react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";

interface FieldData {
  value: string | number;
  confidence: number;
  location?: {
    page: number;
    coordinates?: {
      x: number;
      y: number;
      width: number;
      height: number;
    };
  };
}

type ExtractedData = {
  [key: string]: FieldData | FieldData[] | { [key: string]: any };
};

interface ResultDisplayProps {
  result: ExtractedData;
  schema: string;
  onReset: () => void;
  onFieldHover?: (field: string, data: any) => void;
}

// Helper function to get confidence color based on score
const getConfidenceColor = (confidence: number) => {
  if (confidence >= 0.9) return "bg-green-100 text-green-800 hover:bg-green-200";
  if (confidence >= 0.7) return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200";
  return "bg-red-100 text-red-800 hover:bg-red-200";
};

// Helper function to format field names for display
const formatFieldName = (name: string) => {
  return name
    .replace(/_/g, " ")
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
};

export function ResultDisplay({ 
  result, 
  schema, 
  onReset,
  onFieldHover 
}: ResultDisplayProps) {
  const [copied, setCopied] = useState(false);
  const [schemaCopied, setSchemaCopied] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set());

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(result, null, 2));
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleSchemaCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(schema, null, 2));
    setSchemaCopied(true);
    setTimeout(() => setSchemaCopied(false), 2000);
  };

  const toggleSection = (path: string) => {
    const newExpandedSections = new Set(expandedSections);
    if (newExpandedSections.has(path)) {
      newExpandedSections.delete(path);
    } else {
      newExpandedSections.add(path);
    }
    setExpandedSections(newExpandedSections);
  };

  const expandAll = () => {
    const allPaths = getAllPaths(result);
    setExpandedSections(new Set(allPaths));
  };

  const collapseAll = () => {
    setExpandedSections(new Set());
  };

  // Get all possible paths in the data for expand/collapse all functionality
  const getAllPaths = (data: any, basePath = ""): string[] => {
    if (!data || typeof data !== "object") return [];
    
    let paths: string[] = [];
    
    Object.keys(data).forEach(key => {
      const currentPath = basePath ? `${basePath}.${key}` : key;
      paths.push(currentPath);
      
      if (data[key] && typeof data[key] === "object") {
        paths = [...paths, ...getAllPaths(data[key], currentPath)];
      }
    });
    
    return paths;
  };

  // Filter data based on search query
  const filteredData = useMemo(() => {
    if (!searchQuery.trim()) return result;
    
    const searchLower = searchQuery.toLowerCase();
    
    const filterObject = (obj: any): any => {
      if (!obj || typeof obj !== "object") return null;
      
      // For arrays
      if (Array.isArray(obj)) {
        const filteredArray = obj
          .map(item => filterObject(item))
          .filter(item => item !== null);
        return filteredArray.length > 0 ? filteredArray : null;
      }
      
      // For objects
      const filteredObj: any = {};
      let hasMatch = false;
      
      Object.entries(obj).forEach(([key, value]) => {
        const keyMatches = key.toLowerCase().includes(searchLower);
        
        // Check if value is a FieldData object with a matching value
        const valueMatches = 
          value && 
          typeof value === "object" && 
          "value" in value && 
          String(value.value).toLowerCase().includes(searchLower);
        
        if (keyMatches || valueMatches) {
          filteredObj[key] = value;
          hasMatch = true;
        } else if (typeof value === "object") {
          const filteredValue = filterObject(value);
          if (filteredValue !== null) {
            filteredObj[key] = filteredValue;
            hasMatch = true;
          }
        }
      });
      
      return hasMatch ? filteredObj : null;
    };
    
    return filterObject(result) || {};
  }, [result, searchQuery]);

  // Recursive component for rendering any data structure
  const DynamicDataRenderer = ({ data, path = "" }: { data: any; path?: string }) => {
    if (!data) return null;
    
    // Handle arrays
    if (Array.isArray(data)) {
      return (
        <div className="space-y-2">
          {data.map((item, index) => (
            <div key={index} className="pl-4 border-l-2 border-muted">
              <div className="text-sm font-medium text-muted-foreground mb-1">
                Item {index + 1}
              </div>
              <DynamicDataRenderer data={item} path={`${path}[${index}]`} />
            </div>
          ))}
        </div>
      );
    }
    
    // Handle objects
    if (typeof data === "object") {
      // Check if this is a field data object (with value and confidence)
      if ("value" in data && "confidence" in data) {
        const fieldData = data as FieldData;
        return (
          <div 
            className="flex items-center gap-2"
            onMouseEnter={() => onFieldHover && path && onFieldHover(path, fieldData)}
          >
            <span className="font-medium">{String(fieldData.value)}</span>
            <Badge 
              variant="outline" 
              className={cn("text-xs", getConfidenceColor(fieldData.confidence))}
            >
              {Math.round(fieldData.confidence * 100)}%
            </Badge>
            {fieldData.location && (
              <span className="text-xs text-muted-foreground">
                Page {fieldData.location.page}
              </span>
            )}
          </div>
        );
      }
      
      // Regular object with nested properties
      return (
        <div className="space-y-2">
          {Object.entries(data).map(([key, value]) => {
            const currentPath = path ? `${path}.${key}` : key;
            const isExpanded = expandedSections.has(currentPath);
            
            // Check if value is an object or array that needs collapsible treatment
            const isComplexValue = value && typeof value === "object";
            
            return (
              <div key={key} className="border-l-2 border-muted pl-4 py-1">
                {isComplexValue ? (
                  <Collapsible open={isExpanded}>
                    <CollapsibleTrigger 
                      onClick={() => toggleSection(currentPath)}
                      className="flex items-center gap-2 hover:bg-muted/50 rounded px-2 py-1 w-full text-left"
                    >
                      {isExpanded ? (
                        <ChevronDown className="w-4 h-4 text-muted-foreground" />
                      ) : (
                        <ChevronRight className="w-4 h-4 text-muted-foreground" />
                      )}
                      <span className="font-medium">{formatFieldName(key)}</span>
                    </CollapsibleTrigger>
                    <CollapsibleContent className="mt-1 ml-6">
                      <DynamicDataRenderer data={value} path={currentPath} />
                    </CollapsibleContent>
                  </Collapsible>
                ) : (
                  <div className="flex items-center justify-between px-2">
                    <span className="text-sm font-medium">{formatFieldName(key)}:</span>
                    <span className="text-sm">{String(value)}</span>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      );
    }
    
    // Primitive values
    return <span>{String(data)}</span>;
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold">Extracted Data</h2>
        <div className="space-x-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm">
                <Braces className="w-4 h-4 mr-2" />
                Schema
              </Button>
            </PopoverTrigger>
            <PopoverContent className="max-h-[500px] max-w-[700px] w-full overflow-y-auto">
              <div className="relative p-4 rounded-lg bg-muted">
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handleSchemaCopy}
                  className="absolute top-2 right-2"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  {schemaCopied ? "Copied!" : "Copy"}
                </Button>
                <pre className="overflow-auto">
                  <code className="text-xs">
                    {JSON.stringify(schema, null, 2)}
                  </code>
                </pre>
              </div>
            </PopoverContent>
          </Popover>
          <Button variant="outline" size="sm" onClick={handleCopy}>
            <Copy className="w-4 h-4 mr-2" />
            {copied ? "Copied!" : "Copy"}
          </Button>
          <Button variant="outline" size="sm" onClick={onReset}>
            <RotateCcw className="w-4 h-4 mr-2" />
            Process Another PDF
          </Button>
        </div>
      </div>
      
      <div className="flex items-center gap-2 mb-4">
        <div className="relative flex-1">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search extracted data..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-8"
          />
          {searchQuery && (
            <Button
              variant="ghost"
              size="sm"
              className="absolute right-1 top-1 h-7 w-7 p-0"
              onClick={() => setSearchQuery("")}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        <Button variant="outline" size="sm" onClick={expandAll}>
          Expand All
        </Button>
        <Button variant="outline" size="sm" onClick={collapseAll}>
          Collapse All
        </Button>
      </div>
      
      <div className="p-4 rounded-lg bg-muted overflow-auto max-h-[600px]">
        {Object.keys(filteredData).length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            {searchQuery ? "No results match your search" : "No data available"}
          </div>
        ) : (
          <DynamicDataRenderer data={filteredData} />
        )}
      </div>
      
      <div className="flex items-center gap-2 text-sm text-muted-foreground">
        <span>Confidence indicators:</span>
        <Badge variant="outline" className={getConfidenceColor(0.95)}>High (90-100%)</Badge>
        <Badge variant="outline" className={getConfidenceColor(0.8)}>Medium (70-89%)</Badge>
        <Badge variant="outline" className={getConfidenceColor(0.5)}>Low (0-69%)</Badge>
      </div>
    </div>
  );
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="app/(dashboard)/dashboard/upload/page.tsx">
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { FileUpload } from "@/components/FileUpload";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { FileIcon, FileText, Upload, AlertCircle, CheckCircle2, RotateCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";
import { motion, AnimatePresence } from "framer-motion";

// Define the stages of the upload process
enum UploadStage {
  UPLOAD = "upload",
  PROCESSING = "processing",
  COMPLETE = "complete",
  ERROR = "error"
}

interface ExtractionOptions {
  includeConfidence: boolean;
  includePositions: boolean;
  detectDocumentType: boolean;
  temperature: number;
}

export default function UploadPage() {
  const router = useRouter();
  const [file, setFile] = useState<File | null>(null);
  const [extractionPrompt, setExtractionPrompt] = useState<string>("");
  const [extractionOptions, setExtractionOptions] = useState<ExtractionOptions>({
    includeConfidence: true,
    includePositions: false,
    detectDocumentType: true,
    temperature: 0.1
  });
  const [loading, setLoading] = useState(false);
  const [uploadStage, setUploadStage] = useState<UploadStage>(UploadStage.UPLOAD);
  const [progress, setProgress] = useState(0);
  const [documentId, setDocumentId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileSelect = (selectedFile: File) => {
    setFile(selectedFile);
  };

  const handlePromptChange = (prompt: string, options?: ExtractionOptions) => {
    setExtractionPrompt(prompt);
    if (options && Object.keys(options).length > 0) {
      setExtractionOptions(options);
    }
  };

  // Simulate progress updates during processing
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (uploadStage === UploadStage.PROCESSING) {
      interval = setInterval(() => {
        setProgress(prev => {
          const newProgress = prev + Math.random() * 10;
          if (newProgress >= 100) {
            clearInterval(interval);
            return 100;
          }
          return newProgress;
        });
      }, 500);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [uploadStage]);

  // When progress reaches 100%, move to complete stage after a short delay
  useEffect(() => {
    if (progress === 100 && uploadStage === UploadStage.PROCESSING) {
      const timeout = setTimeout(() => {
        setUploadStage(UploadStage.COMPLETE);
      }, 500);
      
      return () => clearTimeout(timeout);
    }
  }, [progress, uploadStage]);

  const handleUpload = async () => {
    if (!file) {
      setError("Please select a file to upload");
      return;
    }

    try {
      setLoading(true);
      setUploadStage(UploadStage.PROCESSING);
      setProgress(0);
      
      // Create FormData for file upload
      const formData = new FormData();
      formData.append("file", file);
      
      // Add the extraction prompt if provided
      if (extractionPrompt) {
        formData.append("extractionPrompt", extractionPrompt);
      }
      
      // Add extraction options
      if (extractionOptions) {
        formData.append("options", JSON.stringify(extractionOptions));
      }
      
      // Upload the file to the server
      const uploadResponse = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      if (!uploadResponse.ok) {
        throw new Error("Failed to upload document");
      }

      const { documentId } = await uploadResponse.json();
      setDocumentId(documentId);
      
      // Update progress to almost complete
      setProgress(90);
      
      // Simulate a short delay before completing
      setTimeout(() => {
        setProgress(100);
      }, 500);
      
    } catch (error) {
      console.error("Error processing request:", error);
      setError(error instanceof Error ? error.message : "An unknown error occurred");
      setUploadStage(UploadStage.ERROR);
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setFile(null);
    setExtractionPrompt("");
    setLoading(false);
    setUploadStage(UploadStage.UPLOAD);
    setProgress(0);
    setError(null);
  };

  const handleGoToReview = () => {
    if (documentId) {
      router.push(`/dashboard/review/${documentId}`);
    }
  };

  const renderUploadStage = () => {
    return (
      <motion.div 
        className="upload-form-container space-y-8"
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -10 }}
      >
        <div className="upload-header flex flex-col items-center justify-center text-center mb-8">
          <h3 className="text-2xl font-bold mb-3">Upload Document</h3>
          <p className="text-muted-foreground mx-auto max-w-md">
            Upload a document for automated data extraction. We support PDF files and images up to 100MB.
          </p>
        </div>
        
        <Card className="upload-card border border-muted shadow-sm bg-card/50">
          <CardContent className="pt-6">
            <FileUpload 
              onFileSelect={handleFileSelect} 
              onPromptChange={handlePromptChange}
              initialPrompt={extractionPrompt}
            />
          </CardContent>
        </Card>
        
        <div className="extract-button-container flex justify-center mt-8">
          <Button 
            onClick={handleUpload} 
            disabled={!file || loading}
            size="lg"
            className="extract-data-button w-full max-w-md py-6 relative overflow-hidden group"
          >
            {loading ? (
              <>
                <RotateCw className="mr-2 h-5 w-5 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                <span className="relative z-10 flex items-center justify-center gap-2">
                  <Upload className="h-5 w-5" />
                  Extract Data
                </span>
                <span className="absolute inset-0 bg-primary/10 w-0 group-hover:w-full transition-all duration-300 ease-in-out" />
              </>
            )}
          </Button>
        </div>
      </motion.div>
    );
  };

  const renderProcessingStage = () => {
    return (
      <motion.div 
        className="processing-container space-y-10"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
      >
        <div className="flex flex-col items-center justify-center text-center">
          <div className="processing-icon-container w-20 h-20 rounded-full bg-primary/10 flex items-center justify-center mb-5">
            <RotateCw className="h-10 w-10 text-primary animate-spin" />
          </div>
          <h3 className="text-2xl font-bold mb-3">Processing Your Document</h3>
          <p className="text-muted-foreground mx-auto max-w-md">
            We're extracting data from your document. This may take a moment depending on the document size and complexity.
          </p>
        </div>
        
        <Card className="progress-card border border-muted shadow-sm bg-card/50 max-w-md mx-auto">
          <CardContent className="pt-6 pb-6">
            <div className="space-y-4">
              <div className="space-y-2">
                <Progress value={progress} className="h-2" />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>Extracting data...</span>
                  <span>{Math.round(progress)}%</span>
                </div>
              </div>
              
              <div className="space-y-5 pt-4">
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 flex items-center justify-center">
                    <CheckCircle2 className={`h-5 w-5 ${progress >= 30 ? "text-green-500" : "text-muted-foreground/30"}`} />
                  </div>
                  <span className={progress >= 30 ? "text-foreground" : "text-muted-foreground/70"}>
                    Document uploaded
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 flex items-center justify-center">
                    <CheckCircle2 className={`h-5 w-5 ${progress >= 60 ? "text-green-500" : "text-muted-foreground/30"}`} />
                  </div>
                  <span className={progress >= 60 ? "text-foreground" : "text-muted-foreground/70"}>
                    Document analyzed
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 flex items-center justify-center">
                    <CheckCircle2 className={`h-5 w-5 ${progress >= 90 ? "text-green-500" : "text-muted-foreground/30"}`} />
                  </div>
                  <span className={progress >= 90 ? "text-foreground" : "text-muted-foreground/70"}>
                    Data extraction complete
                  </span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    );
  };

  const renderCompleteStage = () => {
    return (
      <motion.div 
        className="success-container space-y-10"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
      >
        <div className="flex flex-col items-center justify-center text-center">
          <div className="success-icon-container w-20 h-20 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center mb-5">
            <CheckCircle2 className="h-10 w-10 text-green-500" />
          </div>
          <h3 className="text-2xl font-bold mb-3">Document Processed Successfully</h3>
          <p className="text-muted-foreground mx-auto max-w-md">
            Your document has been processed and the data has been extracted. You can now review and verify the extracted information.
          </p>
        </div>
        
        <div className="action-buttons-container flex flex-col sm:flex-row items-center justify-center gap-4 max-w-md mx-auto">
          <Button 
            onClick={handleGoToReview} 
            size="lg"
            className="w-full sm:w-auto font-medium"
          >
            <FileText className="mr-2 h-5 w-5" />
            Review Extracted Data
          </Button>
          
          <Button 
            onClick={handleReset} 
            variant="outline" 
            size="lg"
            className="w-full sm:w-auto font-medium"
          >
            <Upload className="mr-2 h-5 w-5" />
            Upload Another Document
          </Button>
        </div>
      </motion.div>
    );
  };

  const renderErrorStage = () => {
    return (
      <motion.div 
        className="error-container space-y-8"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
      >
        <div className="flex flex-col items-center justify-center text-center">
          <div className="error-icon-container w-20 h-20 rounded-full bg-red-100 dark:bg-red-900/30 flex items-center justify-center mb-5">
            <AlertCircle className="h-10 w-10 text-red-500" />
          </div>
          <h3 className="text-2xl font-bold mb-3">Processing Error</h3>
          <p className="text-muted-foreground mx-auto max-w-md">
            We encountered an error while processing your document. Please try again.
          </p>
        </div>
        
        <Alert variant="destructive" className="max-w-md mx-auto">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>
            {error || "An unknown error occurred while processing your document."}
          </AlertDescription>
        </Alert>
        
        <div className="flex justify-center">
          <Button 
            onClick={handleReset} 
            size="lg"
            className="w-full max-w-md"
          >
            Try Again
          </Button>
        </div>
      </motion.div>
    );
  };

  const renderContent = () => {
    switch (uploadStage) {
      case UploadStage.UPLOAD:
        return renderUploadStage();
      case UploadStage.PROCESSING:
        return renderProcessingStage();
      case UploadStage.COMPLETE:
        return renderCompleteStage();
      case UploadStage.ERROR:
        return renderErrorStage();
      default:
        return renderUploadStage();
    }
  };

  return (
    <div className="upload-page-container flex justify-center px-4 py-8">
      <div className="w-full max-w-3xl">
        <AnimatePresence mode="wait">
          {renderContent()}
        </AnimatePresence>
      </div>
    </div>
  );
}
</file>

<file path="components/DataVisualizer.tsx">
"use client";

import React, { useState, useMemo, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Search, X, Filter, SlidersHorizontal } from "lucide-react";
import { cn } from "@/lib/utils";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { InteractiveDataField } from "./InteractiveDataField";

// Types
interface PositionData {
  page_number: number;
  bounding_box: [number, number, number, number];
}

interface FieldData {
  value: string | number;
  confidence: number;
  position?: PositionData;
}

interface HighlightRect {
  pageNumber: number;
  boundingBox: [number, number, number, number];
  color?: string;
  id: string;
}

interface DataVisualizerProps {
  data: any;
  onHighlight?: (highlight: HighlightRect | null) => void;
  onSelect?: (path: string, value: any) => void;
  className?: string;
  selectedFieldPath?: string | null;
  confidenceThreshold?: number;
  options?: {
    includePositions?: boolean;
  };
}

// Helper functions
const getConfidenceColor = (confidence: number) => {
  if (confidence >= 0.9) return "bg-green-100 text-green-800 hover:bg-green-200";
  if (confidence >= 0.7) return "bg-yellow-100 text-yellow-800 hover:bg-yellow-200";
  return "bg-red-100 text-red-800 hover:bg-red-200";
};

const formatFieldName = (name: string) => {
  return name
    .replace(/_/g, " ")
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
};

// Flatten nested data for table view
const flattenData = (data: any, prefix = ""): Record<string, any>[] => {
  if (!data || typeof data !== "object") return [];

  const result: Record<string, any>[] = [];

  Object.entries(data).forEach(([key, value]) => {
    const currentKey = prefix ? `${prefix}.${key}` : key;

    if (value && typeof value === "object") {
      if ("value" in value && "confidence" in value) {
        // This is a field data object
        result.push({
          field: formatFieldName(key),
          value: value.value,
          confidence: value.confidence,
          path: currentKey,
          location: (value as FieldData).position,
        });
      } else if (Array.isArray(value)) {
        // Handle arrays
        value.forEach((item, index) => {
          const arrayResults = flattenData(item, `${currentKey}[${index}]`);
          arrayResults.forEach(item => {
            item.field = `${formatFieldName(key)} [${index + 1}] ${item.field}`;
            result.push(item);
          });
        });
      } else {
        // Handle nested objects
        const nestedResults = flattenData(value, currentKey);
        result.push(...nestedResults);
      }
    } else {
      // Handle primitive values
      result.push({
        field: formatFieldName(key),
        value: value,
        confidence: 1,
        path: currentKey,
      });
    }
  });

  return result;
};

export function DataVisualizer({ 
  data, 
  onHighlight, 
  onSelect,
  className,
  selectedFieldPath = null,
  confidenceThreshold = 0,
  options = { includePositions: true }
}: DataVisualizerProps) {
  const [viewMode, setViewMode] = useState<"tree" | "json">("tree");
  const [searchQuery, setSearchQuery] = useState("");
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set());
  const [minConfidence, setMinConfidence] = useState(confidenceThreshold);
  const [showConfidenceFilter, setShowConfidenceFilter] = useState(false);

  // Update minConfidence when confidenceThreshold changes
  useEffect(() => {
    setMinConfidence(confidenceThreshold);
  }, [confidenceThreshold]);

  // Filter data based on search query and confidence threshold
  const filteredData = useMemo(() => {
    if (!data) return {};
    
    const searchLower = searchQuery.toLowerCase();
    
    const filterObject = (obj: any): any => {
      if (!obj || typeof obj !== "object") return null;
      
      // For arrays
      if (Array.isArray(obj)) {
        const filteredArray = obj
          .map(item => filterObject(item))
          .filter(item => item !== null);
        return filteredArray.length > 0 ? filteredArray : null;
      }
      
      // For objects
      const filteredObj: any = {};
      let hasMatch = false;
      
      Object.entries(obj).forEach(([key, value]) => {
        const keyMatches = key.toLowerCase().includes(searchLower);
        
        // Check if value is a FieldData object with a matching value and sufficient confidence
        const isFieldData = 
          value && 
          typeof value === "object" && 
          "value" in value && 
          "confidence" in value;
          
        const valueMatches = 
          isFieldData &&
          String(value.value).toLowerCase().includes(searchLower);
          
        const hasEnoughConfidence = 
          !isFieldData || 
          (value as FieldData).confidence >= minConfidence;
        
        if ((keyMatches || valueMatches) && hasEnoughConfidence) {
          filteredObj[key] = value;
          hasMatch = true;
        } else if (typeof value === "object" && hasEnoughConfidence) {
          const filteredValue = filterObject(value);
          if (filteredValue !== null) {
            filteredObj[key] = filteredValue;
            hasMatch = true;
          }
        }
      });
      
      return hasMatch ? filteredObj : null;
    };
    
    return filterObject(data) || {};
  }, [data, searchQuery, minConfidence]);

  // Get all possible paths in the data for expand/collapse all functionality
  const getAllPaths = (data: any, basePath = ""): string[] => {
    if (!data || typeof data !== "object") return [];
    
    let paths: string[] = [];
    
    Object.keys(data).forEach(key => {
      const currentPath = basePath ? `${basePath}.${key}` : key;
      paths.push(currentPath);
      
      if (data[key] && typeof data[key] === "object") {
        paths = [...paths, ...getAllPaths(data[key], currentPath)];
      }
    });
    
    return paths;
  };

  const toggleSection = (path: string) => {
    const newExpandedSections = new Set(expandedSections);
    if (newExpandedSections.has(path)) {
      newExpandedSections.delete(path);
    } else {
      newExpandedSections.add(path);
    }
    setExpandedSections(newExpandedSections);
  };

  const expandAll = () => {
    const allPaths = getAllPaths(filteredData);
    setExpandedSections(new Set(allPaths));
  };

  const collapseAll = () => {
    setExpandedSections(new Set());
  };

  // Export data as CSV
  const exportAsCSV = () => {
    const flatData = flattenData(data);
    
    // Create CSV header
    const headers = ["Field", "Value", "Confidence"];
    let csv = headers.join(",") + "\n";
    
    // Add data rows
    flatData.forEach(item => {
      const row = [
        `"${item.field}"`,
        `"${item.value}"`,
        item.confidence
      ];
      csv += row.join(",") + "\n";
    });
    
    // Create and download the file
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "extracted_data.csv");
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Export data as JSON
  const exportAsJSON = () => {
    const jsonString = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonString], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "extracted_data.json");
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Handle field hover
  const handleFieldHover = (path: string, position: PositionData | null) => {
    if (position && onHighlight) {
      onHighlight({
        pageNumber: position.page_number,
        boundingBox: position.bounding_box,
        id: path,
      });
    } else if (onHighlight) {
      onHighlight(null);
    }
  };
  
  // Recursive renderer for nested data structures
  const renderField = (key: string, data: any, path: string) => {
    if (!data) return null;
    
    if (typeof data === 'object' && 'value' in data && 'confidence' in data) {
      // This is a field with value and confidence
      return (
        <InteractiveDataField
          key={key}
          label={key.replace(/_/g, " ")}
          data={data}
          path={path}
          onHover={handleFieldHover}
          onSelect={onSelect}
          showPositionInfo={options.includePositions !== false}
          className={path === selectedFieldPath ? "bg-primary/20 border border-primary" : ""}
        />
      );
    }
    
    if (Array.isArray(data)) {
      // Handle array of items
      return (
        <div key={key} className="space-y-2">
          <h3 className="font-medium capitalize">{key.replace(/_/g, " ")}</h3>
          <div className="pl-4 border-l-2 border-muted space-y-2">
            {data.map((item, index) => (
              <div key={index} className="space-y-2">
                {typeof item === 'object' ? (
                  Object.entries(item).map(([itemKey, itemValue]) => 
                    renderField(itemKey, itemValue, `${path}.${index}.${itemKey}`)
                  )
                ) : (
                  <div className="flex items-center justify-between p-2">
                    <span>Item {index + 1}</span>
                    <span>{String(item)}</span>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      );
    }
    
    if (typeof data === 'object') {
      // Handle nested objects
      return (
        <div key={key} className="space-y-2">
          <h3 className="font-medium capitalize">{key.replace(/_/g, " ")}</h3>
          <div className="pl-4 border-l-2 border-muted space-y-2">
            {Object.entries(data).map(([nestedKey, nestedValue]) => 
              renderField(nestedKey, nestedValue, `${path}.${nestedKey}`)
            )}
          </div>
        </div>
      );
    }
    
    // Handle primitive values
    return (
      <div key={key} className="flex items-center justify-between p-2">
        <span className="font-medium capitalize">{key.replace(/_/g, " ")}:</span>
        <span>{String(data)}</span>
      </div>
    );
  };
  
  // Render tree view
  const renderTreeView = () => {
    return (
      <div className="space-y-4">
        {Object.entries(filteredData).length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            {searchQuery || minConfidence > 0 ? "No results match your filters" : "No data available"}
          </div>
        ) : (
          Object.entries(filteredData).map(([key, value]) => 
            renderField(key, value, key)
          )
        )}
      </div>
    );
  };
  
  // Render table view
  const renderTableView = () => {
    const flatData = useMemo(() => flattenData(filteredData), [filteredData]);

    if (flatData.length === 0) {
      return (
        <div className="text-center py-8 text-muted-foreground">
          {searchQuery || minConfidence > 0 ? "No results match your filters" : "No data available"}
        </div>
      );
    }

    return (
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Field</TableHead>
            <TableHead>Value</TableHead>
            <TableHead>Confidence</TableHead>
            {options.includePositions !== false && <TableHead>Page</TableHead>}
          </TableRow>
        </TableHeader>
        <TableBody>
          {flatData.map((item, index) => (
            <TableRow 
              key={index}
              className={cn(
                "cursor-pointer hover:bg-muted/50",
                item.path === selectedFieldPath ? "bg-primary/20" : ""
              )}
              id={`field-${item.path?.replace(/\./g, '-')}`}
              onMouseEnter={() => onHighlight && item.location && onHighlight({
                pageNumber: item.location.page_number,
                boundingBox: item.location.bounding_box,
                id: item.path,
              })}
              onClick={() => onSelect && item.path && onSelect(item.path, item)}
            >
              <TableCell className="font-medium">{item.field}</TableCell>
              <TableCell>{String(item.value)}</TableCell>
              <TableCell>
                <Badge 
                  variant="outline" 
                  className={cn("text-xs", getConfidenceColor(item.confidence))}
                >
                  {Math.round(item.confidence * 100)}%
                </Badge>
              </TableCell>
              {options.includePositions !== false && (
                <TableCell>
                  {item.location?.page_number ? `Page ${item.location.page_number}` : "-"}
                </TableCell>
              )}
            </TableRow>
          ))}
        </TableBody>
      </Table>
    );
  };
  
  // Render JSON view
  const renderJsonView = () => {
    return (
      <pre className="overflow-auto text-xs p-4 bg-muted/50 rounded-md">
        <code>{JSON.stringify(filteredData, null, 2)}</code>
      </pre>
    );
  };

  return (
    <Card className={cn("h-full flex flex-col overflow-hidden rounded-none", className)}>
      <CardHeader className="px-4 py-3 flex flex-row items-center justify-between space-y-0">
        <CardTitle className="text-lg">Extracted Data</CardTitle>
        <div className="flex gap-2">
          <Popover open={showConfidenceFilter} onOpenChange={setShowConfidenceFilter}>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-8 gap-1">
                <SlidersHorizontal className="h-3.5 w-3.5" />
                <span>Filter</span>
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80" align="end">
              <div className="space-y-4">
                <div className="space-y-2">
                  <h4 className="font-medium text-sm">Confidence Filter</h4>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Min: {Math.round(minConfidence * 100)}%</span>
                    <input 
                      type="range" 
                      min="0" 
                      max="1" 
                      step="0.05" 
                      value={minConfidence}
                      onChange={(e) => setMinConfidence(parseFloat(e.target.value))}
                      className="w-2/3"
                    />
                  </div>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </CardHeader>
      <div className="px-4 pb-2 pt-0 flex items-center gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search fields..."
            className="pl-8 h-9"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          {searchQuery && (
            <Button
              variant="ghost"
              size="sm"
              className="absolute right-0.5 top-0.5 h-8 w-8 p-0"
              onClick={() => setSearchQuery("")}
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        
        <Tabs defaultValue="tree" value={viewMode} onValueChange={(v) => setViewMode(v as any)}>
          <TabsList className="h-9">
            <TabsTrigger value="tree" className="text-xs">Tree</TabsTrigger>
            <TabsTrigger value="json" className="text-xs">JSON</TabsTrigger>
          </TabsList>
        </Tabs>
      </div>
      
      <CardContent className="p-0 flex-1 overflow-y-auto max-h-[calc(100vh-300px)]">
        {data ? (
          <>
            {viewMode === "tree" && renderTreeView()}
            {viewMode === "json" && renderJsonView()}
          </>
        ) : (
          <div className="flex items-center justify-center h-full p-4 text-muted-foreground text-sm">
            No data available
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="components/providers.tsx">
"use client";

import { ReactNode } from "react";
import { ThemeProvider } from "./theme-provider";

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
    >
      {children}
    </ThemeProvider>
  );
}
</file>

<file path="app/api/extract/route.ts">
import { NextResponse } from "next/server";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
const MODEL_ID = "gemini-2.0-flash";

interface PositionData {
  page_number: number;
  bounding_box: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
}

interface FieldData {
  value: string | number;
  confidence?: number;
  position?: PositionData;
}

interface ExtractionOptions {
  includeConfidence?: boolean;
  includePositions?: boolean;
  detectDocumentType?: boolean;
  temperature?: number;
}

export async function POST(request: Request) {
  try {
    const formData = await request.formData();
    const file = formData.get("file") as File;
    const extractionPrompt = formData.get("extractionPrompt") as string;
    const optionsJson = formData.get("options") as string;
    
    // Add logging for prompt
    console.log("Extraction Prompt Received:", extractionPrompt);
    
    // Parse options with defaults - set includePositions to false by default
    const options: ExtractionOptions = optionsJson 
      ? JSON.parse(optionsJson) 
      : {
          includeConfidence: true,
          includePositions: false,
          detectDocumentType: true,
          temperature: 0.1
        };
    
    console.log("Extraction Options:", JSON.stringify(options));
    
    // Start timing for performance metrics
    const startTime = Date.now();

    // Convert PDF to base64
    const buffer = await file.arrayBuffer();
    const base64 = Buffer.from(buffer).toString("base64");

    const model = genAI.getGenerativeModel({
      model: MODEL_ID,
      generationConfig: {
        temperature: options.temperature ?? 0.0,
        maxOutputTokens: 8192,
        topP: 0.1,
        topK: 40,
      },
    });

    // Build a more flexible and comprehensive prompt
    let prompt = "";
    
    // First phase: Document type detection (if enabled)
    let documentType = null;
    if (options.detectDocumentType) {
      const detectionPrompt = `
        Analyze this document and determine its type (e.g., invoice, receipt, contract, resume, manifest, shipping order, purchase order, business card, email, etc.).
        Return only the document type as a single word or short phrase, without any additional text.
      `;
      
      try {
        const detectionResult = await model.generateContent([
          { text: detectionPrompt },
          {
            inlineData: {
              mimeType: "application/pdf",
              data: base64,
            },
          },
        ]);
        
        documentType = detectionResult.response.text().trim();
        console.log(`Detected document type: ${documentType}`);
      } catch (error) {
        console.error("Error detecting document type:", error);
        // Continue with extraction even if type detection fails
      }
    }
    
    // Build the main extraction prompt with improved line item handling
    prompt = `
      Extract ONLY the specific data requested in the prompt below from this document${documentType ? ` (detected as: ${documentType})` : ''}.
      
      USER'S REQUEST: ${extractionPrompt || "Extract all relevant information from this document."}
      
      IMPORTANT INSTRUCTIONS:
      1. Extract ONLY the data explicitly requested in the user's prompt above.
      2. Do NOT extract data that wasn't specifically mentioned in the user's prompt.
      3. For each piece of information you extract, include:
         ${options.includeConfidence ? "- A confidence score between 0 and 1" : ""}
         ${options.includePositions ? "- The location in the document as position data" : ""}
      
      4. For line items or tabular data (if specifically requested in the prompt):
         - Extract these as structured arrays of objects
         - Each line item should be a complete object with all its properties
         - Maintain proper parent-child relationships in the data structure
         - Example structure for line items:
           "line_items": [
             {
               "item_number": { "value": "1", ${options.includeConfidence ? '"confidence": 0.98,' : ''} },
               "description": { "value": "Widget XYZ", ${options.includeConfidence ? '"confidence": 0.95,' : ''} },
               "quantity": { "value": 5, ${options.includeConfidence ? '"confidence": 0.99,' : ''} },
               "unit_price": { "value": 10.99, ${options.includeConfidence ? '"confidence": 0.97,' : ''} },
               "total": { "value": 54.95, ${options.includeConfidence ? '"confidence": 0.96,' : ''} }
             }
           ]
      
      5. For nested information, maintain proper hierarchical structure
      
      Return the data in valid JSON format with this structure for each field:
      {
        "field_name": {
          "value": "extracted value"${options.includeConfidence ? ',\n          "confidence": 0.95' : ''}${options.includePositions ? ',\n          "position": {\n            "page_number": 1,\n            "bounding_box": [10.5, 20.3, 30.2, 25.1]\n          }' : ''}
        }
      }
      
      If a requested field is not found in the document, include it with a null value and low confidence score.
      
      Return ONLY the data in valid JSON format without any markdown code block markers or explanations.
    `;

    console.log("Full Extraction Prompt:", prompt);
    
    // Execute the extraction
    const result = await model.generateContent([
      { text: prompt },
      {
        inlineData: {
          mimeType: "application/pdf",
          data: base64,
        },
      },
    ]);

    const response = await result.response;
    
    // Clean up the response text by removing markdown code block markers
    const cleanText = response.text()
      .replace(/^```json\s*/, '')  // Remove opening ```json
      .replace(/^```\s*/, '')      // Remove opening ``` without json
      .replace(/```\s*$/, '')      // Remove closing ```
      .trim();                     // Remove any extra whitespace

    try {
      const extractedData = JSON.parse(cleanText);
      
      // Add debugging for the extracted data
      console.log("Requested fields:", extractionPrompt);
      console.log("Fields actually extracted:", Object.keys(extractedData));
      
      // Create metadata about the extraction process
      const metadata = {
        timestamp: new Date().toISOString(),
        model: MODEL_ID,
        documentType: documentType,
        prompt: extractionPrompt || "General extraction",
        processingTimeMs: Date.now() - startTime,
        options
      };
      
      return NextResponse.json({
        data: extractedData,
        metadata
      });
    } catch (parseError) {
      console.error("Error parsing extracted data:", parseError);
      return NextResponse.json(
        { 
          error: "Failed to parse extracted data",
          rawResponse: cleanText 
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error extracting data:", error);
    return NextResponse.json(
      { error: "Failed to extract data", details: (error as Error).message },
      { status: 500 }
    );
  }
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Providers } from "@/components/providers";
import { Toaster } from "@/components/ui/toaster";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Ingestio.io - Streamline Your Document Workflow",
  description: "Automated data extraction and document processing platform",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${inter.className} antialiased`}>
        <Providers>
          {children}
          <Toaster />
        </Providers>
      </body>
    </html>
  );
}
</file>

<file path="components/PdfViewer.tsx">
"use client";

import { useCallback, useState, useRef } from "react";
import { pdfjs, Document, Page } from "react-pdf";
import "react-pdf/dist/esm/Page/AnnotationLayer.css";
import "react-pdf/dist/esm/Page/TextLayer.css";
import { useResizeObserver } from "@wojtekmaj/react-hooks";
import { AlertCircle, ZoomIn, ZoomOut, MoveHorizontal } from "lucide-react";

import type { PDFDocumentProxy } from "pdfjs-dist";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "./ui/sheet";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Button } from "./ui/button";

pdfjs.GlobalWorkerOptions.workerSrc = new URL(
  "pdfjs-dist/build/pdf.worker.min.mjs",
  import.meta.url
).toString();

const options = {
  cMapUrl: "/cmaps/",
  standardFontDataUrl: "/standard_fonts/",
};

export default function PdfViewer({ file }: { file: File }) {
  const [numPages, setNumPages] = useState<number>();
  const [containerRef, setContainerRef] = useState<HTMLElement | null>(null);
  const [containerWidth, setContainerWidth] = useState<number>();
  const [error, setError] = useState<Error | null>(null);
  const [zoom, setZoom] = useState(100);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });

  // Add resize observer
  const onResize = useCallback<ResizeObserverCallback>((entries) => {
    const [entry] = entries;
    if (entry) {
      setContainerWidth(entry.contentRect.width);
    }
  }, []);

  useResizeObserver(containerRef, {}, onResize);

  async function onDocumentLoadSuccess(page: PDFDocumentProxy): Promise<void> {
    setError(null);
    setNumPages(page._pdfInfo.numPages);
    // Reset position and zoom on new document
    setPosition({ x: 0, y: 0 });
    setZoom(100);
  }

  function onDocumentLoadError(err: Error): void {
    console.error("Error loading PDF:", err);
    setError(err);
  }

  const handleZoomIn = () => {
    setZoom(prevZoom => Math.min(prevZoom + 25, 400));
  };

  const handleZoomOut = () => {
    setZoom(prevZoom => Math.max(prevZoom - 25, 25));
  };

  const handleResetView = () => {
    setZoom(100);
    setPosition({ x: 0, y: 0 });
  };

  // Handle mouse down for dragging
  const handleMouseDown = (e: React.MouseEvent) => {
    if (zoom > 100) {
      setIsDragging(true);
      setDragStart({ x: e.clientX - position.x, y: e.clientY - position.y });
    }
  };

  // Handle mouse move for dragging
  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging && zoom > 100) {
      setPosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  };

  // Handle mouse up to stop dragging
  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // Add global event listeners for dragging
  const handleGlobalMouseMove = useCallback((e: MouseEvent) => {
    if (isDragging && zoom > 100) {
      setPosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  }, [isDragging, dragStart, zoom]);

  const handleGlobalMouseUp = useCallback(() => {
    setIsDragging(false);
  }, []);

  return (
    <Sheet>
      <SheetTrigger className="h-10 rounded-lg px-4 py-2 border-input bg-background border-2 hover:bg-accent hover:text-accent-foreground">
        Preview
      </SheetTrigger>
      <SheetContent side="bottom">
        <SheetHeader>
          <SheetTitle>{file.name}</SheetTitle>
        </SheetHeader>
        <div className="flex items-center justify-end gap-2 mb-2">
          <Button variant="outline" size="icon" onClick={handleZoomOut}>
            <ZoomOut className="h-4 w-4" />
          </Button>
          <span className="text-sm">{zoom}%</span>
          <Button variant="outline" size="icon" onClick={handleZoomIn}>
            <ZoomIn className="h-4 w-4" />
          </Button>
          <Button variant="outline" size="sm" onClick={handleResetView}>
            <MoveHorizontal className="h-4 w-4 mr-1" />
            Reset View
          </Button>
        </div>
        <div
          ref={setContainerRef}
          className="max-w-2xl mx-auto mt-2 max-h-[calc(100vh-10rem)] overflow-y-auto"
          style={{ 
            cursor: isDragging ? 'grabbing' : (zoom > 100 ? 'grab' : 'default')
          }}
        >
          {error ? (
            <Alert variant="destructive" className="mb-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>
                Failed to load PDF document. {error.message}
              </AlertDescription>
            </Alert>
          ) : (
            <div
              style={{ position: 'relative' }}
              onMouseDown={handleMouseDown}
              onMouseMove={handleMouseMove}
              onMouseUp={handleMouseUp}
            >
              <div
                style={{ 
                  transform: `scale(${zoom / 100})`,
                  transformOrigin: 'top center',
                  transition: isDragging ? 'none' : 'transform 0.1s ease-out',
                  translate: `${position.x}px ${position.y}px`
                }}
              >
                <Document
                  file={file}
                  onLoadSuccess={onDocumentLoadSuccess}
                  onLoadError={onDocumentLoadError}
                  options={options}
                  loading={<div className="text-center py-4">Loading PDF...</div>}
                >
                  {Array.from(new Array(numPages), (_el, index) => (
                    <Page
                      key={`page_${index + 1}`}
                      pageNumber={index + 1}
                      width={containerWidth}
                      renderTextLayer={true}
                      renderAnnotationLayer={true}
                    />
                  ))}
                </Document>
              </div>
            </div>
          )}
        </div>
      </SheetContent>
    </Sheet>
  );
}
</file>

<file path="components/PromptInput.tsx">
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Wand2, Settings } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Separator } from "@/components/ui/separator";

interface ExtractionOptions {
  includeConfidence: boolean;
  includePositions: boolean;
  detectDocumentType: boolean;
  temperature: number;
}

interface PromptInputProps {
  onSubmit: (prompt: string, options: ExtractionOptions) => void;
  file: File | null;
}

export function PromptInput({ onSubmit, file }: PromptInputProps) {
  const [prompt, setPrompt] = useState("");
  const [options, setOptions] = useState<ExtractionOptions>({
    includeConfidence: true,
    includePositions: false,
    detectDocumentType: true,
    temperature: 0.0
  });

  useEffect(() => {
    if (prompt.trim()) {
      onSubmit(prompt.trim(), options);
    }
  }, [prompt, options, onSubmit]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (prompt.trim()) {
      onSubmit(prompt.trim(), options);
    }
  };

  const updateOption = (key: keyof ExtractionOptions, value: boolean | number) => {
    setOptions(prev => ({ ...prev, [key]: value }));
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 rounded-lg">
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <p className="text-sm font-medium text-foreground">
            Specify EXACTLY what information you want to extract from the document. Only this information will be extracted.
          </p>
          
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="ghost" size="sm" className="hover:bg-secondary/50">
                <Settings className="h-4 w-4 mr-2" />
                Extraction Options
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80 bg-background/90 backdrop-blur-sm border-secondary">
              <div className="space-y-4">
                <h4 className="font-medium">Extraction Settings</h4>
                <Separator />
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="confidence">Include Confidence Scores</Label>
                    <p className="text-xs text-muted-foreground">
                      Add confidence values for each extracted field
                    </p>
                  </div>
                  <Switch 
                    id="confidence" 
                    checked={options.includeConfidence}
                    onCheckedChange={(checked) => updateOption("includeConfidence", checked)}
                  />
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="positions">Include Position Data</Label>
                    <p className="text-xs text-muted-foreground">
                      Add location bounding boxes for each field
                    </p>
                  </div>
                  <Switch 
                    id="positions" 
                    checked={options.includePositions}
                    onCheckedChange={(checked) => updateOption("includePositions", checked)}
                  />
                </div>
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label htmlFor="doctype">Detect Document Type</Label>
                    <p className="text-xs text-muted-foreground">
                      Automatically identify document type
                    </p>
                  </div>
                  <Switch 
                    id="doctype" 
                    checked={options.detectDocumentType}
                    onCheckedChange={(checked) => updateOption("detectDocumentType", checked)}
                  />
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="temperature">AI Temperature: {options.temperature}</Label>
                  </div>
                  <Slider
                    id="temperature"
                    min={0}
                    max={1}
                    step={0.1}
                    value={[options.temperature]}
                    onValueChange={(value) => updateOption("temperature", value[0])}
                  />
                  <p className="text-xs text-muted-foreground">
                    Lower values are more precise, higher values more creative
                  </p>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </div>

      <Textarea
        id="prompt"
        className="min-h-[100px] border-secondary resize-none"
        placeholder="Be specific about exactly what you want to extract, for example:
- Extract only the name of the sender and recipient from this email
- Extract just the invoice number, date, and total amount
- Extract only the shipping address and order number from this receipt"
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
      />
    </form>
  );
}
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        "sidebar-background": "var(--sidebar-background)",
        "sidebar-foreground": "var(--sidebar-foreground)",
        "sidebar-muted-foreground": "var(--sidebar-muted-foreground)",
        "sidebar-accent": "var(--sidebar-accent)",
        "sidebar-accent-foreground": "var(--sidebar-accent-foreground)",
      },
      backgroundImage: {
        "grid-small-black":
          "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='5' height='5' viewBox='0 0 5 5'%3E%3Cpath fill='%23000000' fill-opacity='0.4' d='M1 1h1v1H1V1zm3 0h1v1H4V1z'/%3E%3C/svg%3E\")",
        "grid-small-white":
          "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='5' height='5' viewBox='0 0 5 5'%3E%3Cpath fill='%23FFFFFF' fill-opacity='0.4' d='M1 1h1v1H1V1zm3 0h1v1H4V1z'/%3E%3C/svg%3E\")",
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
        large: "var(--radius-large)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        pulse: {
          "0%, 100%": { opacity: 1 },
          "50%": { opacity: 0.8 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        pulse: "pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="app/(dashboard)/dashboard/review/[id]/page.tsx">
"use client";

import { useState, useEffect, use } from "react";
import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  AlertCircle, 
  Check, 
  Download, 
  Edit, 
  Eye, 
  FileText, 
  Save, 
  ZoomIn, 
  ZoomOut,
  RotateCw,
  Trash2,
  Plus,
  AlertTriangle
} from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import PdfViewer from "@/components/PdfViewer";
import PdfViewerUrl from "@/components/PdfViewerUrl";
import { useToast } from "@/components/ui/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ResizablePanels } from "@/components/ResizablePanels";
import { DataVisualizer } from "@/components/DataVisualizer";
import DocumentViewer from "@/components/DocumentViewer";

interface PageProps {
  params: {
    id: string;
  };
}

// Define types for our data structure
interface FieldData {
  value: string | number;
  confidence: number;
  position?: {
    page_number: number;
    bounding_box: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
  };
}

interface HighlightRect {
  pageNumber: number;
  boundingBox: [number, number, number, number];
  color?: string;
  id: string;
}

type ExtractedData = {
  [key: string]: FieldData | FieldData[] | { [key: string]: any };
};

interface ExtractionMetadata {
  timestamp: string;
  model: string;
  prompt: string;
  processingTimeMs: number;
  options?: {
    includePositions?: boolean;
  };
}

export default function ReviewPage({ params }: PageProps) {
  const { id } = params;
  const documentId = id;
  const { toast } = useToast();
  const [editMode, setEditMode] = useState(false);
  const [confirmed, setConfirmed] = useState(false);
  const [exportFormat, setExportFormat] = useState("json");
  const [showExportDialog, setShowExportDialog] = useState(false);
  const [zoomLevel, setZoomLevel] = useState(100);
  const [isLoading, setIsLoading] = useState(true);
  const [extractedData, setExtractedData] = useState<ExtractedData | null>(null);
  const [extractionMetadata, setExtractionMetadata] = useState<ExtractionMetadata | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [hoveredField, setHoveredField] = useState<string | null>(null);
  const [hoveredFieldData, setHoveredFieldData] = useState<any | null>(null);
  const [confidenceThreshold, setConfidenceThreshold] = useState(0);
  const [includeMetadata, setIncludeMetadata] = useState(true);
  const [currentHighlight, setCurrentHighlight] = useState<HighlightRect | null>(null);
  const [selectedFieldPath, setSelectedFieldPath] = useState<string | null>(null);

  // Listen for sidebar toggle events
  useEffect(() => {
    const handleSidebarToggle = (e: CustomEvent) => {
      setSidebarCollapsed(e.detail.collapsed);
      
      // Trigger a resize event to ensure PDF viewer adjusts
      window.dispatchEvent(new Event('resize'));
    };
    
    window.addEventListener("sidebarToggle", handleSidebarToggle as EventListener);
    
    // Check localStorage on mount
    const savedState = localStorage.getItem("sidebarCollapsed");
    if (savedState !== null) {
      setSidebarCollapsed(savedState === "true");
    }
    
    return () => {
      window.removeEventListener("sidebarToggle", handleSidebarToggle as EventListener);
    };
  }, []);

  // Fetch document data
  useEffect(() => {
    const fetchDocumentData = async () => {
      try {
        setIsLoading(true);
        
        if (!documentId) {
          throw new Error("Invalid document ID");
        }
        
        const response = await fetch(`/api/documents/${documentId}`);
        
        if (!response.ok) {
          throw new Error("Failed to fetch document data");
        }
        
        const data = await response.json();
        
        if (!data || !data.extractedData) {
          throw new Error("No extracted data found");
        }
        
        setExtractedData(data.extractedData);
        setExtractionMetadata(data.metadata);
        setFileName(data.fileName);
        setPdfUrl(`/api/documents/${documentId}/file`);
      } catch (error) {
        console.error("Error fetching document data:", error);
        toast({
          title: "Error",
          description: "Failed to fetch document data. Please try again.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchDocumentData();
  }, [documentId, toast]);

  const handleConfirm = async () => {
    try {
      // Save the data to the backend
      const response = await fetch(`/api/documents/${documentId}/update`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          extractedData,
          metadata: extractionMetadata
        }),
      });
      
      if (!response.ok) {
        throw new Error("Failed to save data");
      }
      
      setEditMode(false);
      setConfirmed(true);
      
      toast({
        title: "Success",
        description: "Document data confirmed successfully.",
        variant: "default",
      });
    } catch (error) {
      console.error("Error confirming document:", error);
      toast({
        title: "Error",
        description: "Failed to confirm document data. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleExport = () => {
    if (!extractedData) return;
    
    if (exportFormat === "json") {
      const dataToExport = includeMetadata 
        ? { data: extractedData, metadata: extractionMetadata }
        : extractedData;
        
      const jsonString = JSON.stringify(dataToExport, null, 2);
      const blob = new Blob([jsonString], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.setAttribute("href", url);
      link.setAttribute("download", `document_${documentId}.json`);
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } else {
      // For other formats, we'll just show a toast for now
      toast({
        title: "Export Initiated",
        description: `Exporting data as ${exportFormat.toUpperCase()}...`,
        variant: "default",
      });
    }
    
    setShowExportDialog(false);
  };

  const handleFieldHover = (path: string, data: any) => {
    setHoveredField(path);
    setHoveredFieldData(data);
    
    // If the data has location information, we could highlight it in the PDF viewer
    // This would require additional implementation in the PdfViewerUrl component
  };

  const handleFieldSelect = (path: string, data: any) => {
    // Set the selected field path
    setSelectedFieldPath(path);
    
    // If the data has position information, highlight it in the PDF viewer
    if (data.position && extractionMetadata?.options?.includePositions !== false) {
      setCurrentHighlight({
        pageNumber: data.position.page_number,
        boundingBox: data.position.bounding_box,
        id: path,
        color: '#3b82f6' // Use a different color for selected highlights
      });
    }
    
    // Handle field selection - could be used for editing specific fields
    if (editMode) {
      // Implement field editing logic here
      toast({
        title: "Field Selected",
        description: `Selected field: ${path}`,
        variant: "default",
      });
    }
  };

  // Handle highlight events from the data visualizer
  const handleHighlight = (highlight: HighlightRect | null) => {
    // Only set the highlight if position data is available (based on extraction options)
    if (highlight || extractionMetadata?.options?.includePositions !== false) {
      setCurrentHighlight(highlight);
    }
  };

  // Find a field in the extracted data by its position
  const findFieldByPosition = (pageNumber: number, position: [number, number]): { path: string; data: FieldData } | null => {
    // If position data is not included in extraction, don't attempt to find fields by position
    if (extractionMetadata?.options?.includePositions === false) {
      return null;
    }
    
    const [clickX, clickY] = position;
    
    // Helper function to recursively search through the data
    const searchInObject = (obj: any, path: string): { path: string; data: FieldData } | null => {
      if (!obj || typeof obj !== 'object') return null;
      
      // Check if this is a field with position data
      if ('value' in obj && 'confidence' in obj && obj.position) {
        const pos = obj.position;
        if (pos.page_number === pageNumber) {
          const [x1, y1, x2, y2] = pos.bounding_box;
          // Check if the click is within this field's bounding box
          if (clickX >= x1 && clickX <= x2 && clickY >= y1 && clickY <= y2) {
            return { path, data: obj };
          }
        }
        return null;
      }
      
      // If it's an array, search through each item
      if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
          const result = searchInObject(obj[i], `${path}[${i}]`);
          if (result) return result;
        }
        return null;
      }
      
      // If it's an object, search through each property
      for (const key in obj) {
        const newPath = path ? `${path}.${key}` : key;
        const result = searchInObject(obj[key], newPath);
        if (result) return result;
      }
      
      return null;
    };
    
    return searchInObject(extractedData, '');
  };

  // Handle clicks on the PDF viewer
  const handlePdfPositionClick = (pageNumber: number, position: [number, number]) => {
    const field = findFieldByPosition(pageNumber, position);
    
    if (field) {
      // Highlight the field in the data visualizer
      setSelectedFieldPath(field.path);
      
      // Create a highlight for the PDF viewer
      setCurrentHighlight({
        pageNumber: pageNumber,
        boundingBox: field.data.position!.bounding_box,
        id: field.path,
        color: '#3b82f6' // Use a different color for clicked highlights
      });
      
      // Scroll the field into view in the data visualizer
      const fieldElement = document.getElementById(`field-${field.path.replace(/\./g, '-')}`);
      if (fieldElement) {
        fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        // Add a temporary highlight effect
        fieldElement.classList.add('bg-primary/20');
        setTimeout(() => {
          fieldElement.classList.remove('bg-primary/20');
        }, 2000);
      }
      
      toast({
        title: "Field Found",
        description: `Found field: ${field.path.split('.').pop()?.replace(/_/g, ' ')}`,
        variant: "default",
      });
    } else {
      // No field found at this position
      setCurrentHighlight(null);
      setSelectedFieldPath(null);
      
      toast({
        title: "No Field Found",
        description: "No data field was found at this position.",
        variant: "default",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-[80vh]">
        <div className="flex flex-col items-center gap-4">
          <RotateCw className="h-8 w-8 animate-spin text-primary" />
          <h3 className="text-lg font-medium">Loading document data...</h3>
          <p className="text-sm text-muted-foreground">
            Preparing your document for review
          </p>
        </div>
      </div>
    );
  }

  if (!extractedData) {
    return (
      <div className="flex items-center justify-center h-[80vh]">
        <div className="flex flex-col items-center gap-4">
          <AlertCircle className="h-8 w-8 text-destructive" />
          <h3 className="text-lg font-medium">Document Not Found</h3>
          <p className="text-sm text-muted-foreground">
            The document you're looking for could not be found or has no extracted data.
          </p>
          <Button onClick={() => window.history.back()}>Go Back</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-bold tracking-tight">Document Review</h1>
        
        <div className="ml-auto flex gap-2">
          <Button
            variant={editMode ? "default" : "outline"}
            size="sm"
            onClick={() => setEditMode(!editMode)}
            aria-pressed={editMode}
          >
            {editMode ? (
              <>
                <Eye className="mr-2 h-4 w-4" aria-hidden="true" /> View Mode
              </>
            ) : (
              <>
                <Edit className="mr-2 h-4 w-4" aria-hidden="true" /> Edit Mode
              </>
            )}
          </Button>
        </div>
      </div>

      <div className="h-[calc(100vh-200px)] w-full">
        <ResizablePanels
          leftPanel={
            <DataVisualizer
              data={extractedData}
              onHighlight={handleHighlight}
              onSelect={handleFieldSelect}
              confidenceThreshold={confidenceThreshold}
              selectedFieldPath={selectedFieldPath}
              options={{
                includePositions: extractionMetadata?.options?.includePositions !== false
              }}
            />
          }
          rightPanel={
            <Card className="h-full flex flex-col overflow-hidden border-0">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <div>
                  <CardTitle>Document Preview</CardTitle>
                  <CardDescription>
                    Original document for reference
                  </CardDescription>
                </div>
                {extractionMetadata && (
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Badge variant="outline" className="cursor-help">
                          {extractionMetadata.model}
                        </Badge>
                      </TooltipTrigger>
                      <TooltipContent className="w-80">
                        <div className="space-y-2">
                          <p className="font-medium">Extraction Details</p>
                          <div className="text-xs space-y-1">
                            <div className="flex justify-between">
                              <span>Model:</span>
                              <span className="font-medium">{extractionMetadata.model}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Processing Time:</span>
                              <span className="font-medium">{Math.round(extractionMetadata.processingTimeMs / 1000)}s</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Timestamp:</span>
                              <span className="font-medium">{new Date(extractionMetadata.timestamp).toLocaleString()}</span>
                            </div>
                            {extractionMetadata.options && (
                              <>
                                <div className="flex justify-between mt-2">
                                  <span>Position Data:</span>
                                  <span className="font-medium">{extractionMetadata.options.includePositions ? "Enabled" : "Disabled"}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span>Confidence Scores:</span>
                                  <span className="font-medium">{extractionMetadata.options.includeConfidence !== false ? "Enabled" : "Disabled"}</span>
                                </div>
                              </>
                            )}
                          </div>
                        </div>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                )}
              </CardHeader>
              
              <CardContent className="flex-1 overflow-auto p-0 bg-muted/50 relative">
                {pdfUrl ? (
                  <DocumentViewer 
                    url={pdfUrl} 
                    highlights={currentHighlight ? [currentHighlight] : []}
                    onPositionClick={handlePdfPositionClick}
                  />
                ) : (
                  <div className="flex flex-col items-center justify-center text-center p-6 h-full">
                    <FileText className="h-16 w-16 text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium">{fileName || "Document Preview"}</h3>
                    <p className="text-sm text-muted-foreground mt-2">
                      Preview not available
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          }
          defaultLeftWidth={40}
          minLeftWidth={25}
          maxLeftWidth={60}
          storageKey="documentReviewPanels"
        />
      </div>

      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={() => {
            setEditMode(false);
            setConfirmed(false);
          }}
        >
          Reset
        </Button>
        
        <div className="flex gap-2">
          <Dialog open={showExportDialog} onOpenChange={setShowExportDialog}>
            <DialogTrigger asChild>
              <Button 
                variant="outline"
                onClick={() => setShowExportDialog(true)}
              >
                <Download className="mr-2 h-4 w-4" /> Export Data
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Export Extracted Data</DialogTitle>
                <DialogDescription>
                  Choose your preferred export format
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="export-format" className="text-right">
                    Format
                  </Label>
                  <Select
                    value={exportFormat}
                    onValueChange={setExportFormat}
                  >
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select format" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="json">JSON</SelectItem>
                      <SelectItem value="csv">CSV</SelectItem>
                      <SelectItem value="xlsx">Excel (XLSX)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="include-metadata" className="text-right">
                    Include Metadata
                  </Label>
                  <div className="col-span-3">
                    <Switch 
                      id="include-metadata" 
                      checked={includeMetadata}
                      onCheckedChange={setIncludeMetadata}
                    />
                  </div>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setShowExportDialog(false)}>
                  Cancel
                </Button>
                <Button onClick={handleExport}>
                  <Download className="mr-2 h-4 w-4" /> Download
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          
          <Button
            onClick={handleConfirm}
            disabled={confirmed}
            className="bg-primary text-white hover:bg-primary/90 hover:text-white font-semibold"
            aria-label="Confirm extracted data"
          >
            {confirmed ? (
              <>
                <Check className="mr-2 h-4 w-4" aria-hidden="true" /> Confirmed
              </>
            ) : (
              "Confirm Data"
            )}
          </Button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="app/api/documents/[id]/route.ts">
import { NextResponse } from "next/server";
import { readFile, readdir, writeFile } from "fs/promises";
import { join } from "path";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { existsSync } from "fs";

// Check if API key exists before initializing
const apiKey = process.env.GEMINI_API_KEY;
const genAI = apiKey ? new GoogleGenerativeAI(apiKey) : null;
const MODEL_ID = "gemini-2.0-flash";

// This is a temporary solution for demo purposes
const UPLOAD_DIR = join(process.cwd(), "uploads");

// Define types for our data structure
interface PositionData {
  page_number: number;
  bounding_box: [number, number, number, number]; // [x1, y1, x2, y2] as percentages
}

interface FieldData {
  value: string | number;
  confidence: number;
  position?: PositionData;
}

// More flexible data structure that can handle any type of document
interface ExtractedData {
  [key: string]: FieldData | FieldData[] | { [key: string]: FieldData | FieldData[] };
}

// Metadata about the extraction process
interface ExtractionMetadata {
  timestamp: string;
  model: string;
  prompt: string;
  processingTimeMs: number;
  options?: {
    includeConfidence?: boolean;
    includePositions?: boolean;
    detectDocumentType?: boolean;
    temperature?: number;
  };
}

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    const documentId = id;
    const documentDir = join(UPLOAD_DIR, documentId);
    
    // Check if the document directory exists
    if (!existsSync(documentDir)) {
      return NextResponse.json(
        { error: "Document not found" },
        { status: 404 }
      );
    }
    
    // Get the file from the document directory
    const files = await readdir(documentDir);
    const documentFiles = files.filter(file => 
      file.endsWith('.pdf') || 
      file.endsWith('.png') || 
      file.endsWith('.jpg') || 
      file.endsWith('.jpeg')
    );
    
    if (documentFiles.length === 0) {
      return NextResponse.json(
        { error: "No document files found for this document" },
        { status: 404 }
      );
    }
    
    const fileName = documentFiles[0]; // Get the first document file
    const filePath = join(documentDir, fileName);
    
    // Check if we already have extracted data
    const extractedDataPath = join(documentDir, "extracted_data.json");
    let extractedData: ExtractedData | null = null;
    let extractionMetadata: ExtractionMetadata | null = null;
    
    if (existsSync(extractedDataPath)) {
      // If we already have extracted data, return it
      const dataBuffer = await readFile(extractedDataPath);
      const parsedData = JSON.parse(dataBuffer.toString());
      extractedData = parsedData.data;
      extractionMetadata = parsedData.metadata;
      
      return NextResponse.json({
        documentId,
        fileName,
        extractedData,
        metadata: extractionMetadata
      });
    } else {
      // Otherwise, extract data from the document
      const startTime = Date.now();
      const fileBuffer = await readFile(filePath);
      const base64 = fileBuffer.toString("base64");
      
      // Check if there's a custom extraction prompt
      const promptPath = join(documentDir, "extraction_prompt.txt");
      let customPrompt = "";
      
      if (existsSync(promptPath)) {
        try {
          const promptBuffer = await readFile(promptPath);
          customPrompt = promptBuffer.toString().trim();
          
          if (customPrompt) {
            console.log("Retrieved custom prompt from file:", customPrompt);
          }
        } catch (error) {
          console.error("Error reading custom prompt:", error);
        }
      } else {
        console.log("No custom prompt file found at:", promptPath);
      }
      
      // Check for extraction options
      const optionsPath = join(documentDir, "extraction_options.json");
      let extractionOptions = {
        includeConfidence: true,
        includePositions: false,
        detectDocumentType: true,
        temperature: 0.1
      };
      
      if (existsSync(optionsPath)) {
        try {
          const optionsBuffer = await readFile(optionsPath);
          extractionOptions = JSON.parse(optionsBuffer.toString());
        } catch (error) {
          console.error("Error parsing extraction options:", error);
          // Continue with defaults
        }
      }
      
      // Check if API key is configured
      if (!process.env.GEMINI_API_KEY) {
        return NextResponse.json(
          { error: "Gemini API key is not configured. Please add a valid API key to your .env.local file." },
          { status: 500 }
        );
      }

      // Check if genAI is properly initialized
      if (!genAI) {
        return NextResponse.json(
          { error: "Failed to initialize Gemini AI client. Please check your API key." },
          { status: 500 }
        );
      }
      
      // Use Gemini API to extract data
      const model = genAI.getGenerativeModel({
        model: MODEL_ID,
        generationConfig: {
          temperature: extractionOptions.temperature || 0.0,
          maxOutputTokens: 4096,
          topP: 0.1,
          topK: 40,
        },
      });
      
      // Build the prompt, incorporating the custom prompt if available
      let promptText = "";

      if (customPrompt) {
        promptText = `USER'S REQUEST: ${customPrompt}

IMPORTANT INSTRUCTIONS:
1. You MUST return ONLY valid JSON. No text explanations.
2. For each field requested, use the following format:
{
  "field_name": {
    "value": "extracted value",
    "confidence": 0.95
  }
}
3. Example: If asked for "name and email", respond with:
{
  "name": {
    "value": "John Smith",
    "confidence": 0.95
  },
  "email": {
    "value": "john@example.com",
    "confidence": 0.9
  }
}

Please extract the following fields from the document and return them as JSON:
${customPrompt}`;

        console.log("Using enhanced prompt for extraction:", promptText);
      } else {
        promptText = "Extract all relevant information from this document and return as JSON.";
        console.log("No custom prompt found, using default extraction instructions");
      }
      
      try {
        // Use Gemini API to extract data
        let result;
        try {
          result = await model.generateContent([
            {
              text: promptText,
            },
            {
              inlineData: {
                mimeType: fileName.endsWith('.pdf') ? "application/pdf" : 
                          (fileName.endsWith('.png') ? "image/png" : 
                          (fileName.endsWith('.jpg') || fileName.endsWith('.jpeg') ? "image/jpeg" : "application/octet-stream")),
                data: base64,
              },
            },
          ]);
        } catch (apiError) {
          console.error("Error calling Gemini API:", apiError);
          
          // Check for specific API errors
          const errorMessage = (apiError as Error)?.message || "Unknown API error";
          
          if (errorMessage.includes("quota") || errorMessage.includes("rate limit")) {
            return NextResponse.json(
              { error: "AI service quota exceeded. Please try again later.", details: errorMessage },
              { status: 429 }
            );
          } else if (errorMessage.includes("permission") || errorMessage.includes("access")) {
            return NextResponse.json(
              { error: "API access permission issue. Check your API key configuration.", details: errorMessage },
              { status: 403 }
            );
          } else {
            return NextResponse.json(
              { error: "Error calling the AI service", details: errorMessage },
              { status: 500 }
            );
          }
        }
        
        const response = result.response;
        const extractedText = response.text();
        
        // Add detailed logging for debugging
        console.log("====== AI RESPONSE START ======");
        console.log(extractedText.substring(0, 200) + (extractedText.length > 200 ? "..." : ""));
        console.log("====== AI RESPONSE END ======");
        
        // Create metadata about the extraction process
        extractionMetadata = {
          timestamp: new Date().toISOString(),
          model: MODEL_ID,
          prompt: promptText,
          processingTimeMs: Date.now() - startTime,
          options: extractionOptions
        };
        
        // Parse the extracted data
        try {
          // Clean up the response text by removing markdown code block markers
          const cleanText = extractedText
            .replace(/^```json\s*/, '')
            .replace(/^```\s*/, '')
            .replace(/```\s*$/, '')
            .trim();
            
            console.log("====== CLEAN TEXT START ======");
            console.log(cleanText.substring(0, 200) + (cleanText.length > 200 ? "..." : ""));
            console.log("====== CLEAN TEXT END ======");
            
            // Additional check - if the text doesn't start with '{', attempt to convert to JSON
            if (!cleanText.trim().startsWith('{')) {
              console.log("Response is not in JSON format, attempting to format it");
              
              // Attempt to convert simple text format to JSON
              try {
                const lines = cleanText.split('\n');
                const formattedData: Record<string, any> = {};
                
                for (const line of lines) {
                  const colonIndex = line.indexOf(':');
                  if (colonIndex > 0) {
                    const key = line.substring(0, colonIndex).trim().toLowerCase().replace(/\s+/g, '_');
                    const value = line.substring(colonIndex + 1).trim();
                    
                    if (key && value) {
                      formattedData[key] = {
                        value: value,
                        confidence: 0.8 // Default confidence
                      };
                    }
                  }
                }
                
                if (Object.keys(formattedData).length > 0) {
                  console.log("Converted text to JSON format:", JSON.stringify(formattedData).substring(0, 200));
                  extractedData = formattedData as ExtractedData;
                } else {
                  throw new Error("Could not parse text into structured data");
                }
              } catch (conversionError) {
                console.error("Failed to convert text to JSON:", conversionError);
                throw new Error("Response is not in valid JSON format and conversion failed");
              }
            } else {
              // Original JSON parsing attempt
              extractedData = JSON.parse(cleanText) as ExtractedData;
            }
          
          // Save the extracted data and metadata for future requests
          await writeFile(
            extractedDataPath, 
            JSON.stringify({
              data: extractedData,
              metadata: extractionMetadata
            })
          );
          
          return NextResponse.json({
            documentId,
            fileName,
            extractedData,
            metadata: extractionMetadata
          });
        } catch (error) {
          console.error("Error parsing extracted data:", error);
          
          // Provide a more helpful error response with original text for debugging
          const responsePreview = extractedText.substring(0, 200) + (extractedText.length > 200 ? "..." : "");
          
          return NextResponse.json(
            { 
              error: "Failed to parse extracted data",
              details: (error as Error)?.message || "Unknown error",
              suggestion: "The AI response wasn't in the expected JSON format. Try making your prompt more specific, e.g. 'Find the invoice number and total amount'.",
              responsePreview: responsePreview,
              rawResponse: extractedText.length < 1000 ? extractedText : undefined // Only include if not too large
            },
            { status: 500 }
          );
        }
      } catch (error) {
        console.error("Error generating content:", error);
        return NextResponse.json(
          { error: "Failed to extract data from document", details: (error as Error)?.message || "Unknown error" },
          { status: 500 }
        );
      }
    }
  } catch (error) {
    console.error("Error processing request:", error);
    return NextResponse.json(
      { error: "Failed to extract data from document" },
      { status: 500 }
    );
  }
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Base colors */
    --background: 0 0% 100%; /* White main content background */
    --foreground: 0 0% 15%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 15%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 15%;
    --primary: 0 0% 35%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 94%;
    --secondary-foreground: 0 0% 40%;
    --muted: 0 0% 94%;
    --muted-foreground: 0 0% 45%;
    --accent: 0 0% 94%;
    --accent-foreground: 0 0% 40%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 90%;
    --input: 0 0% 90%;
    --ring: 0 0% 40%;
    --radius: 0.5rem;
    --radius-large: 12px;
    
    /* Chart colors */
    --chart-1: 0 0% 60%;
    --chart-2: 0 0% 40%;
    --chart-3: 0 0% 20%;
    --chart-4: 0 0% 80%;
    --chart-5: 142 70% 45%;
    
    /* Spacing variables */
    --spacing: 0.25rem;
    --font-sans: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    
    /* Color neutral variables for themes */
    --color-neutral-50: hsl(0, 0%, 98%);
    --color-neutral-100: hsl(0, 0%, 96%);
    --color-neutral-200: hsl(0, 0%, 90%);
    --color-neutral-300: hsl(0, 0%, 80%);
    --color-neutral-400: hsl(0, 0%, 65%);
    --color-neutral-500: hsl(0, 0%, 45%);
    --color-neutral-600: hsl(0, 0%, 35%);
    --color-neutral-700: hsl(0, 0%, 25%);
    --color-neutral-800: hsl(0, 0%, 20%);
    --color-neutral-900: hsl(0, 0%, 15%);
    --color-neutral-950: hsl(0, 0%, 10%);
    
    /* Success color (used sparingly) */
    --color-success-50: hsl(142, 80%, 97%);
    --color-success-500: hsl(142, 70%, 45%);
    --color-success-600: hsl(142, 70%, 35%);
    
    /* Sidebar specific colors for light mode - Updated for light theme */
    --sidebar-background: hsl(0, 0%, 94%); /* #F0F0F0 - Grayish White */
    --sidebar-foreground: var(--color-neutral-900);
    --sidebar-muted-foreground: var(--color-neutral-500);
    --sidebar-accent: hsl(0, 0%, 90%); /* Adjusted accent for new background */
    --sidebar-accent-foreground: var(--color-neutral-900);
    
    /* Dashboard specific variables */
    --header-height: calc(var(--spacing) * 12 + 1px);
    --sidebar-width: 240px;
    --sidebar-width-collapsed: 60px;
  }

  .dark {
    /* Dark mode base colors - Updated with complementary colors to Space Gray */
    --background: 210 5% 8%; /* Subtle blue-black that complements Space Gray */
    --foreground: 210 15% 98%;
    --card: 210 5% 15%;
    --card-foreground: 210 15% 98%;
    --popover: 210 5% 15%;
    --popover-foreground: 210 15% 98%;
    --primary: 210 15% 50%;
    --primary-foreground: 210 15% 5%;
    --secondary: 210 5% 22%;
    --secondary-foreground: 210 15% 98%;
    --muted: 210 5% 22%;
    --muted-foreground: 210 15% 65%;
    --accent: 210 5% 25%;
    --accent-foreground: 210 15% 98%;
    --destructive: 0 65% 30%;
    --destructive-foreground: 210 15% 98%;
    --border: 210 5% 25%;
    --input: 210 5% 25%;
    --ring: 210 15% 65%;
    --chart-1: 210 15% 75%;
    --chart-2: 210 15% 55%;
    --chart-3: 210 15% 35%;
    --chart-4: 210 15% 95%;
    --chart-5: 142 60% 40%;
    
    /* Sidebar specific colors for dark mode - Space Gray remains the same */
    --sidebar-background: hsl(0, 0%, 20%); /* #333333 - Space Gray */
    --sidebar-foreground: hsl(210, 15%, 90%);
    --sidebar-muted-foreground: hsl(210, 15%, 65%);
    --sidebar-accent: hsl(210, 5%, 25%); /* Adjusted accent for new background */
    --sidebar-accent-foreground: hsl(210, 15%, 90%);
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-sidebar-background text-foreground;
  }

  /* Apply text colors to headings */
  h1, h2, h3, h4, h5, h6 {
    @apply text-foreground;
  }
}

/* Define CSS container queries for responsive components */
@layer utilities {
  .size-8 {
    width: 2rem;
    height: 2rem;
  }
  
  .size-4 {
    width: 1rem;
    height: 1rem;
  }
  
  .size-5 {
    width: 1.25rem;
    height: 1.25rem;
  }
  
  .text-balance {
    text-wrap: balance;
  }

  .rounded-large {
    border-radius: 16px;
  }
  
  @media (min-width: 640px) {
    .rounded-large {
      border-radius: 16px;
    }
  }
  
  @media (min-width: 1024px) {
    .rounded-large {
      border-radius: 16px;
    }
  }
}

/* Dashboard container styles */
.dashboard-container {
  @apply w-full flex-1 bg-background overflow-hidden shadow-[0_5px_15px_rgba(0,0,0,0.05)] border border-border/30 flex flex-col;
  min-width: 0;
  max-width: 100%;
  min-height: calc(100vh - 8px);
  flex-shrink: 1;
  margin: 4px 0;
  border-radius: 12px;
}

.dark .dashboard-container {
  @apply shadow-[0_5px_15px_rgba(0,0,0,0.15)];
}

/* Set the dashboard background to match sidebar */
.dashboard-background {
  @apply bg-sidebar-background;
}

/* Theme scaling for different screen sizes */
.theme-scaled {
  @media (min-width: 1024px) {
    --radius: 0.6rem;
    --radius-large: 12px;
    --text-lg: 1.05rem;
    --text-base: 0.85rem;
    --text-sm: 0.8rem;
    --spacing: 0.222222rem;
  }

  @media (min-width: 1280px) {
    --radius-large: 12px;
  }

  @media (min-width: 1536px) {
    --radius-large: 12px;
  }

  [data-slot="card"] {
    --spacing: 0.16rem;
  }

  [data-slot="select-trigger"],
  [data-slot="toggle-group-item"] {
    --spacing: 0.222222rem;
  }
}

/* Print mode - remove shadows and border radiuses */
@media print {
  * {
    @apply !rounded-none !shadow-none;
  }

  body {
    @apply !bg-white text-black;
  }
  
  .dashboard-main {
    @apply !w-full !ml-0;
  }
  
  .dashboard-sidebar {
    @apply !hidden;
  }
}
</file>

<file path="app/page.tsx">
import LandingPage from "./(marketing)/page";

export default function Home() {
  return <LandingPage />;
}
</file>

<file path="components/FileUpload.tsx">
"use client";

import { useCallback, useState } from "react";
import { useDropzone } from "react-dropzone";
import { Button } from "./ui/button";
import { Upload as UploadIcon, File as FileIcon, X } from "lucide-react";
import PdfViewer from "./PdfViewer";
import { Textarea } from "./ui/textarea";
import { Label } from "./ui/label";
import { cn } from "@/lib/utils";

interface FileUploadProps {
  onFileSelect: (file: File) => void;
  onPromptChange?: (prompt: string, options?: any) => void;
  initialPrompt?: string;
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return (
    Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  );
}

export function FileUpload({ onFileSelect, onPromptChange, initialPrompt = "" }: FileUploadProps) {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [file, setFile] = useState<File | null>(null);
  const [prompt, setPrompt] = useState(initialPrompt);

  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const file = acceptedFiles[0];
      setSelectedFile(file);
      onFileSelect(file);
      setFile(file);
    },
    [onFileSelect]
  );

  const handlePromptChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newPrompt = e.target.value;
    setPrompt(newPrompt);
    if (onPromptChange) {
      onPromptChange(newPrompt, {});
    }
  };

  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({
    onDrop,
    accept: {
      "application/pdf": [".pdf"],
      "image/png": [".png"],
      "image/jpeg": [".jpg", ".jpeg"],
    },
    maxSize: 100 * 1024 * 1024, // 100MB
    multiple: false,
  });

  return (
    <div className="w-full space-y-6">
      <div className="file-upload-container min-h-[180px]">
        {!selectedFile ? (
          <div
            {...getRootProps()}
            className={cn(
              "min-h-[180px] p-6 rounded-lg",
              "transition-all duration-200 ease-in-out",
              "border-2 border-dashed cursor-pointer",
              "flex flex-col items-center justify-center gap-4",
              isDragActive ? "border-primary bg-primary/5 scale-[1.02]" : "border-muted-foreground/30 bg-secondary/30 hover:bg-secondary/50 hover:border-primary/50",
              isDragAccept && "border-green-500 bg-green-50 dark:bg-green-950/20",
              isDragReject && "border-red-500 bg-red-50 dark:bg-red-950/20",
            )}
          >
            <input {...getInputProps()} />
            
            <div className="flex flex-col items-center text-center">
              <div className="upload-icon-container w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center mb-4">
                <UploadIcon className="w-8 h-8 text-primary" />
              </div>
              
              <h4 className="text-base font-medium text-foreground mb-1">
                {isDragActive 
                  ? isDragAccept 
                    ? "Drop to upload your file" 
                    : "This file type is not supported"
                  : "Drag & Drop your file here"}
              </h4>
              
              <p className="text-sm text-muted-foreground mb-2">
                Upload a PDF, PNG or JPEG file
              </p>
              
              <Button 
                variant="outline" 
                size="sm" 
                className="mt-2"
                type="button"
              >
                Browse Files
              </Button>
              
              <p className="text-xs text-muted-foreground mt-3">
                Maximum file size: 100MB
              </p>
            </div>
          </div>
        ) : (
          <div className="selected-file-container p-5 rounded-lg border border-muted bg-secondary/40 transition-all">
            <div className="flex flex-row items-center">
              <div className="file-icon-container w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center mr-4 flex-shrink-0">
                <FileIcon className="w-5 h-5 text-primary" />
              </div>
              
              <div className="flex-grow min-w-0">
                <p className="text-sm font-medium truncate text-foreground">
                  {selectedFile?.name}
                </p>
                <p className="text-xs text-muted-foreground">
                  {formatFileSize(selectedFile?.size ?? 0)}
                </p>
              </div>
              
              {file && file.type === "application/pdf" && <PdfViewer file={file} />}
              {file && file.type.startsWith("image/") && (
                <div className="ml-2 border rounded overflow-hidden">
                  <img 
                    src={URL.createObjectURL(file)} 
                    alt="Preview" 
                    className="max-h-20 max-w-20 object-contain"
                  />
                </div>
              )}

              <Button
                variant="ghost"
                size="icon"
                onClick={() => setSelectedFile(null)}
                className="flex-shrink-0 ml-2 text-muted-foreground hover:text-foreground"
              >
                <X className="w-4 h-4" />
                <span className="sr-only">Remove file</span>
              </Button>
            </div>
          </div>
        )}
      </div>

      <div className="extraction-instructions-container space-y-2">
        <Label htmlFor="extraction-prompt" className="text-sm font-medium">Extraction Instructions</Label>
        <Textarea
          id="extraction-prompt"
          placeholder="Describe what data you want to extract from this document (e.g., 'Extract invoice number, date, vendor name, line items, and total amount')"
          value={prompt}
          onChange={handlePromptChange}
          className="min-h-[120px] resize-none border-muted focus:border-primary"
        />
        <p className="text-xs text-muted-foreground">
          Provide specific instructions to improve extraction accuracy
        </p>
      </div>
    </div>
  );
}
</file>

<file path="package.json">
{
    "name": "ingestio.io",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint"
    },
    "dependencies": {
        "@google/generative-ai": "^0.21.0",
        "@hookform/resolvers": "^4.1.3",
        "@radix-ui/react-alert-dialog": "^1.1.6",
        "@radix-ui/react-avatar": "^1.1.3",
        "@radix-ui/react-collapsible": "^1.1.3",
        "@radix-ui/react-dialog": "^1.1.6",
        "@radix-ui/react-dropdown-menu": "^2.1.6",
        "@radix-ui/react-hover-card": "^1.1.6",
        "@radix-ui/react-label": "^2.1.2",
        "@radix-ui/react-popover": "^1.1.6",
        "@radix-ui/react-progress": "^1.1.2",
        "@radix-ui/react-scroll-area": "^1.2.3",
        "@radix-ui/react-select": "^2.1.6",
        "@radix-ui/react-separator": "^1.1.2",
        "@radix-ui/react-slider": "^1.2.3",
        "@radix-ui/react-slot": "^1.1.2",
        "@radix-ui/react-switch": "^1.1.3",
        "@radix-ui/react-tabs": "^1.1.3",
        "@radix-ui/react-toast": "^1.2.6",
        "@radix-ui/react-tooltip": "^1.1.8",
        "@types/uuid": "^10.0.0",
        "@wojtekmaj/react-hooks": "^1.22.0",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "embla-carousel-react": "^8.5.2",
        "framer-motion": "^12.5.0",
        "lucide-react": "^0.475.0",
        "next": "14.2.10",
        "next-themes": "^0.4.6",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-dropzone": "^14.3.5",
        "react-hook-form": "^7.54.2",
        "react-pdf": "^9.2.1",
        "sonner": "^2.0.1",
        "tailwind-merge": "^3.0.1",
        "tailwindcss-animate": "^1.0.7",
        "uuid": "^11.1.0",
        "zod": "^3.24.2"
    },
    "devDependencies": {
        "@eslint/eslintrc": "^3",
        "@types/lodash": "^4.17.16",
        "@types/node": "^20",
        "@types/react": "^19",
        "@types/react-dom": "^19",
        "eslint": "^8.57.1",
        "eslint-config-next": "14.2.10",
        "postcss": "^8",
        "prettier-eslint": "^16.3.0",
        "tailwindcss": "^3.4.1",
        "typescript": "^5"
    }
}
</file>

</files>
