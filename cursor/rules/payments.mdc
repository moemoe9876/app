---
description: Follow these rules when working on payments with Stripe.
globs: app/api/stripe/**/*.ts, actions/payments/**/*.ts, components/payments/**/*.tsx, components/payments/**/*.ts
---
### Payments Rules

Follow these rules when working on payments.

It uses Stripe for payments.

#### General Rules

- **Stripe SDK:** Utilize the official Stripe Node.js SDK for backend payment processing and the Stripe.js library for frontend payment interactions.
- **Server-Side Payment Logic:** Implement payment processing logic primarily on the server-side (in server actions or API routes) for security and compliance.
- **Secure API Keys:** Securely manage your Stripe API keys. Use environment variables and never expose secret keys in client-side code.
- **Webhook Handling:** Implement Stripe webhook handlers to reliably track payment events, subscription changes, and handle asynchronous payment confirmations.
- **Error Handling:** Implement robust error handling for all Stripe API interactions and payment flows.
- **Compliance (PCI DSS):** Be aware of PCI DSS compliance requirements when handling payment information. Minimize direct handling of sensitive card data on your server.
- **Idempotency:** Implement idempotency for Stripe API requests, especially for critical operations like charges and refunds, to prevent accidental duplicate actions.

#### Stripe Specific Rules

- **Initialize Stripe:** Initialize the Stripe Node.js SDK on the server-side using your secret API key.
- **Frontend Payment Intents/Checkout:** Use Stripe.js to create Payment Intents or Checkout Sessions on the frontend to securely handle payment details and SCA (Strong Customer Authentication).
- **Backend API Routes/Actions:** Create server actions or API routes to:
    - Create Payment Intents or Checkout Sessions.
    - Handle webhook events (e.g., `payment_intent.succeeded`, `checkout.session.completed`, `customer.subscription.updated`).
    - Manage subscriptions using Stripe's Subscription API.
    - Process refunds and handle disputes.
- **Webhook Security:** Verify the authenticity of Stripe webhook events using the Stripe CLI or by validating signatures using your webhook signing secret.
- **Data Modeling:** Design your database schema to effectively track payment status, subscriptions, customer information, and related data.
- **Testing:** Thoroughly test your payment integration using Stripe's test mode and test cards before going live.

**Example Server Action for Creating a Stripe Checkout Session:**

```ts
"use server";
import Stripe from 'stripe';
import { headers } from 'next/headers';
import { stripe } from '@/lib/stripe'; // Assuming you have Stripe initialized

export async function createCheckoutSessionAction(priceId: string) {
  const checkoutSession = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    mode: 'subscription',
    success_url: `${headers().get('origin')}/dashboard/?checkout_success=true`, // Adjust success URL
    cancel_url: `${headers().get('origin')}/dashboard/?checkout_cancel=true`,  // Adjust cancel URL,
  });

  return { sessionId: checkoutSession.id };
}
```

**Example API Route for Handling Stripe Webhooks (`app/api/stripe/webhooks/route.ts`):**

```ts
import Stripe from 'stripe';
import { headers } from 'next/headers';
import { NextResponse } from 'next/server';
import { stripe } from '@/lib/stripe'; // Assuming you have Stripe initialized

const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(req: Request) {
  const body = await req.text();
  const signature = headers().get('stripe-signature') as string;

  let event;

  try {
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err: any) {
    return new NextResponse(`Webhook Error: ${err.message}`, { status: 400 });
  }

  const eventType = event.type;

  if (eventType === 'payment_intent.succeeded') {
    const paymentIntent = event.data.object as Stripe.PaymentIntent;
    console.log(`PaymentIntent for ${paymentIntent.amount} succeeded!`);
    // Handle successful payment intent (e.g., update database, fulfill order)
  } else if (eventType === 'checkout.session.completed') {
    const checkoutSession = event.data.object as Stripe.Checkout.Session;
    console.log(`Checkout Session completed for customer: ${checkoutSession.customer}`);
    // Handle successful checkout session completion (e.g., grant access, update subscription status)
  }
  // ... handle other relevant event types

  return new NextResponse(null, { status: 200 });
}
```

**Security Considerations:**

- **HTTPS:** Ensure your site is served over HTTPS to protect payment information in transit.
- **CORS:** Configure CORS (Cross-Origin Resource Sharing) policies appropriately for your API routes that handle Stripe requests.
- **Rate Limiting:** Implement rate limiting on your API endpoints to prevent abuse and protect against denial-of-service attacks.
```