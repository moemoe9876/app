---
description: Follow these rules when working on auth using Firebase Auth.
globs: app/(auth)/**/*.ts, app/(auth)/**/*.tsx, components/auth/**/*.ts, components/auth/**/*.tsx, actions/auth/**/*.ts
---
### Auth Rules

Follow these rules when working on authentication.

It uses Firebase Authentication for user authentication.

#### General Rules

- **Firebase Auth SDK:** Use the Firebase Authentication SDK for all authentication-related operations.
- **Server-Side Authentication:**  Prefer server-side authentication logic using Firebase Admin SDK in server actions or API routes for enhanced security.
- **Client-Side Authentication:** For client components, use the Firebase client SDK and manage authentication state using React Context or state management libraries.
- **Secure User Context:** Ensure user authentication context is securely managed and accessible across relevant components.
- **Error Handling:** Implement robust error handling for authentication flows, including sign-in, sign-up, and password management.
- **Security Rules:** Define and enforce Firebase Security Rules to protect user data and control access to Firebase services.

#### Firebase Specific Rules

- **Initialize Firebase Auth:** Initialize Firebase Authentication in your `_app.tsx` or layout file if not already set up.
- **Auth Instance:** Obtain the Firebase Auth instance using `getAuth(firebaseApp)`.
- **User Management:** Utilize Firebase Auth methods for user sign-up (`createUserWithEmailAndPassword`, `signInWithPopup`, etc.), sign-in (`signInWithEmailAndPassword`, `signInWithRedirect`, etc.), sign-out (`signOut`), and password management (`sendPasswordResetEmail`, `confirmPasswordReset`, etc.).
- **AuthState Listener:** Implement an authentication state listener (`onAuthStateChanged`) to react to changes in user authentication status and update UI accordingly.
- **Admin SDK for Server Actions:** Use Firebase Admin SDK in server actions for tasks like verifying user tokens, managing custom claims, or any backend-related authentication logic.
- **Environment Variables:** Securely manage Firebase configuration using environment variables and avoid hardcoding sensitive information.

**Example of Client-Side Auth State Management (Conceptual):**

```tsx
"use client";
import { createContext, useContext, useState, useEffect } from 'react';
import { getAuth, onAuthStateChanged, User } from 'firebase/auth';
import { firebaseApp } from '@/firebaseConfig'; // Assuming you have Firebase initialized

interface AuthContextType {
  user: User | null;
  loading: boolean;
  // ... other auth related functions like signIn, signOut etc.
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const auth = getAuth(firebaseApp);
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });
    return () => unsubscribe(); // Cleanup listener
  }, []);

  const value: AuthContextType = { user, loading, /* ... */ };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
```

**Example of Server Action with Admin SDK (Conceptual):**

```ts
"use server";
import { auth } from '@/firebaseAdmin'; // Assuming you have Firebase Admin SDK initialized

export async function verifyIdTokenAction(idToken: string) {
  try {
    const decodedToken = await auth.verifyIdToken(idToken);
    // Token is valid
    return { success: true, uid: decodedToken.uid };
  } catch (error) {
    // Token is invalid
    return { success: false, error: 'Invalid ID token' };
  }
}
```

**RLS Policies (For Firebase Firestore/Realtime Database - if used for user data):**

- If you are using Firebase Firestore or Realtime Database to store user-specific data, remember to define Firebase Security Rules to ensure data privacy and security.
- Example Firestore Security Rule for user-specific data:
  ```
  rules_version = '2';
  service cloud.firestore {
    match /databases/{database}/documents {
      match /users/{userId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null;
      }
    }
  }
  ```
  